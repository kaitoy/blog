<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>To Be Decided </title>
    <link>https://www.kaitoy.xyz/tags/github/</link>
    <language>en-us</language>
    <author>Kaito Yamada</author>
    <rights>(C) 2018</rights>
    <updated>2017-02-14 09:51:42 -0700 -0700</updated>

    
      
        <item>
          <title>ブログアドレスを変更したときにやったこと</title>
          <link>https://www.kaitoy.xyz/2017/02/14/change-subdomain/</link>
          <pubDate>Tue, 14 Feb 2017 09:51:42 -0700</pubDate>
          <author>Kaito Yamada</author>
          <guid>https://www.kaitoy.xyz/2017/02/14/change-subdomain/</guid>
          <description>

&lt;p&gt;このブログの閲覧数がそこそこの規模になってきたので、&lt;a href=&#34;https://www.google.co.jp/adsense/start/&#34;&gt;Google AdSense&lt;/a&gt;で小遣い稼ぎを始めようとしたら、最近サブドメインが&lt;code&gt;www&lt;/code&gt;じゃないとできないようになったようだったので、サブドメインを&lt;code&gt;tbd&lt;/code&gt;から&lt;code&gt;www&lt;/code&gt;に変更した話。&lt;/p&gt;

&lt;p&gt;変更自体はそんなに難しくなかったけど、Googleの検索順位を保つためにいろいろ気を使う必要があった。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;



&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-6244473643910448&#34;
     data-ad-slot=&#34;1845600530&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/p&gt;

&lt;h1 id=&#34;ブログアドレスの変更&#34;&gt;ブログアドレスの変更&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.kaitoy.xyz/2015/08/28/using-hugo/&#34;&gt;以前&lt;/a&gt;にも書いたが、このブログは&lt;a href=&#34;https://gohugo.io/&#34;&gt;&lt;strong&gt;Hugo&lt;/strong&gt;&lt;/a&gt;で作って&lt;a href=&#34;https://pages.github.com/&#34;&gt;&lt;strong&gt;GitHub Pages&lt;/strong&gt;&lt;/a&gt;でカスタムドメインで公開している。&lt;/p&gt;

&lt;p&gt;コメント欄を設けるために&lt;a href=&#34;https://disqus.com/&#34;&gt;&lt;strong&gt;Disqus&lt;/strong&gt;&lt;/a&gt;を使っている。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;&lt;strong&gt;Cloudflare&lt;/strong&gt;&lt;/a&gt;を使って&lt;a href=&#34;https://www.kaitoy.xyz/2016/07/01/https-support-by-cloudflare/&#34;&gt;全体をHTTPS化&lt;/a&gt;していて、その関係で&lt;code&gt;kaitoy.xyz&lt;/code&gt;ドメインの名前解決にはCloudflareのDNSを使っている。&lt;/p&gt;

&lt;p&gt;アクセス解析などのために&lt;a href=&#34;https://analytics.google.com/&#34;&gt;&lt;strong&gt;Google Analytics&lt;/strong&gt;&lt;/a&gt;と&lt;a href=&#34;https://www.google.com/webmasters/tools/home&#34;&gt;&lt;strong&gt;Google Search Console&lt;/strong&gt;&lt;/a&gt;を使ってる。&lt;/p&gt;

&lt;p&gt;この構成で、ブログアドレスの変更に必要だった修正を列挙する。(この順にやったわけではない。)&lt;/p&gt;

&lt;h4 id=&#34;1-ブログソース修正&#34;&gt;1. ブログソース修正&lt;/h4&gt;

&lt;p&gt;Hugoの設定ファイルである&lt;code&gt;config.toml&lt;/code&gt;に書いてある&lt;code&gt;baseurl&lt;/code&gt;の値を&lt;code&gt;https://tbd.kaitoy.xyz&lt;/code&gt;から&lt;code&gt;https://www.kaitoy.xyz&lt;/code&gt;に変え、また、各記事の内部リンクのURLも&lt;code&gt;www&lt;/code&gt;のに変えた。&lt;/p&gt;

&lt;p&gt;あと&lt;code&gt;robots.txt&lt;/code&gt;の&lt;code&gt;Sitemap&lt;/code&gt;のURLも&lt;code&gt;https://www.kaitoy.xyz/sitemap.xml&lt;/code&gt;に更新した。&lt;/p&gt;

&lt;h4 id=&#34;2-github-pagesの設定変更&#34;&gt;2. GitHub Pagesの設定変更&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kaitoy/blog&#34;&gt;ブログリポジトリ&lt;/a&gt;に行って、&lt;code&gt;Settings&lt;/code&gt;の&lt;code&gt;GitHub Pages&lt;/code&gt;欄の&lt;code&gt;Custom domain&lt;/code&gt;の値を&lt;code&gt;https://www.kaitoy.xyz&lt;/code&gt;に変えた。&lt;/p&gt;

&lt;p&gt;ついでにブログリポジトリのトップに表示される&lt;code&gt;Description&lt;/code&gt;の&lt;code&gt;Website&lt;/code&gt;の値も新しいURLに変更した。&lt;/p&gt;

&lt;p&gt;この変更によりありがたい副作用もあった。
GitHub Pagesは&lt;code&gt;www&lt;/code&gt;というサブドメインを特別扱いしていて、以下の恩恵を受けられるのだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;wwwを省略したURL(apex domain)でアクセスすると、GitHub Pagesサーバがwww付きのURLに&lt;a href=&#34;https://help.github.com/articles/setting-up-an-apex-domain-and-www-subdomain/&#34;&gt;リダイレクトしてくれる&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/about-supported-custom-domains/#www-subdomains&#34;&gt;安定していて速い&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;3-cloudflareのdns設定変更&#34;&gt;3. CloudflareのDNS設定変更&lt;/h4&gt;

&lt;p&gt;CloudflareのDNSで、もともと&lt;code&gt;CNAME&lt;/code&gt;レコードで&lt;code&gt;kaitoy.github.io&lt;/code&gt;(GitHub Pagesのデフォルトのドメイン)のエイリアスを&lt;code&gt;tbd&lt;/code&gt;にしていたのを&lt;code&gt;www&lt;/code&gt;に変更した。&lt;/p&gt;

&lt;p&gt;また、上記の通りapex domainでGitHub Pagesにアクセスしても上手いことやってくれるようになったので、&lt;code&gt;www.kaitoy.xyz&lt;/code&gt;のエイリアスを&lt;code&gt;kaitoy.xyz&lt;/code&gt;とする&lt;code&gt;CNAME&lt;/code&gt;レコードを追加した。
CloudflareのDNSはapex domain(i.e. &lt;code&gt;kaitoy.xyz&lt;/code&gt;)に対する&lt;code&gt;CNAME&lt;/code&gt;レコード設定を&lt;a href=&#34;https://support.cloudflare.com/hc/en-us/articles/200169056-CNAME-Flattening-RFC-compliant-support-for-CNAME-at-the-root&#34;&gt;サポートしている&lt;/a&gt;ので、これで&lt;code&gt;www.kaitoy.xyz&lt;/code&gt;でも&lt;code&gt;kaitoy.xyz&lt;/code&gt;でもGitHub Pagesにルーティングされるようになった。&lt;/p&gt;

&lt;h4 id=&#34;4-disqusの設定変更&#34;&gt;4. Disqusの設定変更&lt;/h4&gt;

&lt;p&gt;ホームの右上の歯車アイコンから&lt;code&gt;Admin&lt;/code&gt;を開いて、ヘッダの&lt;code&gt;Settings&lt;/code&gt;からブログのURLを選んでその設定画面を開き、&lt;code&gt;Website URL&lt;/code&gt;を&lt;code&gt;https://www.kaitoy.xyz&lt;/code&gt;に変更した。&lt;/p&gt;

&lt;h4 id=&#34;5-google-analyticsの設定変更&#34;&gt;5. Google Analyticsの設定変更&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;管理&lt;/code&gt;タブの&lt;code&gt;プロパティ設定&lt;/code&gt;の&lt;code&gt;デフォルトの URL&lt;/code&gt;を&lt;code&gt;https://www.kaitoy.xyz&lt;/code&gt;に変更しただけ。&lt;/p&gt;

&lt;h1 id=&#34;googleのページランクを保つためのあれこれ&#34;&gt;Googleのページランクを保つためのあれこれ&lt;/h1&gt;

&lt;p&gt;以前もどこかに書いたが、どんなにすばらしい内容の記事を書いてもGoogle検索結果の2,3ページくらいまでに出てこないんであれば誰も読んでくれない。
このブログのいくつかの記事はそれなりにいいキーワードでいい検索順位になっていたので、サブドメイン変更によってページランクに悪影響が出るのはなるべく避けたかった。&lt;/p&gt;

&lt;p&gt;調べたら、&lt;a href=&#34;https://support.google.com/webmasters/answer/6033049?hl=ja&amp;amp;ref_topic=6033084&#34;&gt;Google Search Consoleのヘルプ&lt;/a&gt;にまさにその悪影響を防ぐ方法が載っていたので、これに従ってあれこれした。&lt;/p&gt;

&lt;h4 id=&#34;1-自身を参照する-rel-canonical-リンクタグを付ける&#34;&gt;1. 自身を参照する &lt;code&gt;rel=&amp;quot;canonical&amp;quot;&lt;/code&gt;リンクタグを付ける&lt;/h4&gt;

&lt;p&gt;ブログの全てのページのヘッダに以下の様な移転先アドレスを指すlinkタグを付け、変更後のアドレスが正式なアドレスであることをGooglebotに教えてやる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;canonical&amp;quot; href=&amp;quot;https://www.kaitoy.xyz/2015/07/18/first-post/&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hugoのソースでいうと以下の感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;canonical&amp;quot; href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-http-301リダイレクトを設定&#34;&gt;2. HTTP 301リダイレクトを設定&lt;/h4&gt;

&lt;p&gt;多分これが一番重要なんじゃなかろうか。&lt;/p&gt;

&lt;p&gt;HTTPステータスコードの&lt;a href=&#34;https://support.google.com/webmasters/answer/93633&#34;&gt;301&lt;/a&gt;はサイトのコンテンツが別のURLに恒久的に移転したことを示すもので、移転前のURLにアクセスしたクライアントに301を移転先のURLとともに返してやることで、HTTPレベルでのリダイレクトをさせることができる。&lt;/p&gt;

&lt;p&gt;GooglebotもこのステータスコードでブログURLの変更を知ることができるので、検索結果をよしなに移行してくれるはず。&lt;/p&gt;

&lt;p&gt;301を返すサーバには&lt;a href=&#34;https://www.xrea.com/&#34;&gt;XREA&lt;/a&gt;の無料サーバを使った。
このブログのドメインは&lt;a href=&#34;https://www.value-domain.com/&#34;&gt;バリュードメイン&lt;/a&gt;で買ったもので、ここがXREAと提携していたので無料サーバも合わせて確保していたもののほとんど使っていなかったので調度よかった。
調べたらこのサーバで、&lt;a href=&#34;https://httpd.apache.org/&#34;&gt;Apache HTTP Server&lt;/a&gt;の設定ファイルである&lt;code&gt;.htaccess&lt;/code&gt;が使えることが分かったので、以下の内容で作って&lt;code&gt;/public_html/&lt;/code&gt;に置いた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Files ~ &amp;quot;^\.ht&amp;quot;&amp;gt;
deny from all
&amp;lt;/Files&amp;gt;

# Redirect
Redirect permanent / https://www.kaitoy.xyz/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、サーバの管理ページからドメインウェブ設定画面に行き、Mainのドメイン名を&lt;code&gt;tbd.kaitoy.xyz&lt;/code&gt;に設定。&lt;/p&gt;

&lt;p&gt;あとはCloudflareのDNS設定で、&lt;code&gt;tbd&lt;/code&gt;を上記XREAサーバのIPアドレスに解決する&lt;code&gt;A&lt;/code&gt;レコードを追加して完了。&lt;/p&gt;

&lt;h4 id=&#34;3-google-search-consoleのアドレス変更ツール実行&#34;&gt;3. Google Search Consoleのアドレス変更ツール実行&lt;/h4&gt;

&lt;p&gt;最後の仕上げとして、Google Search Consoleの&lt;a href=&#34;https://support.google.com/webmasters/answer/83106&#34;&gt;アドレス変更ツール&lt;/a&gt;を使ってGooglebotにアドレス変更を通知した。&lt;/p&gt;

&lt;p&gt;このツールはGoogle Search Consoleの管理サイトごとのページの右上の歯車アイコンから&lt;code&gt;アドレス変更&lt;/code&gt;を選択すると開け、以下のようなものが表示される。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/change-subdomain/change_address.png&#34; alt=&#34;change_address.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;このウィザードに従って、移転先URL(プロパティ)の追加、301リダイレクトの動作確認、サイトの存在確認をして、アドレス変更のリクエストを送信するだけ。&lt;/p&gt;

&lt;p&gt;最後に、追加したプロパティの&lt;code&gt;クロール&lt;/code&gt;の&lt;code&gt;サイトマップ&lt;/code&gt;から、移転先サイトのサイトマップを送信して完了。
サイトマップはHugoがビルド時に生成してくれたやつ。&lt;/p&gt;

&lt;p&gt;今&lt;a href=&#34;https://support.google.com/webmasters/answer/6033049?hl=ja&amp;amp;ref_topic=6033084&#34;&gt;Google Search Consoleのヘルプ&lt;/a&gt;を見直したら移転前のサイトマップも送信しろと書いてあるのに気付いた。
これはやらなかったけど、やった方がよかったのかも。&lt;/p&gt;

&lt;p&gt;ともあれ、移転後一時的に検索順位が大きく落ちたものの、1,2週間位でもとにもどったので、この移転は概ね成功だったと思う。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>オープンソースプロジェクトのすゝめ</title>
          <link>https://www.kaitoy.xyz/2016/08/21/an-encouragement-of-open-sourcing/</link>
          <pubDate>Sun, 21 Aug 2016 20:54:12 -0600</pubDate>
          <author>Kaito Yamada</author>
          <guid>https://www.kaitoy.xyz/2016/08/21/an-encouragement-of-open-sourcing/</guid>
          <description>

&lt;p&gt;&lt;strong&gt;&lt;em&gt;人は生まれながらにして貴賤の別なく、ただオープンソースプロジェクトを勤めて物事をよく知る者が貴人となるなり。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;昔、偉い人がそんな感じのことを言っていたような。&lt;/p&gt;

&lt;p&gt;私がGitHubで開発しているライブラリ、&lt;strong&gt;&lt;a href=&#34;https://github.com/kaitoy/pcap4j&#34;&gt;Pcap4J&lt;/a&gt;&lt;/strong&gt; のスターの数がつい先日 &lt;strong&gt;200&lt;/strong&gt; に達したのを記念して、これまでどんな活動をしてきたか、この活動によって何を得たかなどについて書きたい。&lt;/p&gt;

&lt;p&gt;願わくは、この記事に触発されてオープンソースプロジェクトを始める人のあらんことを。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;



&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-6244473643910448&#34;
     data-ad-slot=&#34;1845600530&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/p&gt;

&lt;h2 id=&#34;pcap4jとは&#34;&gt;Pcap4Jとは？&lt;/h2&gt;

&lt;p&gt;Pcap4Jは、パケットキャプチャとパケット解析をするJavaのライブラリ。
ニッチ。&lt;/p&gt;

&lt;p&gt;ただ最近になってビッグデータ解析技術が発達し、大量のパケットをリアルタイムで解析してシステムや運用にフィードバックするというのが現実的になってきたので、パケットキャプチャへの注目が高まってきている雰囲気がある。
こういう分野ではJavaがまだかなり人気なのもあってワンチャンある。&lt;/p&gt;

&lt;p&gt;パケットキャプチャの部分は &lt;strong&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/Pcap&#34;&gt;pcap&lt;/a&gt;&lt;/strong&gt; のラッパ。
パケット解析の部分は割とプラガブルで、外からプロトコル追加などのカスタマイズができるはできるんだけど、作りのせいなのかJavaなせいなのか解析器を書くのが結構つらい。&lt;/p&gt;

&lt;p&gt;競合は &lt;strong&gt;&lt;a href=&#34;http://jpcap.sourceforge.net/&#34;&gt;jpcap&lt;/a&gt;&lt;/strong&gt; や &lt;strong&gt;&lt;a href=&#34;http://jnetpcap.com/&#34;&gt;jNetPcap&lt;/a&gt;&lt;/strong&gt; など。
Google.comで&lt;code&gt;java packet capture&lt;/code&gt;と検索するとだいたいjpcap、Pcap4J、jNetPcapの順で表示される。&lt;/p&gt;

&lt;p&gt;打倒jpcap。&lt;/p&gt;

&lt;h2 id=&#34;数字で見るpcap4jプロジェクト&#34;&gt;数字で見るPcap4Jプロジェクト&lt;/h2&gt;

&lt;p&gt;Pcap4Jリポジトリの一番古いコミットは &lt;strong&gt;2011/12/18&lt;/strong&gt;。
東日本大震災後の節電施策として実施された休日シフト中にコーディングしていた覚えがあるので、多分2011年夏くらいから開発していたんだけど、とりあえずこの最古のコミットをプロジェクトの開始とすると、スターが200になった &lt;strong&gt;2016/8/11&lt;/strong&gt; まで &lt;strong&gt;1698日&lt;/strong&gt; かかったことになる。
約 &lt;strong&gt;0.118個/日&lt;/strong&gt;。遅い…&lt;/p&gt;

&lt;p&gt;コミット数は &lt;strong&gt;559個&lt;/strong&gt;。ほとんどが自前のコミット。
プロジェクト成長過程の動画を &lt;strong&gt;&lt;a href=&#34;http://gource.io/&#34;&gt;Gource&lt;/a&gt;&lt;/strong&gt; というツールで生成してみたが、一人でかけずりまわっているのがよく分かる。&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;embed video-player&#34; style=&#34;text-align: center&#34;&gt;
  &lt;iframe class=&#34;youtube-player&#34; type=&#34;text/html&#34; width=&#34;320&#34; height=&#34;193&#34; src=&#34;https://www.youtube.com/embed/VFjNOTGbBhA&#34; allowfullscreen frameborder=&#34;0&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;コミット頻度は約 &lt;strong&gt;0.33個/日&lt;/strong&gt; で、だいたい3日に1コミット。
思っていたより多いけど、胸張れるほどの頻度ではない。&lt;/p&gt;

&lt;p&gt;リリースは &lt;strong&gt;17個&lt;/strong&gt; で、約 &lt;strong&gt;0.30個/月&lt;/strong&gt;。少ない…&lt;/p&gt;

&lt;p&gt;Issuesが &lt;strong&gt;52個&lt;/strong&gt;、Pull requestsが &lt;strong&gt;16個&lt;/strong&gt;。
自分ではIssuesもPull requestsもあまり作らないので、ほとんどが他人からのもの。
ちゃんとチケット駆動にしてトレーサビリティを確保しておくべきだったと後悔している。
けど面倒だし今更なので今後も適当にコミットしちゃう。&lt;/p&gt;

&lt;p&gt;あとはWatchが &lt;strong&gt;28人&lt;/strong&gt;、Forkが &lt;strong&gt;66個&lt;/strong&gt;、コントリビュータが &lt;strong&gt;7人&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&#34;スター200ってどうなの&#34;&gt;スター200ってどうなの?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jquery/jquery&#34;&gt;jQuery&lt;/a&gt;や&lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;React&lt;/a&gt;なんてスター40000超えてるし、Javaなら&lt;a href=&#34;http://projects.spring.io/spring-framework/&#34;&gt;Spring Framework&lt;/a&gt;も10000に達しようとしている。200なんて全然大したことなくない?
と言う声が聞こえるようだが、そんな知らない人を探すのが難しいようなプロジェクトと比べてはいけない。&lt;/p&gt;

&lt;p&gt;スター200以上のプロジェクトは割合でみるととても少ない。&lt;/p&gt;

&lt;p&gt;現在GitHubがホストしてる全プロジェクトは &lt;strong&gt;14,308,407&lt;/strong&gt; 個。
Javaプロジェクトはその内二番目に大きい割合を占めていて &lt;strong&gt;1,501,840&lt;/strong&gt; 個 (約 &lt;strong&gt;10.5%&lt;/strong&gt; )。&lt;/p&gt;

&lt;div style=&#34;max-width: 600px; margin: 0 auto; text-align: center;&#34;&gt;
&lt;caption&gt;&lt;b&gt;GitHubのプロジェクト数 (言語別降順)&lt;/b&gt;&lt;/caption&gt;
&lt;canvas id=&#34;an-encouragement-of-open-sourcing-chart-1&#34;&gt;&lt;/canvas&gt;
(凡例をクリックして除外。グラフにホバーして値表示。)
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;スター200以上のプロジェクトは &lt;strong&gt;37,031&lt;/strong&gt; 個で、全プロジェクト中、上位約 &lt;strong&gt;0.26%&lt;/strong&gt; に当たる。&lt;/p&gt;

&lt;p&gt;スター200以上のJavaプロジェクトは &lt;strong&gt;3,922&lt;/strong&gt; 個で、全Javaプロジェクト中、上位約 &lt;strong&gt;0.26%&lt;/strong&gt; に当たる。&lt;/p&gt;

&lt;div style=&#34;max-width: 600px; margin: 0 auto; text-align: center;&#34;&gt;
&lt;caption&gt;&lt;b&gt;GitHubのプロジェクト数 (スター数別降順)&lt;/b&gt;&lt;/caption&gt;
&lt;canvas id=&#34;an-encouragement-of-open-sourcing-chart-2&#34;&gt;&lt;/canvas&gt;
(凡例をクリックして除外。グラフにホバーして値表示。)
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;div style=&#34;max-width: 600px; margin: 0 auto; text-align: center;&#34;&gt;
&lt;caption&gt;&lt;b&gt;GitHubのJavaプロジェクト数 (スター数別降順)&lt;/b&gt;&lt;/caption&gt;
&lt;canvas id=&#34;an-encouragement-of-open-sourcing-chart-3&#34;&gt;&lt;/canvas&gt;
(凡例をクリックして除外。グラフにホバーして値表示。)
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;無名の個人にとっては、スター200、というかとりあえず100くらいは手ごろで手ごたえのある目標だ。&lt;/p&gt;

&lt;h2 id=&#34;オープンソースプロジェクトの育て方&#34;&gt;オープンソースプロジェクトの育て方&lt;/h2&gt;

&lt;p&gt;GitHubのスターの数というのはそのプロジェクトを気に入ってくれた人の数である。
この数はそのプロジェクトの成果物を実際に使ってくれている人や組織の数、つまり普及率と正の相関があるはずだ。
成果物の普及率はプロジェクトの成長度のひとつの指標であり、スターの増加を見るのはわが子のようなプロジェクトの成長を見るようでとても楽しい。&lt;/p&gt;

&lt;p&gt;ここでは、私がPcap4Jプロジェクトを育てるためにやったことと、やってないけどやるべきだと思っていることなどについて書く。
Pcap4Jはライブラリなので、アプリとかよりもライブラリよりの話が多めかも。&lt;/p&gt;

&lt;h4 id=&#34;未解決の問題を探す&#34;&gt;未解決の問題を探す&lt;/h4&gt;

&lt;p&gt;Pcap4Jプロジェクトを始める前は、競合を調べ、それらとの差別化を考えた。
他のプロジェクトが既に解決している問題を同じように解決したのでは魅力が出ない。
機能なり、性能なり、ユーザビリティなり、デザインなり、サポートプラットフォームなり、何かしらの点で競合より優れていたり、競合にないものを持っていることが重要。
そうでなければ作っていても面白くないし、モチベーションも続かない。&lt;/p&gt;

&lt;p&gt;まだ解決されていない問題を見つけたり、使っているアプリに不満を感じたら、新しいアプリやライブラリやプラグインを自分で作るチャンスととらえるべし。&lt;/p&gt;

&lt;h4 id=&#34;apiを練る&#34;&gt;APIを練る&lt;/h4&gt;

&lt;p&gt;Pcap4Jの開発を始めて、一番頭を使ったのがAPI設計。
分かりやすく、汎用的で、シンプルで、つまり使いやすいAPIを実装すべきことは言うまでもない。
APIがころころ変わるのはユーザにとても嫌がられるので、長い目で見ても問題なさそうな、拡張もしやすそうなAPIを設計すべし。
自分でそのライブラリを使ったアプリを作ってみると、ユーザ視点でAPIを評価できるのでよい。&lt;/p&gt;

&lt;p&gt;逆に、内部の設計はAPIに比べたらそんなに重要じゃない。
10年前の技術を使ったイモい実装でもいい。
とりあえずリリースして、&lt;a href=&#34;http://qiita.com/erukiti/items/9cc7850250268582dde7&#34;&gt;技術的負債&lt;/a&gt;として後で済し崩せばよし。&lt;/p&gt;

&lt;h4 id=&#34;githubに上げる&#34;&gt;GitHubに上げる&lt;/h4&gt;

&lt;p&gt;ある程度コードが書けたらどこかに公開するわけだけど、パブリックなリポジトリなら &lt;strong&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;&lt;/strong&gt; 一択。&lt;/p&gt;

&lt;p&gt;今の時代、猫も杓子も&lt;a href=&#34;https://github.com/google&#34;&gt;Google&lt;/a&gt;も&lt;a href=&#34;https://github.com/Microsoft&#34;&gt;Microsoft&lt;/a&gt;も&lt;a href=&#34;https://github.com/apple&#34;&gt;Apple&lt;/a&gt;も、ソースを公開すると言ったらGitHubだ。
迷うことはない。&lt;/p&gt;

&lt;p&gt;(弊社も最近&lt;a href=&#34;https://github.com/Hitachi&#34;&gt;組織アカウント&lt;/a&gt;を作ったようだ。知らなかった。)&lt;/p&gt;

&lt;h4 id=&#34;ドキュメントを充実させる-英語で&#34;&gt;ドキュメントを充実させる (英語で)&lt;/h4&gt;

&lt;p&gt;Pcap4JのREADME.mdやドキュメントは、大変だったけど最初から英語と日本語で書いた。
英語がメイン。&lt;/p&gt;

&lt;p&gt;英語は世界でもっとも多く使われている言語で、8.5億人が日常的に話す。実用レベルの英語を話せる人はもっと多く、17.5億人。英語を読んで理解できるというレベルならもっといるかもしれない。
一方、日本語を理解できる人は1.5億人もいない。しかもそのほとんどは極東のごく限られた地域に住む保守的な民族だ。
さらに、ソフトウェア技術の中心は英語の国アメリカにある。日本はどちらかといえばソフトウェア後進国と言わざるを得ない。
せっかくオープンソースプロジェクトに挑戦するなら、それが日本に特化したものでなければ、英語で公開してより多くの先進的な人たちに繋がり、使ってもらい、揉まれるのがやりがいがあり楽しい。&lt;/p&gt;

&lt;p&gt;ドキュメントの内容にも割と力をいれた。&lt;/p&gt;

&lt;p&gt;ドキュメントは理想的には、機能やサポートプラットフォームやインストール方法などを説明するドキュメントと、体系的で網羅的なAPIリファレンスに加え、簡易アプリケーションを書くようなチュートリアルやユースケースベースの解説があるといいと思う。&lt;/p&gt;

&lt;p&gt;因みにここでドキュメントと言っているのはユーザ向けのもの。
コントリビュータ等に向けて内部設計書みたいなものを書くと親切かと思うかもしれないが、全く必要ない。
世界的には&lt;a href=&#34;http://simplearchitect.hatenablog.com/entry/2016/06/20/080807&#34;&gt;ウォータフォールはほぼ完全にその役目を終え&lt;/a&gt;、&lt;a href=&#34;http://www.agilemanifesto.org/iso/ja/&#34;&gt;アジャイル&lt;/a&gt;な開発が当たり前になっている。
こうした開発プロセスでは体系立った設計書など書かない。知りたいことがあればソースを見ればよいというスタンス。
設計書が無くても誰も文句を言わないので安心してさぼるべし。&lt;/p&gt;

&lt;p&gt;因みに因みにプラグインの開発者はユーザの括りなので、それ向けのドキュメントはちゃんと書くべし。&lt;/p&gt;

&lt;p&gt;APIリファレンスはJavaならJavadocでもいい。
Pcap4JのJavadocは &lt;strong&gt;&lt;a href=&#34;http://qiita.com/alucky0707/items/72b578fc9f894a4169c2&#34;&gt;javadoc.io&lt;/a&gt;&lt;/strong&gt; で公開している。
このサービス最高に手軽でありがたいので、なくならないようにもっと広まってほしい。&lt;/p&gt;

&lt;h4 id=&#34;メアドを晒す&#34;&gt;メアドを晒す&lt;/h4&gt;

&lt;p&gt;README.mdには開発者へのコンタクトとしてメアドを晒すべし。&lt;/p&gt;

&lt;p&gt;質問やエンハンス依頼などをしたいがGitHub Issuesに登録するのはちょっと気が引ける、というシャイな人は海外にも意外と結構いて、Pcap4Jの場合、Issuesの5,6倍くらいのメールが来る。
また、仕事がからんでいる人はメールでコンタクトしてくる場合が多いようだ。&lt;/p&gt;

&lt;p&gt;こういう人たちの心をがっちり掴むために、メアドを晒し、素早く丁寧に、できればクールにフレンドリーに対応すべし。
アメリカ人なんかは特にこうした対応の質を重視する。
(逆に言えばバグを出してもしっかりサポートすれば万事OKみたいな雰囲気があってしまうんだけど。)&lt;/p&gt;

&lt;h4 id=&#34;パッケージマネジメントシステムを利用する&#34;&gt;パッケージマネジメントシステムを利用する&lt;/h4&gt;

&lt;p&gt;ライブラリの配布は、言語ごとに普及しているパッケージマネジメントシステムに &lt;strong&gt;必ず&lt;/strong&gt; 乗っかるべし。&lt;/p&gt;

&lt;p&gt;使いたいライブラリがオレオレ配布されていたときの絶望感ったらない。
他のライブラリと統一的に扱えないし、バージョンや依存性の解決も手動でやらなければいけない。
そんな絶望を撒き散らす魔女に自分がなってはいけない。&lt;/p&gt;

&lt;p&gt;Javascriptなら &lt;strong&gt;&lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt;&lt;/strong&gt; や &lt;strong&gt;&lt;a href=&#34;https://bower.io/&#34;&gt;Bower&lt;/a&gt;&lt;/strong&gt;、Rubyなら &lt;strong&gt;&lt;a href=&#34;https://rubygems.org/&#34;&gt;RubyGems&lt;/a&gt;&lt;/strong&gt;、Pythonなら &lt;strong&gt;&lt;a href=&#34;https://pypi.python.org/pypi&#34;&gt;PyPI&lt;/a&gt;&lt;/strong&gt;(?)。&lt;/p&gt;

&lt;p&gt;Pcap4JはJavaなので &lt;strong&gt;&lt;a href=&#34;https://mvnrepository.com/&#34;&gt;Mavenリポジトリ&lt;/a&gt;&lt;/strong&gt;。当初から &lt;strong&gt;&lt;a href=&#34;http://search.maven.org/&#34;&gt;Maven Central Repository&lt;/a&gt;&lt;/strong&gt; に上げているけど、今なら &lt;strong&gt;&lt;a href=&#34;https://bintray.com/bintray/jcenter&#34;&gt;JCenter&lt;/a&gt;&lt;/strong&gt; の方が手軽でよさそう。
(けどjavadoc.io使うならやっぱりMaven Central Repositoryか。)&lt;/p&gt;

&lt;p&gt;敷居が高そうに見えるが、やってみると意外と簡単なので恐れることはない。&lt;/p&gt;

&lt;h4 id=&#34;ロゴを作る&#34;&gt;ロゴを作る&lt;/h4&gt;

&lt;p&gt;ロゴを作るのを勧めたい。&lt;/p&gt;

&lt;p&gt;パワポでシステム構成を説明するダイアグラムを書いているときに、ロゴがないコンポーネントを見つけた時の絶望感ったらない。
ニートなロゴを作って、希望を振りまく魔法少女たろう。&lt;/p&gt;

&lt;p&gt;プロジェクト名を&lt;a href=&#34;http://photoshopvip.net/77655&#34;&gt;おしゃれなフリーフォント&lt;/a&gt;で書いて、ちょっと&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%AB%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0&#34;&gt;カーニング&lt;/a&gt;しただけの&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%AD%E3%82%B4%E3%82%BF%E3%82%A4%E3%83%97&#34;&gt;ロゴタイプ&lt;/a&gt;でもいい。
自分で作ったものがださくてかっこ悪いんじゃないかと不安になったら、&lt;a href=&#34;https://runc.io/&#34;&gt;runC&lt;/a&gt;のロゴマークを見ると心が休まるかもしれない。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;runc.png&#34; src=&#34;https://www.kaitoy.xyz/images/runc.png&#34; style=&#34;margin: 0px auto; display: block; width: 50%; min-width: 200px;&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kaitoy/pcap4j/blob/v1/www/logos.md&#34;&gt;Pcap4Jのロゴ&lt;/a&gt;は、PのついたキャップをJavaカラーでというアイデアをもとに嫁に描いてもらった。端っこがちょっとジャギジャギしてるのと、ファビコンにするとつぶれてしまうところをいつか何とかしたい。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;pcap4jlogo.png&#34; src=&#34;https://www.kaitoy.xyz/images/pcap4jlogo.png&#34; style=&#34;margin: 0px auto; display: block; width: 50%; min-width: 200px;&#34;&gt;&lt;/p&gt;

&lt;h4 id=&#34;ホームページを作る&#34;&gt;ホームページを作る&lt;/h4&gt;

&lt;p&gt;プロジェクトのホームページを作るのはいいアイデアだ。
箔がつくし、少なくとも作っている自分が楽しい。&lt;/p&gt;

&lt;p&gt;GitHubのプロジェクトページをホームページと言ってもいいが、せっかく &lt;strong&gt;&lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;&lt;/strong&gt; が使えるのでトライすべし。(2016/12/16 追記: GitHub PagesにJekyll Theme Chooserという機能が追加され、&lt;a href=&#34;http://qiita.com/kaitoy/items/509ccefb1b31d80ba3f1&#34;&gt;非常に簡単にホームページを作れるようにもなった。&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;最近はシングルページのシンプルなホームページが流行りなので、内容は薄くても構わない。
&lt;a href=&#34;http://gulpjs.com/&#34;&gt;Gulpのホームページ&lt;/a&gt;を見て勇気づけられよう。
&lt;a href=&#34;https://webpack.github.io/&#34;&gt;webpack&lt;/a&gt;もなかなかの手抜きだ。&lt;/p&gt;

&lt;p&gt;ドキュメントには載せにくいカジュアルなPR文句とか、簡単な導入方法とかチュートリアルとかをホームページに書くのがいいかもしれない。
あとはロゴを貼ってGitHubへのリンクを張っておけば充分。
もちろん英語で。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.pcap4j.org/&#34;&gt;Pcap4Jのホームページ&lt;/a&gt;は &lt;strong&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;&lt;/strong&gt; を使って十数時間くらいでできた。
慣れている人ならもっと速くできるだろう。
この際ドメインを取ってしまうのもいい。箔のため。
&lt;code&gt;pcap4j.org&lt;/code&gt;は&lt;a href=&#34;https://www.value-domain.com/&#34;&gt;バリュードメイン&lt;/a&gt;で買ったけど、別にどこでもいい。
費用は業者やドメインによって異なるけど、&lt;code&gt;pcap4j.org&lt;/code&gt;の場合は年1598円。リーズナブル。&lt;/p&gt;

&lt;h4 id=&#34;stack-overflowで盛り上げる&#34;&gt;Stack Overflowで盛り上げる&lt;/h4&gt;

&lt;p&gt;プロジェクトの成熟度を &lt;strong&gt;&lt;a href=&#34;http://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt;&lt;/strong&gt; の関連投稿数で図る人が一定数いる。&lt;/p&gt;

&lt;p&gt;Stack Overflowはプログラミング技術に関する世界で最も人気なフォーラムサイトだ。
Stack Overflowの投稿数が多ければそれだけコアなユーザや情報が多いということだし、困ったときにそこで質問すれば適切な回答が得られる見込みが高いということ。
ユーザコミュニティが育っているとも言え、そのライブラリを採用する根拠の一つになる。&lt;/p&gt;

&lt;p&gt;Stack Overflowに投稿される質問をチェックし、自分のライブラリなりツールで解決できる問題があったら回答してアピールすることで認知度が高まるだろう。
自分のプロジェクトに対する質問があれば、もちろん積極的に回答すべきだ。特に黎明期は。&lt;/p&gt;

&lt;p&gt;私もStack Overflowで一度だけPcap4JのPRをやったが、めんど^h^h^h時間がとれなくて続かなかった。
反応はよかったのでちょっと後悔。
自分のプロジェクトに関する質問をモニタリングする効率的な方法はないものか…&lt;/p&gt;

&lt;h4 id=&#34;コミットをし続ける&#34;&gt;コミットをし続ける&lt;/h4&gt;

&lt;p&gt;コミットはなるべく頻繁に。&lt;/p&gt;

&lt;p&gt;修正量は多くなくてもいいので、間をあけないことが重要。
今もメンテされているか、活発に開発されているかは、そのライブラリを使うかどうかの大きな判断基準の一つだ。&lt;/p&gt;

&lt;p&gt;同様にIssuesやPull requestsに迅速に対応することも重要で、できたらいいんだけど、ちょっと大変。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://issuestats.com/&#34;&gt;Issue Stats&lt;/a&gt;&lt;/strong&gt; という、IssuesやPull requestsへの対応速度などを解析してくれるサービスがある。
対応速度に自信があるならここのバッジを貼るのもいいかもしれない。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;stats.png&#34; src=&#34;https://www.kaitoy.xyz/images/an-encouragement-of-open-sourcing/stats.png&#34; style=&#34;margin: 0px auto; display: block; width: 50%; min-width: 200px;&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Pcap4Jのこの数字は怖くて見れない。&lt;/p&gt;

&lt;h4 id=&#34;継続的インテグレーションを実装する&#34;&gt;継続的インテグレーションを実装する&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E7%B6%99%E7%B6%9A%E7%9A%84%E3%82%A4%E3%83%B3%E3%83%86%E3%82%B0%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3&#34;&gt;継続的インテグレーション(CI)&lt;/a&gt;を実装すると、品質にまじめに取り組んでる風が出て、ライブラリへの信頼が高まる。&lt;/p&gt;

&lt;p&gt;利用するサービスは &lt;strong&gt;&lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt;&lt;/strong&gt; でも &lt;strong&gt;&lt;a href=&#34;https://circleci.com/&#34;&gt;CircleCI&lt;/a&gt;&lt;/strong&gt; でも &lt;strong&gt;&lt;a href=&#34;http://www.appveyor.com/&#34;&gt;Appveyor&lt;/a&gt;&lt;/strong&gt; でも &lt;strong&gt;&lt;a href=&#34;https://codeship.com/&#34;&gt;Codeship&lt;/a&gt;&lt;/strong&gt; でも &lt;strong&gt;&lt;a href=&#34;https://drone.io/&#34;&gt;Drone&lt;/a&gt;&lt;/strong&gt; でもなんでもいい。
どれも無料で利用でき、GitHubと連携してコミットのプッシュでビルド/テストをキックできる。
なんなら&lt;a href=&#34;https://aws.amazon.com/jp/&#34;&gt;AWS&lt;/a&gt;や&lt;a href=&#34;https://cloud.google.com/&#34;&gt;GCP&lt;/a&gt;や&lt;a href=&#34;https://www.heroku.com/&#34;&gt;Heroku&lt;/a&gt;なんかへのデプロイまで自動化して&lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_delivery&#34;&gt;継続的デリバリ-(CD)&lt;/a&gt;を実現することもできる。&lt;/p&gt;

&lt;p&gt;CIを実装したらREADME.mdにバッジを貼るのを忘れずに。
とてもオフィシャル感が出る。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;badges.png&#34; src=&#34;https://www.kaitoy.xyz/images/an-encouragement-of-open-sourcing/badges.png&#34; style=&#34;margin: 0px auto; display: block; width: 50%; min-width: 200px;&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Pcap4JはLinux(Ubuntu)でのテストをTravis CIで、WindowsでのテストをAppveyorでやっていて、Travis CIでのテスト中に &lt;strong&gt;&lt;a href=&#34;http://cobertura.github.io/cobertura/&#34;&gt;Cobertura&lt;/a&gt;&lt;/strong&gt; でコードカバレージを測って &lt;strong&gt;&lt;a href=&#34;https://coveralls.io/github/kaitoy/pcap4j&#34;&gt;Coveralls&lt;/a&gt;&lt;/strong&gt; にアップし、Appveyorでのビルド結果をMaven Central Repositoryにアップしている。&lt;/p&gt;

&lt;p&gt;今からJavaのコードカバレージを測るなら、Coberturaよりも活発に開発されている &lt;strong&gt;&lt;a href=&#34;http://www.eclemma.org/jacoco/&#34;&gt;Jacoco&lt;/a&gt;&lt;/strong&gt; を使うべき。
コードカバレージの管理も、Coverallsより &lt;strong&gt;&lt;a href=&#34;https://codecov.io/&#34;&gt;Codecov&lt;/a&gt;&lt;/strong&gt; の方が&lt;a href=&#34;https://www.slant.co/versus/7928/7929/~coveralls_vs_codecov&#34;&gt;多機能でサポートもいい&lt;/a&gt;らしい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E9%9D%99%E7%9A%84%E3%82%B3%E3%83%BC%E3%83%89%E8%A7%A3%E6%9E%90&#34;&gt;静的コード解析&lt;/a&gt;もCIの一部で、絶対やるべきなんだけど、Pcap4Jではまだやってない。
いつの日か。
Javaだと何を使うといいんだろう。&lt;/p&gt;

&lt;h2 id=&#34;オープンソースプロジェクトをやっていてよかったこと&#34;&gt;オープンソースプロジェクトをやっていてよかったこと&lt;/h2&gt;

&lt;p&gt;Pcap4Jを5年近く続けたことで、単純に楽しい以上によかったことがあったのでそれについて書く。&lt;/p&gt;

&lt;h4 id=&#34;グローバルな気分になった&#34;&gt;グローバルな気分になった&lt;/h4&gt;

&lt;p&gt;Pcap4Jにスターを付けてくれた人は5大陸31ヶ国にわたり、世界中に向けて公開されている実感がある。
プログラミングに国境はなく、日本も西洋諸国も同じ天地の間にあって、同じ日輪に照らされ、同じ月を眺め、海をともにし、空気をともにしているんだと、なんとなくグローバルな気分になれた。&lt;/p&gt;

&lt;div style=&#34;text-align: center;&#34;&gt;
&lt;iframe width=&#34;480&#34; height=&#34;440&#34; src=&#34;https://statpedia.com/embed/HJUP7kHq&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;br&gt;
(所在不明者のスターはグリーンランドに置いた。)
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;少子高齢化で日本のマーケットは縮小していく一方だし、景気回復もまだまだ遠そうだし、グローバルに事業を展開しないとジリ貧だ、というのは10年以上前から言われている。
グローバルにやるっていうのはつまり、日本市場を特別視するんじゃなくて、プロダクトやサービスを世界で最適な市場に投入するってことなんだと思う。
日本市場→世界進出じゃなくて、世界展開→日本向けローカライズという順。
ソフトウェアやWebサービスにとって、ここでの世界とは具体的に言えば英語圏で、もっとはっきり言えばアメリカ。
&lt;a href=&#34;https://ja.wikipedia.org/wiki/PlayStation_4&#34;&gt;PS4&lt;/a&gt;はそういうやりかただったし、&lt;a href=&#34;https://ja.wikipedia.org/wiki/Pokemon_GO&#34;&gt;Pokemon GO&lt;/a&gt;は、…ちょっと違うか。&lt;/p&gt;

&lt;p&gt;かつて日本のSNS市場を開拓し席巻した&lt;a href=&#34;https://ja.wikipedia.org/wiki/Mixi&#34;&gt;Mixi&lt;/a&gt;は、世界のSNS市場で天下を取った&lt;a href=&#34;https://ja.wikipedia.org/wiki/Facebook&#34;&gt;Facebook&lt;/a&gt;よりちょっとだけ早くサービスを開始していた。もしMixiが最初からアメリカ向けに公開されていたらどうなっていただろうと、ちょっと残念に思うときがある。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;と、こんなにもグローバルな気分、オープンソースプロジェクト無しにはなれなかったであろう。&lt;/p&gt;

&lt;p&gt;真面目な話、スペインのスタートアップに誘われたり、アメリカの国立研究所から質問が来たり、ドイツのJDの卒論をサポートしたり、ウクライナの教育機関から謝辞をもらったりと、貴重なエキサイティングな体験ができ、自分の世界が広がったのは確か。&lt;/p&gt;

&lt;h4 id=&#34;いろいろなことに取り組むモチベーションが出た&#34;&gt;いろいろなことに取り組むモチベーションが出た&lt;/h4&gt;

&lt;p&gt;Pcap4Jプロジェクトに絡めて、CIとか、&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_JVM_languages&#34;&gt;JVM言語&lt;/a&gt;とか、&lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;とか、いろいろなことに取り組むことができた。&lt;/p&gt;

&lt;p&gt;技術とは、ただむずかしき字を知り、解し難きドキュメントを読み、世上に実のなき文学を言うにあらず。
手を動かし、Hello Worldレベルを超えたところにこそ学びがある。
とはいえ、こうした学びの作業は多くのひとにとって楽しくも大変なことなので、続けるにはちょっと工夫して動機付けしてやるのがいい。&lt;/p&gt;

&lt;p&gt;私も基本的に腰が重いタイプだが、Pcap4Jプロジェクトがいい動機付けになった。
特に、プロジェクトの改善として結果が表れ残るものは、学びのやりがいがあり高いモチベーションを保てた。&lt;/p&gt;

&lt;h4 id=&#34;ユーザから色々教えてもらえた&#34;&gt;ユーザから色々教えてもらえた&lt;/h4&gt;

&lt;p&gt;凡人一人ででなんて大したことは学べない。
Pcap4Jのユーザから、要望や指摘やIssuesやPull requestsを通して、色々なことを教えてもらった。
見つけにくい環境依存のバグ、プロジェクト構造のアドバイス、知らなかったプロトコル、思いもしなかったPcap4Jのユースケース、それを実現するためのAPI。&lt;/p&gt;

&lt;p&gt;ユーザの声を聴き、フィードバックを取り入れていくことで、ソフトウェアは真に有用なものになる。
ついでに知識も知見も知恵も深まる。
これがOSSの醍醐味であろう。&lt;/p&gt;

&lt;p&gt;理想的には、&lt;a href=&#34;https://www.oreilly.co.jp/books/9784873116303/&#34;&gt;Team Geek&lt;/a&gt;にも書かれている通り、未完成の内からソースを公開し、可能な限り早い段階でユーザのフィードバックを受けるべきだ。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;いつも1人でやっていると、失敗のリスクが高くなる。そして、成長の可能性が低くなる。&lt;/p&gt;

&lt;p&gt;(中略)&lt;/p&gt;

&lt;p&gt;つまり、1人で仕事をするほうがリスクが高いということだ。誰かと一緒に仕事をすると、アイデアを盗まれたりバカにされたりしないかと不安になるかもしれないが、間違ったことをして時間をムダにすることを不安に思うべきだ。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;まあ、無名の個人が未完成のソフトを公開してフィードバックをもらえるかという疑問もあるが。&lt;/p&gt;

&lt;h4 id=&#34;小金を得た&#34;&gt;小金を得た&lt;/h4&gt;

&lt;p&gt;プロジェクトに興味を持ってくれる人が増えれば、中にはお金を払ってくれる人も出てくる。
それは寄付であったり、作業の見返りだったりする。&lt;/p&gt;

&lt;p&gt;私はPcap4J開発を通して、ちょっとした幾許かの小金を多少得ることができた。
普通オープンソースプロジェクトは直接的にお金を稼ぐ目的でやるものではないし、私もただ自分の楽しみのためにやっていただけだが、もらえるならもらえるに越したことはない。
ありがたや。&lt;/p&gt;

&lt;p&gt;これを目当てにすべきではないが、たなぼたな展開もあるよということで。&lt;/p&gt;

&lt;h2 id=&#34;終わりに&#34;&gt;終わりに&lt;/h2&gt;

&lt;p&gt;オープンソースプロジェクトに依っては、前節で書いたような開発者自身が得るもののほかに、その活動の成果を享受し、活用してさらなる価値を生み出す多くの他人がいる(かもしれない)ことも忘れてはいけない。&lt;/p&gt;

&lt;p&gt;およそ何人にてもいささか身に技術あればこれによりて世の益をなさんと欲するは人情の常なり。
ソフトウェア技術の発展にわずかでも貢献ができたかもしれないと思えば、開発の励みになるものだ。&lt;/p&gt;

&lt;p&gt;ひとつのオープンソースプロジェクトを生み出すのは、無限の未来を生み出すこと。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;願わくは、この記事に触発されてオープンソースプロジェクトを始める人のあらんことを。&lt;/p&gt;

&lt;div style=&#34;display: none;&#34;&gt;
アジア:
  日本: 15
  中国: 55
  台湾: 1
  韓国: 4
  シンガポール: 2
  マレーシア: 1
  インド: 1
ヨーロッパ:
  ドイツ: 6
  フランス: 2
  イギリス: 7
  オランダ: 3
  スペイン: 2
  スイス: 2
  ベルギー: 2
  ギリシャ: 1
  ポーランド: 3
  エストニア: 1
  スウェーデン: 2
  ウクライナ: 1
  ハンガリー: 1
  モンテネグロ: 1
北米:
  アメリカ: 25
  カナダ: 2
南米:
  ブラジル: 4
  ウルグアイ: 1
  セントルシア: 1
中東:
  アラブ首長国連邦: 1
アフリカ:
  ナイジェリア: 1
  モロッコ: 1
オセアニア:
  オーストラリア: 2
その他:
  ロシア: 7
不明: 42
&lt;/div&gt;
</description>
        </item>
      
    
      
        <item>
          <title>GitHub Pagesの新機能、ソース設定が地味にいい</title>
          <link>https://www.kaitoy.xyz/2016/08/18/simpler-github-pages-publishing/</link>
          <pubDate>Thu, 18 Aug 2016 00:26:06 -0600</pubDate>
          <author>Kaito Yamada</author>
          <guid>https://www.kaitoy.xyz/2016/08/18/simpler-github-pages-publishing/</guid>
          <description>

&lt;p&gt;今日、&lt;a href=&#34;https://github.com/blog/2228-simpler-github-pages-publishing&#34;&gt;よりシンプルにGitHub Pagesを使えるようになった&lt;/a&gt;というアナウンスがあり、ソース設定という新機能が追加されていたので、さっそく試してみた話。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;



&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-6244473643910448&#34;
     data-ad-slot=&#34;1845600530&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/p&gt;

&lt;h2 id=&#34;github-pagesの新機能-ソース設定&#34;&gt;GitHub Pagesの新機能: ソース設定&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;には&lt;a href=&#34;https://help.github.com/articles/user-organization-and-project-pages/&#34;&gt;User Pages、Organization Pages、Project Pages&lt;/a&gt;の三種類があるが、ソース設定が使えるのはProject Pages、つまりGitHubリポジトリごとに使えて&lt;code&gt;username.github.io/projectname&lt;/code&gt;のようなURLのやつだけ。&lt;/p&gt;

&lt;p&gt;今まではProject Pagesで公開するサイトのソースは&lt;code&gt;gh-pages&lt;/code&gt;という名のブランチに置く必要があったが、ソース設定により&lt;code&gt;master&lt;/code&gt;ブランチのルートに置いたり&lt;code&gt;master&lt;/code&gt;ブランチの&lt;code&gt;/docs&lt;/code&gt;フォルダに置いたりもできるようになった。&lt;/p&gt;

&lt;h2 id=&#34;ソース設定の使い道&#34;&gt;ソース設定の使い道&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.pcap4j.org/&#34;&gt;Pcap4Jのホームページ&lt;/a&gt;のソースを&lt;code&gt;master&lt;/code&gt;ブランチの&lt;code&gt;/docs&lt;/code&gt;フォルダに置く設定にしたら捗った。&lt;/p&gt;

&lt;p&gt;Pcap4Jのホームページは&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;で作っていて、以前は、Hugoのソースを&lt;a href=&#34;https://github.com/kaitoy/pcap4j-hp&#34;&gt;pcap4j-hpリポジトリのmasterブランチ&lt;/a&gt;に置き、&lt;code&gt;gh-pages&lt;/code&gt;ブランチを作ってそこにHugoのビルド成果物(=ホームページのソース)を入れていた。&lt;/p&gt;

&lt;p&gt;ローカルPCでは、&lt;code&gt;master&lt;/code&gt;をcloneして、そこから&lt;code&gt;git worktree&lt;/code&gt;で&lt;code&gt;gh-pages&lt;/code&gt;を別のフォルダにチェックアウトしておいてあり、Hugoのビルドオプションで&lt;code&gt;gh-pages&lt;/code&gt;のフォルダにビルド成果物を出力するようにしていた。
これだと、ホームページを修正したい場合、まず&lt;code&gt;master&lt;/code&gt;でHugoソースを修正して&lt;code&gt;git add/commit/push&lt;/code&gt;、次いでビルドして&lt;code&gt;gh-pages&lt;/code&gt;フォルダに移動して&lt;code&gt;git add/commit/push&lt;/code&gt;、というように、二度手間で面倒だった。&lt;/p&gt;

&lt;p&gt;Hugoのビルド成果物を&lt;code&gt;master&lt;/code&gt;ブランチの&lt;code&gt;/docs&lt;/code&gt;フォルダに置けるようにできれば、&lt;code&gt;git add/commit/push&lt;/code&gt;はビルド後に&lt;code&gt;master&lt;/code&gt;に対して一回だけやれば済むようになる。&lt;/p&gt;

&lt;h2 id=&#34;gh-pagesからmasterブランチの-docsフォルダへの移行&#34;&gt;gh-pagesからmasterブランチの/docsフォルダへの移行&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/&#34;&gt;GitHubのヘルプ&lt;/a&gt;を参考にしつつ、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ローカルPCで、&lt;code&gt;master&lt;/code&gt;の作業ディレクトリのルートに&lt;code&gt;docs&lt;/code&gt;というフォルダを作り、&lt;code&gt;gh-pages&lt;/code&gt;のフォルダの中身を全てそこに移動。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;master&lt;/code&gt;の&lt;code&gt;docs&lt;/code&gt;を&lt;code&gt;git add/commit/push&lt;/code&gt;。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;GitHubのpcap4j-hpリポジトリのページに行き、SettingsタブのGitHub PagesセクションのSourceを&lt;code&gt;gh-pages branch&lt;/code&gt;から&lt;code&gt;master branch /docs folder&lt;/code&gt;に変えてSaveボタンをクリック。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/simpler-github-pages-publishing/gh-pages-to-docs.png&#34; alt=&#34;gh-pages-to-docs.png&#34; title=&#34;gh-pages-to-docs.png&#34; /&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;実にこれだけ。
カスタムドメインにしていてもこれだけ。簡単。ダウンタイムもなし。&lt;/p&gt;

&lt;p&gt;あとはローカルPCの&lt;code&gt;gh-pages&lt;/code&gt;の作業ディレクトリを削除したり、&lt;code&gt;gh-pages&lt;/code&gt;ブランチを削除したり。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>GitHub Pagesでブログ立ち上げ - Hugoを使う</title>
          <link>https://www.kaitoy.xyz/2015/08/28/using-hugo/</link>
          <pubDate>Fri, 28 Aug 2015 23:36:21 -0600</pubDate>
          <author>Kaito Yamada</author>
          <guid>https://www.kaitoy.xyz/2015/08/28/using-hugo/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://www.kaitoy.xyz/2015/08/25/tools-for-jekyll/&#34;&gt;&lt;strong&gt;GitHub Pagesでブログ立ち上げ - Jekyllのためのツール&lt;/strong&gt;&lt;/a&gt;の続き。
前回は、&lt;a href=&#34;https://pages.github.com/&#34;&gt;&lt;strong&gt;GitHub Pages&lt;/strong&gt;&lt;/a&gt;で公開するブログサイトを構築するのに、&lt;a href=&#34;http://jekyllrb.com/docs/home/&#34;&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;&lt;/a&gt;とJekyll関連ツールを使おうと四苦八苦したが、結局Jekyllに見切りをつけ、&lt;a href=&#34;https://gohugo.io/&#34;&gt;&lt;strong&gt;Hugo&lt;/strong&gt;&lt;/a&gt;を使うことに決めた。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;



&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-6244473643910448&#34;
     data-ad-slot=&#34;1845600530&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/p&gt;

&lt;h2 id=&#34;hugoとは&#34;&gt;Hugoとは&lt;/h2&gt;

&lt;p&gt;Hugoは、国内では2014年末くらいから盛り上がってきているブログサイト構築ツール。
そのホームページによると、ウェブサイトフレームワークで、静的サイトジェネレータとのこと。&lt;/p&gt;

&lt;p&gt;フレームワークと名乗ってはいるが、その正体は、&lt;a href=&#34;https://ja.wikipedia.org/wiki/Markdown&#34;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/a&gt;で書かれた記事を元にブログサイトのソースを生成するコンテントビルド機能と、記事作成(など)を支援するユーティリティ機能を持ったコマンドラインツール。&lt;/p&gt;

&lt;p&gt;また、静的サイトジェネレータというのは、静的なサイトを生成するという意味ではなく、静的にサイトを生成するという意味。もっと言えば、WordPressとかがアクセス時にビルドが走るのに対し、Hugoを使った場合は事前にビルド済みのものをサーバにアップロードすることになる、ということ。らしい。WordPressは使ったことがないのでよく知らないが、Hugoのホームページにそう書いてある。
つまり、Hugoは静的なサイトだけを扱うツールってわけではないので、JavaScriptとかを駆使して動的でインタラクティブなページを作ってもいいはず。&lt;/p&gt;

&lt;h2 id=&#34;hugoのインストール&#34;&gt;Hugoのインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/overview/installing/&#34;&gt;インストールガイド&lt;/a&gt;に従ってHugoをインストールする。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;HugoのGitHub Releases&lt;/a&gt;からWindows用バイナリをダウンロード。このときはバージョン0.14が最新だったので、&lt;strong&gt;hugo_0.14_windows_amd64.zip&lt;/strong&gt;をダウンロードした。&lt;/p&gt;

&lt;p&gt;このzipの中身は&lt;strong&gt;hugo_0.14_windows_amd64.exe&lt;/strong&gt;というバイナリ一つとLICENSE.mdとREADME.mdだけ。
このhugo_0.14_windows_amd64.exeがHugoのすべてなので、これを適当な場所において実行できるようにしとけばよい。
今回は、&lt;strong&gt;hugo.bat&lt;/strong&gt;というファイルに以下の内容を書き、PATHの通ったフォルダにいれた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;@echo off
C:\Users\Kaito\Desktop\tool\hugo_0.14_windows_amd64\hugo_0.14_windows_amd64.exe %*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;これで、どこからでも&lt;code&gt;hugo [arguments]&lt;/code&gt;と打てばHugoコマンドが実行できる。&lt;/p&gt;

&lt;h2 id=&#34;hugoのシンタックスハイライト&#34;&gt;Hugoのシンタックスハイライト&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/extras/highlighting/&#34;&gt;ドキュメント&lt;/a&gt;によると、Hugoでは&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%B7%E3%83%B3%E3%82%BF%E3%83%83%E3%82%AF%E3%82%B9%E3%83%8F%E3%82%A4%E3%83%A9%E3%82%A4%E3%83%88&#34;&gt;シンタックスハイライト&lt;/a&gt;を実現する方法を以下の2つから選べる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;サーバサイド: Hugoでのブログサイト生成時にハイライトしておく方法。&lt;/li&gt;
&lt;li&gt;クライアントサイド: クライアントがブログを読み込んだ時にJavaScriptでハイライトする方法。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前者の方が当然クライアントの負荷が軽くなるが、&lt;a href=&#34;http://pygments.org/&#34;&gt;&lt;strong&gt;Pygments&lt;/strong&gt;&lt;/a&gt;のインストールが必要だったりめんどくさそうなので後者にする。(Pygmentsは&lt;a href=&#34;https://www.kaitoy.xyz/2015/08/15/github-pages-and-jekyll/&#34;&gt;Jekyllのとき&lt;/a&gt;にすでに入れたけど…)&lt;/p&gt;

&lt;p&gt;クライアントサイドでやるのもいくつかやり方があるが、例えば&lt;a href=&#34;https://highlightjs.org/&#34;&gt;Highlight.js&lt;/a&gt;を使うなら以下をHTMLヘッダに加えるだけでいい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://yandex.st/highlightjs/8.0/styles/default.min.css&amp;quot;&amp;gt;
&amp;lt;script src=&amp;quot;https://yandex.st/highlightjs/8.0/highlight.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;hljs.initHighlightingOnLoad();&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この&lt;code&gt;default.min.css&lt;/code&gt;の部分を変えると&lt;a href=&#34;https://highlightjs.org/static/demo/&#34;&gt;色々なスタイル&lt;/a&gt;が選べる。
このブログでは&lt;code&gt;Zenburn&lt;/code&gt;を使うことにした。&lt;/p&gt;

&lt;h2 id=&#34;hugo味見&#34;&gt;Hugo味見&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/commands/&#34;&gt;Hugoコマンドリファレンス&lt;/a&gt;を見つつ、Hugoの味見をする。&lt;/p&gt;

&lt;p&gt;サイトのひな形を作るコマンドは&lt;code&gt;hugo new site [path]&lt;/code&gt;。&lt;code&gt;hugo new site blog&lt;/code&gt;を実行して、&lt;strong&gt;blog&lt;/strong&gt;という名のフォルダにサイトの初期ソースを生成。blogの部分はファイルもフォルダも存在しないパスを指定する。&lt;/p&gt;

&lt;p&gt;この時点で、blogフォルダ内には以下のものが入っている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/content/archetypes/&#34;&gt;&lt;strong&gt;archetypes&lt;/strong&gt;&lt;/a&gt;: 新規記事作成時に自動で挿入される&lt;a href=&#34;https://gohugo.io/content/front-matter/&#34;&gt;&lt;strong&gt;Front Matter&lt;/strong&gt;&lt;/a&gt; (後述)のカスタマイズをするためのファイルを置くフォルダ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/content/organization/&#34;&gt;&lt;strong&gt;content&lt;/strong&gt;&lt;/a&gt;: ブログのコンテンツ(記事など)を置くフォルダ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/extras/datafiles/&#34;&gt;&lt;strong&gt;data&lt;/strong&gt;&lt;/a&gt;: サイト生成時に使うデータを置くフォルダ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/templates/overview/&#34;&gt;&lt;strong&gt;layouts&lt;/strong&gt;&lt;/a&gt;: サイトのレイアウトを定義するファイルを置くフォルダ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/themes/creation&#34;&gt;&lt;strong&gt;static&lt;/strong&gt;&lt;/a&gt;: CSSとかJavaScriptとか画像とかのファイルを置くフォルダ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/overview/configuration/&#34;&gt;&lt;strong&gt;config.toml&lt;/strong&gt;&lt;/a&gt;: 設定ファイル。これは&lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;&lt;strong&gt;TOML&lt;/strong&gt;&lt;/a&gt;だが、&lt;a href=&#34;https://ja.wikipedia.org/wiki/YAML&#34;&gt;&lt;strong&gt;YAML&lt;/strong&gt;&lt;/a&gt;か&lt;a href=&#34;https://ja.wikipedia.org/wiki/JavaScript_Object_Notation&#34;&gt;&lt;strong&gt;JSON&lt;/strong&gt;&lt;/a&gt;でもいい。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;記事を作るコマンドは&lt;code&gt;hugo new  [path]&lt;/code&gt;。blogフォルダに&lt;code&gt;cd&lt;/code&gt;して、二つ記事を作ってみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;hugo new about.md
hugo new post/first_post.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;blog\content\about.md&lt;/strong&gt;と&lt;strong&gt;blog\content\post\first_post.md&lt;/strong&gt;が生成された。
これらには、Front Matterという、記事のメタ情報が自動で書き込まれる。
デフォルトで書き込まれるのは、日付 (&lt;strong&gt;date&lt;/strong&gt;)、ドラフトフラグ (&lt;strong&gt;draft&lt;/strong&gt;)、タイトル (&lt;strong&gt;title&lt;/strong&gt;)だけだが、
&lt;a href=&#34;https://gohugo.io/content/archetypes/&#34;&gt;&lt;strong&gt;Archetypes&lt;/strong&gt;&lt;/a&gt;という機能でカスタマイズできる。
が、今はやらない。&lt;/p&gt;

&lt;p&gt;about.mdとfirst_post.mdには適当に記事の内容を書いておく。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;次に&lt;a href=&#34;https://gohugo.io/themes/overview/&#34;&gt;テーマ&lt;/a&gt;を設定する。テーマを使えば、自分でレイアウトを書く必要がない。&lt;/p&gt;

&lt;p&gt;テーマは&lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;&lt;strong&gt;Hugo Themes&lt;/strong&gt;&lt;/a&gt;にリストされていて、ひとつひとつ選んでインストールもできるけど、今回は全部いっぺんにインストールして色々見てみる。blogフォルダ内で以下を実行すると、&lt;strong&gt;blog\themes&lt;/strong&gt;に全テーマがインストールされる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;git clone --recursive https://github.com/spf13/hugoThemes.git themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;これで、以下のコマンドを実行すると、サイトがビルドされ、サーバが起動し、ブラウザで確認できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;hugo server -t angels-ladder -D -w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-t&lt;/code&gt;でテーマを指定している。指定するのは&lt;strong&gt;blog\themes&lt;/strong&gt;内のフォルダ名。&lt;code&gt;-D&lt;/code&gt;はドラフト記事をビルドしたいときにつけるオプション。さっき作ったabout.mdとfirst_post.mdは、そのFront Matterのdraftがtrueになっていて、つまりドラフトなので、&lt;code&gt;-D&lt;/code&gt;を付けないとビルドされない。&lt;code&gt;-w&lt;/code&gt;は&lt;a href=&#34;https://gohugo.io/extras/livereload/&#34;&gt;&lt;strong&gt;LiveReload&lt;/strong&gt;&lt;/a&gt;を有効にするフラグで、付けておくとソースを修正したら自動でリビルドとブラウザのリロードが実行される。(変更を監視されるのはサブフォルダ内だけ。config.tomlの変更は無視される。)&lt;/p&gt;

&lt;p&gt;サーバには&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt;&lt;/strong&gt;でアクセスできる。今回指定したテーマangels-ladderだと、トップページにfirst_post.mdの記事へのリンクがあり、その内容を確認できる。about.mdの方はリンクはなく、直接&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/about/&#34;&gt;http://localhost:1313/about/&lt;/a&gt;&lt;/strong&gt;アクセスしないと見れない。この辺りはテーマ(と設定?)によって異なるのかな。
まあabout.mdは試しに作ってみただけなので消しておく。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hugo server&lt;/code&gt;の&lt;code&gt;-t&lt;/code&gt;に与える値を変えれば簡単にテーマを切り替えられるので、いろいろ見てみる。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;以上で味見終わり。&lt;/p&gt;

&lt;h2 id=&#34;テーマの選定-robust&#34;&gt;テーマの選定 - Robust&lt;/h2&gt;

&lt;p&gt;Hugo Themesにあるテーマはどれもあまりしっくりこなかった。
もう自分で作ろうかと思っていたところ、&lt;a href=&#34;https://github.com/dim0627/hugo_theme_robust&#34;&gt;&lt;strong&gt;Robust&lt;/strong&gt;&lt;/a&gt;というテーマを見つけた。
&lt;a href=&#34;http://yet.unresolved.xyz/&#34;&gt;こんな感じ&lt;/a&gt;のページができる。いい。これを使うことにする。&lt;/p&gt;

&lt;p&gt;blogフォルダ内で、いったんthemesを消してから以下を実行してRobustをインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;&amp;gt; git init .
&amp;gt; git submodule add https://github.com/dim0627/hugo_theme_robust.git themes/hugo_theme_robust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでは、&lt;code&gt;git init&lt;/code&gt;でblogフォルダをGitリポジトリにして、&lt;code&gt;git submodule add&lt;/code&gt;で&lt;strong&gt;hugo_theme_robust&lt;/strong&gt; (RobustのGitHubプロジェクト)を&lt;a href=&#34;https://git-scm.com/book/ja/v1/Git-%E3%81%AE%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB-%E3%82%B5%E3%83%96%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB&#34;&gt;サブモジュール&lt;/a&gt;として追加している。
こうすることで、blogとhugo_theme_robustを別々のリポジトリとして管理しつつ、hugo_theme_robustをblogの一部として使うことができる。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hugo server&lt;/code&gt;するときやビルド時に毎回テーマを指定しなくてもいいように、
config.tomlに&lt;code&gt;theme = &amp;quot;hugo_theme_robust&amp;quot;&lt;/code&gt;を追記しておく。&lt;/p&gt;

&lt;h2 id=&#34;テーマのカスタマイズ&#34;&gt;テーマのカスタマイズ&lt;/h2&gt;

&lt;p&gt;テーマフォルダ内の構成はblogフォルダ(プロジェクトルート)内と同じようになっていて、Hugoがサイトをビルドするとき、プロジェクトルート内のフォルダとテーマフォルダ内のフォルダをマージしたものを使ってくれる。この際、プロジェクトルート内のファイルが優先される。&lt;/p&gt;

&lt;p&gt;つまり例えば以下のような構成のプロジェクトがあったとする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;blog

&lt;ul&gt;
&lt;li&gt;layouts

&lt;ul&gt;
&lt;li&gt;hoge.html&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;themes

&lt;ul&gt;
&lt;li&gt;hugo_theme_robust

&lt;ul&gt;
&lt;li&gt;layouts

&lt;ul&gt;
&lt;li&gt;hoge.html&lt;/li&gt;
&lt;li&gt;foo.html&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hugoはこれをビルドするとき、layouts内には&lt;strong&gt;blog\layouts\hoge.html&lt;/strong&gt;と&lt;strong&gt;blog\thmes\hugo_theme_robust\layouts\foo.html&lt;/strong&gt;があるものとして処理してくれる。テーマをちょっとカスタマイズしたいときに、テーマのソースをいじらないでいいのが便利。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Robustはとりあえず設定ファイルをカスタマイズすれば使える。設定ファイルは、Robustはconfig.yamlだけど、ルートにconfig.toml置いたらちゃんと上書きできた。&lt;/p&gt;

&lt;h2 id=&#34;記事の仕上げ&#34;&gt;記事の仕上げ&lt;/h2&gt;

&lt;p&gt;first_post.mdの内容を仕上げて、以下のコマンドでdraftフラグをオフにする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;&amp;gt; hugo undraft content\post\first_post.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これをやるとdateも更新される。&lt;/p&gt;

&lt;h2 id=&#34;githubへソースを保存&#34;&gt;GitHubへソースを保存&lt;/h2&gt;

&lt;p&gt;blog内の変更をコミットして、GitHubにblogという名のリポジトリを作成して、以下のコマンドでソースをアップロードする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;&amp;gt; git remote add origin git@github.com:kaitoy/blog.git
&amp;gt; git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;また、ここで、&lt;strong&gt;gh-pages&lt;/strong&gt;というブランチを作り、中身を空にして、masterとは別途チェックアウトしておく。
コマンドは以下。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;&amp;gt; git checkout -b gh-pages
&amp;gt; rm -rf *
&amp;gt; git rm -rf .
&amp;gt; git commit -m &amp;quot;Init GitHub Pages branch.&amp;quot;
&amp;gt; git push origin gh-pages
&amp;gt; git checkout master
&amp;gt; git clone -b gh-pages git@github.com:kaitoy/blog.git pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでgh-pagesブランチが&lt;strong&gt;blog\pages&lt;/strong&gt;フォルダに展開された。&lt;/p&gt;

&lt;p&gt;因みにgh-pagesは、&lt;a href=&#34;https://www.kaitoy.xyz/2015/08/15/github-pages-and-jekyll/#github-pages%E5%91%B3%E8%A6%8B&#34;&gt;以前のエントリ&lt;/a&gt;にも書いたが、GitHub Pagesで公開するサイトを置く特別なブランチ。&lt;/p&gt;

&lt;p&gt;(2016/8/18追記: &lt;a href=&#34;https://www.kaitoy.xyz/2016/08/18/simpler-github-pages-publishing/&#34;&gt;今はgh-pagesブランチは不要。&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;ビルド-デプロイ&#34;&gt;ビルド・デプロイ&lt;/h2&gt;

&lt;p&gt;ビルドコマンドは単に&lt;code&gt;hugo&lt;/code&gt;。ビルド成果物はデフォルトで&lt;strong&gt;public&lt;/strong&gt;というフォルダに入る。
ここでは、pagesフォルダに入るように以下のコマンドでビルドする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;&amp;gt; hugo -d pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;ビルド完了したら、pagesフォルダに&lt;code&gt;cd&lt;/code&gt;して、全てのファイルを&lt;code&gt;git add&lt;/code&gt;して、コミットしてプッシュすればデプロイ完了。
&lt;code&gt;https://kaitoy.github.io/blog/&lt;/code&gt;でサイトを確認できる。&lt;/p&gt;

&lt;h2 id=&#34;カスタムドメイン&#34;&gt;カスタムドメイン&lt;/h2&gt;

&lt;p&gt;サイトに&lt;code&gt;http://www.kaitoy.xyz&lt;/code&gt;でアクセスできるようにする。手順は以下。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.value-domain.com/&#34;&gt;&lt;strong&gt;VALUE-DOMAIN&lt;/strong&gt;&lt;/a&gt;でkaitoy.xyzを取得。&lt;/li&gt;
&lt;li&gt;VALUE-DOMAINのDNS設定に&lt;code&gt;cname tbd kaitoy.github.io.&lt;/code&gt;を追加。&lt;/li&gt;
&lt;li&gt;gh-pagesブランチのルートに&lt;strong&gt;CNAME&lt;/strong&gt;というファイルを作り、&lt;strong&gt;www.kaitoy.xyz&lt;/strong&gt;とだけ書いておく。&lt;/li&gt;
&lt;li&gt;config.tomlのbaseurlを&lt;strong&gt;&lt;a href=&#34;http://www.kaitoy.xyz&#34;&gt;http://www.kaitoy.xyz&lt;/a&gt;&lt;/strong&gt;に変更。ビルドしてプッシュ。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上でブログサイト立ち上げ完了。あとはテーマをカスタマイズしたり、ひたすらエントリを書く。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>GitHub Pagesでブログ立ち上げ - Jekyllのためのツール</title>
          <link>https://www.kaitoy.xyz/2015/08/25/tools-for-jekyll/</link>
          <pubDate>Tue, 25 Aug 2015 22:36:28 -0600</pubDate>
          <author>Kaito Yamada</author>
          <guid>https://www.kaitoy.xyz/2015/08/25/tools-for-jekyll/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://www.kaitoy.xyz/2015/08/15/github-pages-and-jekyll/&#34;&gt;&lt;strong&gt;GitHub Pagesでブログ立ち上げ - GitHub PagesとJekyll&lt;/strong&gt;&lt;/a&gt;の続き。
前回は、&lt;a href=&#34;https://pages.github.com/&#34;&gt;&lt;strong&gt;GitHub Pages&lt;/strong&gt;&lt;/a&gt;と&lt;a href=&#34;http://jekyllrb.com/docs/home/&#34;&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;&lt;/a&gt;でブログを始めることにして、Jekyllのセットアップに四苦八苦した。&lt;/p&gt;

&lt;p&gt;Jekyllがだいたいセットアップできたところで、どんなサイトデザインにしようか考え始めた。
調べたところ、生のJekyllを使うよりも簡単に見栄えのいいサイトを作れる方法がある模様。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;



&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-6244473643910448&#34;
     data-ad-slot=&#34;1845600530&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/p&gt;

&lt;h2 id=&#34;octopress&#34;&gt;Octopress&lt;/h2&gt;

&lt;p&gt;もっとも有名なのは&lt;a href=&#34;http://octopress.org/&#34;&gt;&lt;strong&gt;Octopress&lt;/strong&gt;&lt;/a&gt;。
ホームページの説明によると、「Octopress is a framework designed for Jekyll, the static blogging engine powering Github Pages」とのこと。
フレームワークと呼ぶのはちょっと大げさな気がする。
まあ見たところ、Jekyllをサイト生成エンジンとした、ブログサイト構築、ブログエントリ作成、ブログサイトデプロイなどを簡易化するツール。&lt;/p&gt;

&lt;p&gt;広く使われていて情報が豊富だし、テーマを選んでエントリの内容を&lt;a href=&#34;https://ja.wikipedia.org/wiki/Markdown&#34;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/a&gt;で書くだけでかっこいいサイトが作れる。バージョンは2系が主に使われているやつで、3系がβ状態。&lt;/p&gt;

&lt;p&gt;血迷って3系に手を出してみる。&lt;a href=&#34;https://github.com/octopress/octopress&#34;&gt;GitHubにあるREADME&lt;/a&gt;を見ながらWindows 7上にインストールして、適当なサイトを作ろうとするも&lt;code&gt;jekyll build&lt;/code&gt;でエラー。さすがにWindowsじゃだめかと思い、CentOS 7のVMを立ち上げてそこでやってみるもまた&lt;code&gt;jekyll build&lt;/code&gt;でエラー。&lt;/p&gt;

&lt;p&gt;心折れかけながらドキュメントなど見ていたら、多くのプラグインがまだ開発中で、3系は基本的な機能しか動かなそうなことが発覚。素直に2系にすることに。&lt;/p&gt;

&lt;p&gt;2系は成熟しているし情報が沢山あるので、順調にインストールとテストサイト作成に成功したあたりで、不審な情報を発見した。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jekyllrb.com/docs/plugins/&#34;&gt;Jekyllのドキュメント&lt;/a&gt;によると、GitHub Pagesではセキュリティ対策のためにJekyll をセーフモードで実行するため、カスタムプラグインが無効になるとのこと。
Octopressが生成したJekyllソースをGitHub Pagesに上げたらビルドして公開してくれると思っていたけど、OctopressはJekyllのプラグイン機能をもりもり利用しているようなので、上手くいかないようだ。&lt;/p&gt;

&lt;p&gt;つまりOctopressをGitHub Pages上のサイトに使うとしたら、結局ビルド成果物をアップしないといけなくなる。JekyllのソースだけをGitHubで管理するように出来たらいいと思っていたが当てが外れた。&lt;/p&gt;

&lt;h2 id=&#34;jekyll-bootstrap&#34;&gt;Jekyll-Bootstrap&lt;/h2&gt;

&lt;p&gt;Octopressを使うモチベーションが下がり、他のを探したところ、&lt;a href=&#34;http://jekyllbootstrap.com/&#34;&gt;&lt;strong&gt;Jekyll-Bootstrap&lt;/strong&gt;&lt;/a&gt;というのを見つけた。&lt;/p&gt;

&lt;p&gt;Jekyll-BootstrapはJekyllのソースそのもので、面倒な部分は既にできてるので、ユーザはテンプレートを使って記事の内容を書くだけでいいよ、というもの。テーマ機能と、記事作成作業を&lt;a href=&#34;http://docs.seattlerb.org/rake/&#34;&gt;&lt;strong&gt;Rake&lt;/strong&gt;&lt;/a&gt;で簡易化するためのRakefile付き。&lt;/p&gt;

&lt;p&gt;すばらしいことに、「JekyllのソースだけをGitHubで管理するように出来たらいい」という需要に応えることを目指して作られていて、Jekyll-Bootstrapをベースに作ったJekyllソースはGitHub Pages上のJekyllでビルド可能。&lt;/p&gt;

&lt;p&gt;まさに求めていたものと心躍った。
が、&lt;a href=&#34;https://github.com/plusjade/jekyll-bootstrap&#34;&gt;プロジェクトページ&lt;/a&gt;を見るにあまり活発に開発が進んでない模様。
廃れ行きそうなツールを使うのもなぁ…&lt;/p&gt;

&lt;h2 id=&#34;結論&#34;&gt;結論&lt;/h2&gt;

&lt;p&gt;Jekyll-Bootstrapを使うのは気が進まない。Octopressを使うとビルド成果物をアップしないといけない。
どうせビルド成果物を上げるのなら、Jekyllにこだわる必要はないか、ということで、去年末くらいから盛り上がってきている&lt;a href=&#34;https://gohugo.io/&#34;&gt;&lt;strong&gt;Hugo&lt;/strong&gt;&lt;/a&gt;にすることに。Hugoについてはまた&lt;a href=&#34;https://www.kaitoy.xyz/2015/08/28/using-hugo/&#34;&gt;別のエントリ&lt;/a&gt;で書く。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>GitHub Pagesでブログ立ち上げ - GitHub PagesとJekyll</title>
          <link>https://www.kaitoy.xyz/2015/08/15/github-pages-and-jekyll/</link>
          <pubDate>Sat, 15 Aug 2015 10:48:49 -0600</pubDate>
          <author>Kaito Yamada</author>
          <guid>https://www.kaitoy.xyz/2015/08/15/github-pages-and-jekyll/</guid>
          <description>

&lt;p&gt;このブログを立ち上げたときの作業を、主に備忘録としていくつかのエントリに分けて書く。
このエントリでは主に&lt;a href=&#34;https://pages.github.com/&#34;&gt;&lt;strong&gt;GitHub Pages&lt;/strong&gt;&lt;/a&gt;と&lt;a href=&#34;http://jekyllrb.com/docs/home/&#34;&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;&lt;/a&gt;について書く。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;



&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-6244473643910448&#34;
     data-ad-slot=&#34;1845600530&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/p&gt;

&lt;h2 id=&#34;今の構成&#34;&gt;今の構成&lt;/h2&gt;

&lt;p&gt;このブログは、&lt;a href=&#34;https://gohugo.io/&#34;&gt;&lt;strong&gt;Hugo&lt;/strong&gt;&lt;/a&gt;で作って、GitHub Pagesで公開している。&lt;/p&gt;

&lt;p&gt;Hugoについては別のエントリで書くとして、GitHub Pagesは、GitHubが提供しているウェブページのホスティングサービスで、GitHubに特定の名前のリポジトリ、または任意のリポジトリに特定の名前のブランチを作ってウェブサイトのソースを置くと、公開してくれるというサービス。&lt;a href=&#34;https://ja.wikipedia.org/wiki/Platform_as_a_Service&#34;&gt;PaaS&lt;/a&gt;にあたるのかな。
&lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pagesのサイト&lt;/a&gt;に利用方法が載っている。&lt;/p&gt;

&lt;p&gt;以下、このブログ立ち上げに向けてやった作業について書く。&lt;/p&gt;

&lt;h2 id=&#34;github-pages味見&#34;&gt;GitHub Pages味見&lt;/h2&gt;

&lt;p&gt;GitHub Pagesを利用するには、&lt;strong&gt;GitHubユーザ名.github.io&lt;/strong&gt; という名前のリポジトリを作るか、任意のリポジトリに&lt;strong&gt;gh-pages&lt;/strong&gt; という名前のブランチを作って、そこにサイトのソースを置けばいい。そのサイトには、前者の場合は&lt;code&gt;http://GitHubユーザ名.github.io&lt;/code&gt;で、後者の場合は&lt;code&gt;http://GitHubユーザ名.github.io/リポジトリ名&lt;/code&gt;でアクセスできる。
(2016/8/18追記: &lt;a href=&#34;https://www.kaitoy.xyz/2016/08/18/simpler-github-pages-publishing/&#34;&gt;今はgh-pagesブランチは不要。&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;とりあえず前者をやってみる。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;kaitoy.github.io&lt;/strong&gt; という名前の&lt;a href=&#34;https://github.com/kaitoy/kaitoy.github.io&#34;&gt;リポジトリ&lt;/a&gt;を作って、そのルートに「Hello World」とだけ書いた &lt;strong&gt;index.html&lt;/strong&gt; を置く。&lt;/li&gt;
&lt;li&gt;ブラウザで&lt;code&gt;http://kaitoy.github.io&lt;/code&gt;にアクセスすると、「Hello World」と表示された。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これだけ。&lt;/p&gt;

&lt;h2 id=&#34;github-pagesとjekyll&#34;&gt;GitHub PagesとJekyll&lt;/h2&gt;

&lt;p&gt;GitHub Pagesには、普通にHTML/CSS/Javascriptのソースを置いてもいいけど、Jekyllを利用することもできる。&lt;/p&gt;

&lt;p&gt;Jekyllは、ブログ用の静的サイトジェネレータなるもので、&lt;a href=&#34;https://ja.wikipedia.org/wiki/Markdown&#34;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/a&gt;で書いた記事を元にブログサイトのソースを生成するツール。GitHub Pages用のリポジトリにJekyllのソースをアップロードすると、Jekyllでビルドされ、その結果が公開される。&lt;/p&gt;

&lt;p&gt;これはうれしい。  Jekyllのソースとビルド結果を別々に管理しなくてよくて楽だし、公開されるサイトが最新のソースに基づいていることが保証される。&lt;/p&gt;

&lt;p&gt;結論から言うと、以下のような理由で結局Jekyllは使わなかったんだけど、Jekyllとの格闘の記録を残しておく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windowsを正式サポートしていない。&lt;/li&gt;
&lt;li&gt;Rubyで書かれてるため、ビルドが遅い。ブログエントリが数百とかになると辛くなってくるらしい。&lt;/li&gt;
&lt;li&gt;Jekyllを使っても、かっこいいサイトを手軽に作ろうと思ったら、結局ビルド成果物もGitHubに上げないといけなくなる。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;jekyllセットアップ&#34;&gt;Jekyllセットアップ&lt;/h2&gt;

&lt;p&gt;GitHub PagesでJekyll使う場合は、GitHub Pagesと同じJekyll環境を手元に作ってプレビューできるようにしておくべきとのこと。なので、&lt;a href=&#34;https://help.github.com/articles/using-jekyll-with-pages/&#34;&gt;これ&lt;/a&gt;に従って自分のPC (Windows 7) にJekyllをセットアップする。&lt;/p&gt;

&lt;h4 id=&#34;１-rubyインストール&#34;&gt;１．Rubyインストール&lt;/h4&gt;

&lt;p&gt;Jekyllは &lt;strong&gt;Ruby&lt;/strong&gt; で書かれてるので、まずはRubyをインストールする。
Windowsなので&lt;a href=&#34;http://rubyinstaller.org/&#34;&gt;&lt;strong&gt;RubyInstaller&lt;/strong&gt;&lt;/a&gt; (ver. 2.2.2)をダウンロードしてインストール。
&lt;a href=&#34;http://bundler.io/&#34;&gt;&lt;strong&gt;Bundler&lt;/strong&gt;&lt;/a&gt; (RubyのパッケージであるGemの依存をアプリケーションごとに管理するツール) もあるといいらしいので、&lt;code&gt;gem install bundler&lt;/code&gt;を実行してインストール。&lt;/p&gt;

&lt;h4 id=&#34;2-jekyllインストール&#34;&gt;2.  Jekyllインストール&lt;/h4&gt;

&lt;p&gt;さっき作ったリポジトリ　&lt;strong&gt;kaitoy.github.io&lt;/strong&gt; (の手元のクローン)のルートに、Bundlerの定義ファイルを &lt;strong&gt;Gemfile&lt;/strong&gt; という名前で作り、以下の内容を書く。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source &#39;https://rubygems.org&#39;
gem &#39;github-pages&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;依存するGemは &lt;strong&gt;jekyll&lt;/strong&gt; じゃなくて &lt;strong&gt;github-pages&lt;/strong&gt;。これはGitHub Pages環境のJekyllということだろう。&lt;/p&gt;

&lt;p&gt;で、&lt;strong&gt;kaitoy.github.io&lt;/strong&gt; のルートで&lt;code&gt;bundle install&lt;/code&gt;を実行する。ここでエラー発生。
エラーメッセージによると、native gemをビルドするために &lt;strong&gt;DevKit&lt;/strong&gt; なるものが要るとのこと。&lt;/p&gt;

&lt;p&gt;再びRubyInstallerのページに行ってDevKitをダウンロードして、&lt;a href=&#34;http://github.com/oneclick/rubyinstaller/wiki/Development-Kit&#34;&gt;wiki&lt;/a&gt;に従ってインストール。&lt;/p&gt;

&lt;p&gt;再度&lt;code&gt;bundle install&lt;/code&gt;したらJekyllのインストールに成功。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;github-pages: ver. 35&lt;/li&gt;
&lt;li&gt;jekyll: ver. 2.4.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これで、ちょくちょく&lt;code&gt;bundle update&lt;/code&gt;を実行すれば、最新のGitHub Pages環境に追随できる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bundle exec jekyll serve&lt;/code&gt;すると、カレントディレクトリのJekyllソースがビルドされ、Webサーバが起動し、&lt;code&gt;http://localhost:4000&lt;/code&gt;でそのビルド結果を見れるらしい。&lt;/p&gt;

&lt;h4 id=&#34;3-jekyll味見&#34;&gt;3.  Jekyll味見&lt;/h4&gt;

&lt;p&gt;試しに、適当な場所で&lt;code&gt;jekyll new hoge&lt;/code&gt;を実行し、新規サイトフォルダ &lt;strong&gt;hoge&lt;/strong&gt; を作り、その中で&lt;code&gt;jekyll build&lt;/code&gt;してみる。以下のエラー。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;c:/Ruby22-x64/lib/ruby/gems/2.2.0/gems/posix-spawn-0.3.11/lib/posix/spawn.rb:164: warning: cannot close fd before spawn
&#39;which&#39; は、内部コマンドまたは外部コマンド、
操作可能なプログラムまたはバッチ ファイルとして認識されていません。
[31m  Liquid Exception: No such file or directory - python c:/Ruby22-x64/lib/ruby/gems/2.2.0/gems/pygments.rb-0.6.1/lib/pygments/mentos.py in jekyll/_posts/2015-05-29-welcome-to-jekyll.markdown[0m
                    done.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jekyllのサイトを見直したらWindowsはサポートされていないとのこと。
けど、Windowsにセットアップする方法は検索したらたくさん出てきた。
Jekyllのサイトでも紹介されている&lt;a href=&#34;http://jekyll-windows.juthilo.com/&#34;&gt;&lt;strong&gt;Run Jekyll on Windows&lt;/strong&gt;&lt;/a&gt;というサイトの手順に従うとか、&lt;a href=&#34;https://github.com/madhur/PortableJekyll&#34;&gt;&lt;strong&gt;Portable Jekyll&lt;/strong&gt;&lt;/a&gt;という、WindowsでJekyllを動かすためのツールを集めたものを使うとか。&lt;/p&gt;

&lt;p&gt;後者は、Jekyllのインスタンスを含んでいて、将来にわたるJekyllのアップデートについていってくれるか怪しいので、前者を見てみる。&lt;/p&gt;

&lt;h4 id=&#34;4-run-jekyll-on-windowsを試す&#34;&gt;4. Run Jekyll on Windowsを試す&lt;/h4&gt;

&lt;p&gt;Run Jekyll on Windowsによると、Jekyllはデフォルトでsyntax highlighterの &lt;strong&gt;pygments.rb&lt;/strong&gt; なるものに依存していて、pygments.rbをWindowsで使うには &lt;strong&gt;Python&lt;/strong&gt; とそのモジュールである &lt;strong&gt;Pygments&lt;/strong&gt; などをインストールする必要があるのこと。&lt;/p&gt;

&lt;p&gt;とりあえずPythonを&lt;a href=&#34;https://www.python.org/downloads/windows/&#34;&gt;ここ&lt;/a&gt;からダウンロードしてインストール。バージョンは、3系はPygmentsがサポートしていないようなので2.7.10。
&lt;strong&gt;pip&lt;/strong&gt; なるPythonパッケージ管理ツールが要るとRun Jekyll on Windowsに書いてあるが、2.7.10にはデフォルトで入っていた。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python -m pip install Pygments&lt;/code&gt;を実行してPygmentsをインストール。これはどうもpygments.rbがラップしているものらしい。&lt;/p&gt;

&lt;p&gt;また、Jekyllにはauto-regenerationなる、ファイル変更を検知して自動ビルドする機能があって、Windowsでこれを使うには &lt;strong&gt;wdm&lt;/strong&gt; というgemが必要らしい。
以下をGemfileに追加して、&lt;code&gt;bundle install&lt;/code&gt;する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem &#39;wdm&#39;, &#39;~&amp;gt; 0.1.0&#39; if Gem.win_platform?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;したら以下のエラー。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;c:\Ruby22-x64\lib\ruby\gems\2.2.0\gems\wdm-0.1.0\ext\wdm/rb_monitor.c:508: undefined reference to `rb_thread_blocking_region&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;どうも、&lt;a href=&#34;https://github.com/Maher4Ever/wdm/issues/18&#34;&gt;ここ&lt;/a&gt;によると、エラーメッセージにある &lt;strong&gt;rb_thread_blocking_region&lt;/strong&gt; というメソッドは、Ruby 2.0で非推奨になり2.2で消されたものらしい。&lt;/p&gt;

&lt;p&gt;wdmはもう数年更新されておらず、修正の見込みはなさそう。(後日見たら開発再開されてて、この問題も修正されていた。)&lt;/p&gt;

&lt;p&gt;Rubyをダウングレードするの面倒なので、試しにそのまま&lt;code&gt;jekyll serve&lt;/code&gt;したら以下のメッセージが出たけど動いた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;  Please add the following to your Gemfile to avoid polling for changes:
    gem &#39;wdm&#39;, &#39;&amp;gt;= 0.1.0&#39; if Gem.win_platform?
 Auto-regeneration: enabled for &#39;c:/Users/Kaito/mirrored_data/pleiades/workspace/kaitoy.github.io/hoge&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;auto-regenerationも動いている模様。実際ソースをいじったら自動で反映された。
よくわからないが、よしとする。&lt;/p&gt;

&lt;p&gt;実は、以下のエラー(上でも出てたやつ)はまだ出ている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;c:/Ruby22-x64/lib/ruby/gems/2.2.0/gems/posix-spawn-0.3.11/lib/posix/spawn.rb:164: warning: cannot close fd before spawn
&#39;which&#39; は、内部コマンドまたは外部コマンド、
操作可能なプログラムまたはバッチ ファイルとして認識されていません。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このwarningについてはRun Jekyll on Windowsには載っていないが、pygments.rbを0.5.0にダウングレードすればいいとの情報が&lt;a href=&#34;https://github.com/jekyll/jekyll/issues/2052&#34;&gt;ここ&lt;/a&gt;とかにある。&lt;/p&gt;

&lt;h2 id=&#34;5-jekyllとの決別&#34;&gt;5. Jekyllとの決別&lt;/h2&gt;

&lt;p&gt;この辺りまでJekyllをセットアップした後、JekyllのWindowsとの相性の悪さに嫌気がさしつつ、Jekyllで簡単にかっこいいサイトを作るためのツールなどを調べているうちに、Jekyllを使うのをやめた。それについては&lt;a href=&#34;https://www.kaitoy.xyz/2015/08/25/tools-for-jekyll/&#34;&gt;別のエントリ&lt;/a&gt;で書く。&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
