<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>To Be Decided </title>
    <link>https://www.kaitoy.xyz/tags/blog/</link>
    <language>en-us</language>
    <author>Kaito Yamada</author>
    <rights>(C) 2018</rights>
    <updated>2017-02-14 09:51:42 -0700 -0700</updated>

    
      
        <item>
          <title>ブログアドレスを変更したときにやったこと</title>
          <link>https://www.kaitoy.xyz/2017/02/14/change-subdomain/</link>
          <pubDate>Tue, 14 Feb 2017 09:51:42 -0700</pubDate>
          <author>Kaito Yamada</author>
          <guid>https://www.kaitoy.xyz/2017/02/14/change-subdomain/</guid>
          <description>

&lt;p&gt;このブログの閲覧数がそこそこの規模になってきたので、&lt;a href=&#34;https://www.google.co.jp/adsense/start/&#34;&gt;Google AdSense&lt;/a&gt;で小遣い稼ぎを始めようとしたら、最近サブドメインが&lt;code&gt;www&lt;/code&gt;じゃないとできないようになったようだったので、サブドメインを&lt;code&gt;tbd&lt;/code&gt;から&lt;code&gt;www&lt;/code&gt;に変更した話。&lt;/p&gt;

&lt;p&gt;変更自体はそんなに難しくなかったけど、Googleの検索順位を保つためにいろいろ気を使う必要があった。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;



&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-6244473643910448&#34;
     data-ad-slot=&#34;1845600530&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/p&gt;

&lt;h1 id=&#34;ブログアドレスの変更&#34;&gt;ブログアドレスの変更&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.kaitoy.xyz/2015/08/28/using-hugo/&#34;&gt;以前&lt;/a&gt;にも書いたが、このブログは&lt;a href=&#34;https://gohugo.io/&#34;&gt;&lt;strong&gt;Hugo&lt;/strong&gt;&lt;/a&gt;で作って&lt;a href=&#34;https://pages.github.com/&#34;&gt;&lt;strong&gt;GitHub Pages&lt;/strong&gt;&lt;/a&gt;でカスタムドメインで公開している。&lt;/p&gt;

&lt;p&gt;コメント欄を設けるために&lt;a href=&#34;https://disqus.com/&#34;&gt;&lt;strong&gt;Disqus&lt;/strong&gt;&lt;/a&gt;を使っている。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;&lt;strong&gt;Cloudflare&lt;/strong&gt;&lt;/a&gt;を使って&lt;a href=&#34;https://www.kaitoy.xyz/2016/07/01/https-support-by-cloudflare/&#34;&gt;全体をHTTPS化&lt;/a&gt;していて、その関係で&lt;code&gt;kaitoy.xyz&lt;/code&gt;ドメインの名前解決にはCloudflareのDNSを使っている。&lt;/p&gt;

&lt;p&gt;アクセス解析などのために&lt;a href=&#34;https://analytics.google.com/&#34;&gt;&lt;strong&gt;Google Analytics&lt;/strong&gt;&lt;/a&gt;と&lt;a href=&#34;https://www.google.com/webmasters/tools/home&#34;&gt;&lt;strong&gt;Google Search Console&lt;/strong&gt;&lt;/a&gt;を使ってる。&lt;/p&gt;

&lt;p&gt;この構成で、ブログアドレスの変更に必要だった修正を列挙する。(この順にやったわけではない。)&lt;/p&gt;

&lt;h4 id=&#34;1-ブログソース修正&#34;&gt;1. ブログソース修正&lt;/h4&gt;

&lt;p&gt;Hugoの設定ファイルである&lt;code&gt;config.toml&lt;/code&gt;に書いてある&lt;code&gt;baseurl&lt;/code&gt;の値を&lt;code&gt;https://tbd.kaitoy.xyz&lt;/code&gt;から&lt;code&gt;https://www.kaitoy.xyz&lt;/code&gt;に変え、また、各記事の内部リンクのURLも&lt;code&gt;www&lt;/code&gt;のに変えた。&lt;/p&gt;

&lt;p&gt;あと&lt;code&gt;robots.txt&lt;/code&gt;の&lt;code&gt;Sitemap&lt;/code&gt;のURLも&lt;code&gt;https://www.kaitoy.xyz/sitemap.xml&lt;/code&gt;に更新した。&lt;/p&gt;

&lt;h4 id=&#34;2-github-pagesの設定変更&#34;&gt;2. GitHub Pagesの設定変更&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kaitoy/blog&#34;&gt;ブログリポジトリ&lt;/a&gt;に行って、&lt;code&gt;Settings&lt;/code&gt;の&lt;code&gt;GitHub Pages&lt;/code&gt;欄の&lt;code&gt;Custom domain&lt;/code&gt;の値を&lt;code&gt;https://www.kaitoy.xyz&lt;/code&gt;に変えた。&lt;/p&gt;

&lt;p&gt;ついでにブログリポジトリのトップに表示される&lt;code&gt;Description&lt;/code&gt;の&lt;code&gt;Website&lt;/code&gt;の値も新しいURLに変更した。&lt;/p&gt;

&lt;p&gt;この変更によりありがたい副作用もあった。
GitHub Pagesは&lt;code&gt;www&lt;/code&gt;というサブドメインを特別扱いしていて、以下の恩恵を受けられるのだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;wwwを省略したURL(apex domain)でアクセスすると、GitHub Pagesサーバがwww付きのURLに&lt;a href=&#34;https://help.github.com/articles/setting-up-an-apex-domain-and-www-subdomain/&#34;&gt;リダイレクトしてくれる&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/about-supported-custom-domains/#www-subdomains&#34;&gt;安定していて速い&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;3-cloudflareのdns設定変更&#34;&gt;3. CloudflareのDNS設定変更&lt;/h4&gt;

&lt;p&gt;CloudflareのDNSで、もともと&lt;code&gt;CNAME&lt;/code&gt;レコードで&lt;code&gt;kaitoy.github.io&lt;/code&gt;(GitHub Pagesのデフォルトのドメイン)のエイリアスを&lt;code&gt;tbd&lt;/code&gt;にしていたのを&lt;code&gt;www&lt;/code&gt;に変更した。&lt;/p&gt;

&lt;p&gt;また、上記の通りapex domainでGitHub Pagesにアクセスしても上手いことやってくれるようになったので、&lt;code&gt;www.kaitoy.xyz&lt;/code&gt;のエイリアスを&lt;code&gt;kaitoy.xyz&lt;/code&gt;とする&lt;code&gt;CNAME&lt;/code&gt;レコードを追加した。
CloudflareのDNSはapex domain(i.e. &lt;code&gt;kaitoy.xyz&lt;/code&gt;)に対する&lt;code&gt;CNAME&lt;/code&gt;レコード設定を&lt;a href=&#34;https://support.cloudflare.com/hc/en-us/articles/200169056-CNAME-Flattening-RFC-compliant-support-for-CNAME-at-the-root&#34;&gt;サポートしている&lt;/a&gt;ので、これで&lt;code&gt;www.kaitoy.xyz&lt;/code&gt;でも&lt;code&gt;kaitoy.xyz&lt;/code&gt;でもGitHub Pagesにルーティングされるようになった。&lt;/p&gt;

&lt;h4 id=&#34;4-disqusの設定変更&#34;&gt;4. Disqusの設定変更&lt;/h4&gt;

&lt;p&gt;ホームの右上の歯車アイコンから&lt;code&gt;Admin&lt;/code&gt;を開いて、ヘッダの&lt;code&gt;Settings&lt;/code&gt;からブログのURLを選んでその設定画面を開き、&lt;code&gt;Website URL&lt;/code&gt;を&lt;code&gt;https://www.kaitoy.xyz&lt;/code&gt;に変更した。&lt;/p&gt;

&lt;h4 id=&#34;5-google-analyticsの設定変更&#34;&gt;5. Google Analyticsの設定変更&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;管理&lt;/code&gt;タブの&lt;code&gt;プロパティ設定&lt;/code&gt;の&lt;code&gt;デフォルトの URL&lt;/code&gt;を&lt;code&gt;https://www.kaitoy.xyz&lt;/code&gt;に変更しただけ。&lt;/p&gt;

&lt;h1 id=&#34;googleのページランクを保つためのあれこれ&#34;&gt;Googleのページランクを保つためのあれこれ&lt;/h1&gt;

&lt;p&gt;以前もどこかに書いたが、どんなにすばらしい内容の記事を書いてもGoogle検索結果の2,3ページくらいまでに出てこないんであれば誰も読んでくれない。
このブログのいくつかの記事はそれなりにいいキーワードでいい検索順位になっていたので、サブドメイン変更によってページランクに悪影響が出るのはなるべく避けたかった。&lt;/p&gt;

&lt;p&gt;調べたら、&lt;a href=&#34;https://support.google.com/webmasters/answer/6033049?hl=ja&amp;amp;ref_topic=6033084&#34;&gt;Google Search Consoleのヘルプ&lt;/a&gt;にまさにその悪影響を防ぐ方法が載っていたので、これに従ってあれこれした。&lt;/p&gt;

&lt;h4 id=&#34;1-自身を参照する-rel-canonical-リンクタグを付ける&#34;&gt;1. 自身を参照する &lt;code&gt;rel=&amp;quot;canonical&amp;quot;&lt;/code&gt;リンクタグを付ける&lt;/h4&gt;

&lt;p&gt;ブログの全てのページのヘッダに以下の様な移転先アドレスを指すlinkタグを付け、変更後のアドレスが正式なアドレスであることをGooglebotに教えてやる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;canonical&amp;quot; href=&amp;quot;https://www.kaitoy.xyz/2015/07/18/first-post/&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hugoのソースでいうと以下の感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;canonical&amp;quot; href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-http-301リダイレクトを設定&#34;&gt;2. HTTP 301リダイレクトを設定&lt;/h4&gt;

&lt;p&gt;多分これが一番重要なんじゃなかろうか。&lt;/p&gt;

&lt;p&gt;HTTPステータスコードの&lt;a href=&#34;https://support.google.com/webmasters/answer/93633&#34;&gt;301&lt;/a&gt;はサイトのコンテンツが別のURLに恒久的に移転したことを示すもので、移転前のURLにアクセスしたクライアントに301を移転先のURLとともに返してやることで、HTTPレベルでのリダイレクトをさせることができる。&lt;/p&gt;

&lt;p&gt;GooglebotもこのステータスコードでブログURLの変更を知ることができるので、検索結果をよしなに移行してくれるはず。&lt;/p&gt;

&lt;p&gt;301を返すサーバには&lt;a href=&#34;https://www.xrea.com/&#34;&gt;XREA&lt;/a&gt;の無料サーバを使った。
このブログのドメインは&lt;a href=&#34;https://www.value-domain.com/&#34;&gt;バリュードメイン&lt;/a&gt;で買ったもので、ここがXREAと提携していたので無料サーバも合わせて確保していたもののほとんど使っていなかったので調度よかった。
調べたらこのサーバで、&lt;a href=&#34;https://httpd.apache.org/&#34;&gt;Apache HTTP Server&lt;/a&gt;の設定ファイルである&lt;code&gt;.htaccess&lt;/code&gt;が使えることが分かったので、以下の内容で作って&lt;code&gt;/public_html/&lt;/code&gt;に置いた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Files ~ &amp;quot;^\.ht&amp;quot;&amp;gt;
deny from all
&amp;lt;/Files&amp;gt;

# Redirect
Redirect permanent / https://www.kaitoy.xyz/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、サーバの管理ページからドメインウェブ設定画面に行き、Mainのドメイン名を&lt;code&gt;tbd.kaitoy.xyz&lt;/code&gt;に設定。&lt;/p&gt;

&lt;p&gt;あとはCloudflareのDNS設定で、&lt;code&gt;tbd&lt;/code&gt;を上記XREAサーバのIPアドレスに解決する&lt;code&gt;A&lt;/code&gt;レコードを追加して完了。&lt;/p&gt;

&lt;h4 id=&#34;3-google-search-consoleのアドレス変更ツール実行&#34;&gt;3. Google Search Consoleのアドレス変更ツール実行&lt;/h4&gt;

&lt;p&gt;最後の仕上げとして、Google Search Consoleの&lt;a href=&#34;https://support.google.com/webmasters/answer/83106&#34;&gt;アドレス変更ツール&lt;/a&gt;を使ってGooglebotにアドレス変更を通知した。&lt;/p&gt;

&lt;p&gt;このツールはGoogle Search Consoleの管理サイトごとのページの右上の歯車アイコンから&lt;code&gt;アドレス変更&lt;/code&gt;を選択すると開け、以下のようなものが表示される。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/change-subdomain/change_address.png&#34; alt=&#34;change_address.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;このウィザードに従って、移転先URL(プロパティ)の追加、301リダイレクトの動作確認、サイトの存在確認をして、アドレス変更のリクエストを送信するだけ。&lt;/p&gt;

&lt;p&gt;最後に、追加したプロパティの&lt;code&gt;クロール&lt;/code&gt;の&lt;code&gt;サイトマップ&lt;/code&gt;から、移転先サイトのサイトマップを送信して完了。
サイトマップはHugoがビルド時に生成してくれたやつ。&lt;/p&gt;

&lt;p&gt;今&lt;a href=&#34;https://support.google.com/webmasters/answer/6033049?hl=ja&amp;amp;ref_topic=6033084&#34;&gt;Google Search Consoleのヘルプ&lt;/a&gt;を見直したら移転前のサイトマップも送信しろと書いてあるのに気付いた。
これはやらなかったけど、やった方がよかったのかも。&lt;/p&gt;

&lt;p&gt;ともあれ、移転後一時的に検索順位が大きく落ちたものの、1,2週間位でもとにもどったので、この移転は概ね成功だったと思う。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>CloudflareでブログをHTTPS化</title>
          <link>https://www.kaitoy.xyz/2016/07/01/https-support-by-cloudflare/</link>
          <pubDate>Fri, 01 Jul 2016 14:17:41 -0600</pubDate>
          <author>Kaito Yamada</author>
          <guid>https://www.kaitoy.xyz/2016/07/01/https-support-by-cloudflare/</guid>
          <description>

&lt;p&gt;最近&lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;がHTTPSに正式対応したというニュースを見たことをきっかけに、このブログを&lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;Cloudflare&lt;/a&gt;で常時HTTPS化した話。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;



&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-6244473643910448&#34;
     data-ad-slot=&#34;1845600530&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/p&gt;

&lt;h2 id=&#34;このブログ&#34;&gt;このブログ&lt;/h2&gt;

&lt;p&gt;このブログは&lt;a href=&#34;https://www.kaitoy.xyz/2015/08/15/github-pages-and-jekyll/&#34;&gt;GitHub Pagesでホストされている&lt;/a&gt;。
GitHub Pages上のWebサイトはデフォルトでは&lt;code&gt;&amp;lt;GitHubユーザ名&amp;gt;.github.io&lt;/code&gt;というドメインで公開されるが、ちょっとかっこつけたかったのでカスタムドメイン(&lt;code&gt;www.kaitoy.xyz&lt;/code&gt;)にした。&lt;/p&gt;

&lt;p&gt;GitHub Pagesは2014年3月から非公式にHTTPSをサポートしていて、2016年6月8日に&lt;a href=&#34;https://github.com/blog/2186-https-for-github-pages&#34;&gt;正式サポートを表明&lt;/a&gt;したが、これは&lt;code&gt;&amp;lt;GitHubユーザ名&amp;gt;.github.io&lt;/code&gt;ドメインだけが対象であり、カスタムドメインはHTTPSサポートされていない。&lt;/p&gt;

&lt;p&gt;(2018/5/3追記: 2018/5/1にGitHub PagesのカスタムドメインのHTTPSサポートが&lt;a href=&#34;https://blog.github.com/2018-05-01-github-pages-custom-domains-https/&#34;&gt;発表された&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;要するにこのブログにはHTTP接続しかできない状態だった。
これをなんとかHTTPSに対応させたかった。&lt;/p&gt;

&lt;h2 id=&#34;なぜhttps&#34;&gt;なぜHTTPS&lt;/h2&gt;

&lt;p&gt;HTTPS化(常時SSL化)が世界的な流行りな雰囲気を感じていたのと、なにより、&lt;a href=&#34;http://googlewebmastercentral-ja.blogspot.com/2015/12/indexing-https-pages-by-default.html&#34;&gt;Googleに優遇してもらえるから&lt;/a&gt;。
Googleの検索結果の2,3ページ目までに出てこないなら、そのサイトはこの世に存在しないのとあまり変わらない。&lt;/p&gt;

&lt;p&gt;昔はHTTPSにするとSSLプロトコルのオーバーヘッドや暗号化/復号化処理によりHTTPに比べて遅くなると言われていたが、最近ではサーバ/クライアントマシンの性能が上がり、このデメリットは気にするほどのものではなくなった。
逆に、常時SSL化すると&lt;a href=&#34;https://ja.wikipedia.org/wiki/SPDY&#34;&gt;SPDY&lt;/a&gt;や&lt;a href=&#34;https://ja.wikipedia.org/wiki/HTTP/2&#34;&gt;HTTP/2&lt;/a&gt;といった高速なプロトコルの恩恵を受けることができるようになり、HTTPより速くなることもあるらしい。&lt;/p&gt;

&lt;h2 id=&#34;カスタムドメインなgithub-pagesサイトをhttps対応する方法&#34;&gt;カスタムドメインなGitHub PagesサイトをHTTPS対応する方法&lt;/h2&gt;

&lt;p&gt;上記の通りこのブログはカスタムドメインでGitHub Pagesのサポートがなく直接にはHTTPS対応できない。
よって間接的に対応することになるので、&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%AA%E3%83%90%E3%83%BC%E3%82%B9%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7&#34;&gt;リバースプロキシ&lt;/a&gt;を使うことになる。
リバースプロキシサーバを自分で運用するのは大変なので、&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E3%83%87%E3%83%AA%E3%83%90%E3%83%AA%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF&#34;&gt;CDN&lt;/a&gt;サービスを利用する。&lt;/p&gt;

&lt;p&gt;CDNサービスでまず思い当たったのはAWSの&lt;a href=&#34;https://aws.amazon.com/jp/cloudfront/&#34;&gt;CloudFront&lt;/a&gt;だけど、なんだか大げさで面倒そう。
あとは&lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;Cloudflare&lt;/a&gt;が有名なので調べたところ、手軽で無料でよさそうだったのでこれにした。&lt;/p&gt;

&lt;p&gt;因みに、ごく最近始まったサービスの&lt;a href=&#34;https://www.kloudsec.com/&#34;&gt;Kloudsec&lt;/a&gt;というのも見つけたけど、まだベータが付いているし、遅いだのそもそもつながらないだの評判が悪かったのでこれは無し。&lt;/p&gt;

&lt;p&gt;Cloudflareを利用すると、もともとだいたいこんな感じ↓だったのが、&lt;/p&gt;

&lt;ul class=&#34;bxslider&#34;&gt;
  &lt;li&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/direct/スライド1.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/direct/スライド2.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/direct/スライド3.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/direct/スライド4.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/direct/スライド5.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/direct/スライド6.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/direct/スライド7.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/direct/スライド8.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/direct/スライド9.PNG&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こんな感じ↓になる。多分。&lt;/p&gt;

&lt;ul class=&#34;bxslider&#34;&gt;
  &lt;li&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/cdn/スライド1.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/cdn/スライド2.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/cdn/スライド3.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/cdn/スライド4.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/cdn/スライド5.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/cdn/スライド6.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/cdn/スライド7.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/cdn/スライド8.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/cdn/スライド9.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/cdn/スライド10.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/cdn/スライド11.PNG&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上のスライド中のリバースプロキシは実際にはいくつもあり、&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%8B%E3%83%BC%E3%82%AD%E3%83%A3%E3%82%B9%E3%83%88&#34;&gt;エニーキャスト&lt;/a&gt;によってブラウザから一番近いものが使われる。&lt;/p&gt;

&lt;h2 id=&#34;cloudflare事始め&#34;&gt;Cloudflare事始め&lt;/h2&gt;

&lt;p&gt;Cloudflareの始め方は&lt;a href=&#34;http://qiita.com/superbrothers/items/95e5723e9bd320094537&#34;&gt;Qiitaの記事&lt;/a&gt;を参考にした。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Cloudflareのアカウント作成&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;Cloudflareのサイト&lt;/a&gt;に行って&lt;code&gt;Sign up&lt;/code&gt;のリンクからメアドとパスワードを渡してアカウントを作成。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Cloudflareにサイトを登録&lt;/p&gt;

&lt;p&gt;アカウント作成後に開くページに従い、4つのステップをこなすとサービス利用開始できる。&lt;/p&gt;

&lt;p&gt;まずはサイトの登録。
サブドメインを除いた&lt;code&gt;kaitoy.xyz&lt;/code&gt;を入力して&lt;code&gt;Begin Scan&lt;/code&gt;をクリック。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/add_domain.png&#34; alt=&#34;add_domain.png&#34; title=&#34;add_domain.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;何かのスキャンが始まるので1分ほど待つ。何をしているのかはよくわからない。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;CloudflareのDNSの設定&lt;/p&gt;

&lt;p&gt;次のステップでCloudflareのDNSにレコードを登録する。
ブラウザからのトラフィックの誘導には&lt;code&gt;A&lt;/code&gt;か&lt;code&gt;AAAA&lt;/code&gt;か&lt;code&gt;CNAME&lt;/code&gt;を登録できる。
トラフィックは&lt;code&gt;kaitoy.github.io&lt;/code&gt;に送りたいけど、IPアドレスは自分でコントロールできないので&lt;code&gt;A&lt;/code&gt;と&lt;code&gt;AAAA&lt;/code&gt;は使えない。
&lt;code&gt;CNAME&lt;/code&gt;を登録した。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/dns.png&#34; alt=&#34;dns.png&#34; title=&#34;dns.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;適当に入力して&lt;code&gt;Add Record&lt;/code&gt;を押すとレコードを登録できるが、&lt;code&gt;Status&lt;/code&gt;のところがデフォルトで&lt;code&gt;DNS only&lt;/code&gt;(灰色のクラウドのアイコン)になっているので、アイコンをクリックして&lt;code&gt;DNS and HTTP proxy (CDN)&lt;/code&gt;(オレンジ色のクラウドのアイコン)にしておく。
こうしないとブラウザからのトラフィックがCloudflareを経由せず、HTTPS化できないはず。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;プランの選択&lt;/p&gt;

&lt;p&gt;サービスプランは無料の&lt;code&gt;Free Website&lt;/code&gt;を選択。常時SSL化するだけならこれで十分なはず。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/select_plan.png&#34; alt=&#34;select_plan.png&#34; title=&#34;select_plan.png&#34; /&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;レジストラのネームサーバの変更&lt;/p&gt;

&lt;p&gt;最後にレジストラのサイトに行ってネームサーバを変更するように指示される。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/change_your_ns.png&#34; alt=&#34;change_your_ns.png&#34; title=&#34;change_your_ns.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Cloudflareからは二つのネームサーバが割り当てられたようだ。
指示されたとおりに変更する。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;cloudflareの設定&#34;&gt;Cloudflareの設定&lt;/h2&gt;

&lt;p&gt;サインアップが終わるとCloudflareのダッシュボードが開く。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/dashboard.png&#34; alt=&#34;dashboard.png&#34; title=&#34;dashboard.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;ダッシュボードの&lt;code&gt;Overview&lt;/code&gt;の&lt;code&gt;Statusは&lt;/code&gt;最初は&lt;code&gt;Pending&lt;/code&gt;になっていて、これはネームサーバの変更を反映中ということらしかった。
ネームサーバの変更は数時間くらいかかったが、変更中も&lt;code&gt;http://www.kaitoy.xyz/&lt;/code&gt;にはアクセスできた。&lt;/p&gt;

&lt;p&gt;ダッシュボードからやった設定は以下。
これも&lt;a href=&#34;http://qiita.com/superbrothers/items/95e5723e9bd320094537&#34;&gt;Qiitaの記事&lt;/a&gt;を参考にした。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;SSL&lt;/p&gt;

&lt;p&gt;ダッシュボードの&lt;code&gt;Crypto&lt;/code&gt;の&lt;code&gt;SSL&lt;/code&gt;の設定はデフォルトで&lt;code&gt;Full (strict)&lt;/code&gt;になっている。
これはブラウザ-Cloudflare間とCloudflare-GitHub Pages間両方をSSL化する設定。
上で書いたようにGitHub Pagesの方はSSL対応できずこの設定は使えないので、&lt;code&gt;Flexible&lt;/code&gt;に変更。
こちらはブラウザ-Cloudflare間だけをSSL化する。&lt;/p&gt;

&lt;p&gt;この設定変更をして、SSL証明書が発行されるまで数時間待ったら&lt;code&gt;https://www.kaitoy.xyz/&lt;/code&gt;にアクセスできるようになった。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;HSTS&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/HTTP_Strict_Transport_Security&#34;&gt;HSTS&lt;/a&gt;はHTTPでアクセスしてきたブラウザにHTTPSでアクセスするよう指示する仕組み。
これを有効にしてよりセキュアにする。
ダッシュボードの&lt;code&gt;Crypto&lt;/code&gt;の&lt;code&gt;HTTP Strict Transport Security (HSTS)&lt;/code&gt;から以下の様に設定した。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/hsts.png&#34; alt=&#34;hsts.png&#34; title=&#34;hsts.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;kaitoy.xyz&lt;/code&gt;だけじゃなくて&lt;code&gt;www.kaitoy.xyz&lt;/code&gt;で有効にするため、&lt;code&gt;Include subdomains&lt;/code&gt;を&lt;code&gt;On&lt;/code&gt;にしておくのが肝要のはず。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;HTTPSへのリダイレクト&lt;/p&gt;

&lt;p&gt;HTTPでのアクセスをHTTPSにリダイレクトする設定を加える。
ダッシュボードの&lt;code&gt;Page Rules&lt;/code&gt;で以下のルールを作った。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/https-support-by-cloudflare/page_rules.png&#34; alt=&#34;page_rules.png&#34; title=&#34;page_rules.png&#34; /&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;ブログサイトの修正&#34;&gt;ブログサイトの修正&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;link&lt;/code&gt;タグや&lt;code&gt;script&lt;/code&gt;タグの&lt;code&gt;www.kaitoy.xyz&lt;/code&gt;を指しているURLをHTTPSに修正。
内部リンクも全部HTTPSにした。これで完了。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>GitHub Pagesでブログ立ち上げ - Hugoを使う</title>
          <link>https://www.kaitoy.xyz/2015/08/28/using-hugo/</link>
          <pubDate>Fri, 28 Aug 2015 23:36:21 -0600</pubDate>
          <author>Kaito Yamada</author>
          <guid>https://www.kaitoy.xyz/2015/08/28/using-hugo/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://www.kaitoy.xyz/2015/08/25/tools-for-jekyll/&#34;&gt;&lt;strong&gt;GitHub Pagesでブログ立ち上げ - Jekyllのためのツール&lt;/strong&gt;&lt;/a&gt;の続き。
前回は、&lt;a href=&#34;https://pages.github.com/&#34;&gt;&lt;strong&gt;GitHub Pages&lt;/strong&gt;&lt;/a&gt;で公開するブログサイトを構築するのに、&lt;a href=&#34;http://jekyllrb.com/docs/home/&#34;&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;&lt;/a&gt;とJekyll関連ツールを使おうと四苦八苦したが、結局Jekyllに見切りをつけ、&lt;a href=&#34;https://gohugo.io/&#34;&gt;&lt;strong&gt;Hugo&lt;/strong&gt;&lt;/a&gt;を使うことに決めた。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;



&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-6244473643910448&#34;
     data-ad-slot=&#34;1845600530&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/p&gt;

&lt;h2 id=&#34;hugoとは&#34;&gt;Hugoとは&lt;/h2&gt;

&lt;p&gt;Hugoは、国内では2014年末くらいから盛り上がってきているブログサイト構築ツール。
そのホームページによると、ウェブサイトフレームワークで、静的サイトジェネレータとのこと。&lt;/p&gt;

&lt;p&gt;フレームワークと名乗ってはいるが、その正体は、&lt;a href=&#34;https://ja.wikipedia.org/wiki/Markdown&#34;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/a&gt;で書かれた記事を元にブログサイトのソースを生成するコンテントビルド機能と、記事作成(など)を支援するユーティリティ機能を持ったコマンドラインツール。&lt;/p&gt;

&lt;p&gt;また、静的サイトジェネレータというのは、静的なサイトを生成するという意味ではなく、静的にサイトを生成するという意味。もっと言えば、WordPressとかがアクセス時にビルドが走るのに対し、Hugoを使った場合は事前にビルド済みのものをサーバにアップロードすることになる、ということ。らしい。WordPressは使ったことがないのでよく知らないが、Hugoのホームページにそう書いてある。
つまり、Hugoは静的なサイトだけを扱うツールってわけではないので、JavaScriptとかを駆使して動的でインタラクティブなページを作ってもいいはず。&lt;/p&gt;

&lt;h2 id=&#34;hugoのインストール&#34;&gt;Hugoのインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/overview/installing/&#34;&gt;インストールガイド&lt;/a&gt;に従ってHugoをインストールする。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;HugoのGitHub Releases&lt;/a&gt;からWindows用バイナリをダウンロード。このときはバージョン0.14が最新だったので、&lt;strong&gt;hugo_0.14_windows_amd64.zip&lt;/strong&gt;をダウンロードした。&lt;/p&gt;

&lt;p&gt;このzipの中身は&lt;strong&gt;hugo_0.14_windows_amd64.exe&lt;/strong&gt;というバイナリ一つとLICENSE.mdとREADME.mdだけ。
このhugo_0.14_windows_amd64.exeがHugoのすべてなので、これを適当な場所において実行できるようにしとけばよい。
今回は、&lt;strong&gt;hugo.bat&lt;/strong&gt;というファイルに以下の内容を書き、PATHの通ったフォルダにいれた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;@echo off
C:\Users\Kaito\Desktop\tool\hugo_0.14_windows_amd64\hugo_0.14_windows_amd64.exe %*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;これで、どこからでも&lt;code&gt;hugo [arguments]&lt;/code&gt;と打てばHugoコマンドが実行できる。&lt;/p&gt;

&lt;h2 id=&#34;hugoのシンタックスハイライト&#34;&gt;Hugoのシンタックスハイライト&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/extras/highlighting/&#34;&gt;ドキュメント&lt;/a&gt;によると、Hugoでは&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%B7%E3%83%B3%E3%82%BF%E3%83%83%E3%82%AF%E3%82%B9%E3%83%8F%E3%82%A4%E3%83%A9%E3%82%A4%E3%83%88&#34;&gt;シンタックスハイライト&lt;/a&gt;を実現する方法を以下の2つから選べる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;サーバサイド: Hugoでのブログサイト生成時にハイライトしておく方法。&lt;/li&gt;
&lt;li&gt;クライアントサイド: クライアントがブログを読み込んだ時にJavaScriptでハイライトする方法。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前者の方が当然クライアントの負荷が軽くなるが、&lt;a href=&#34;http://pygments.org/&#34;&gt;&lt;strong&gt;Pygments&lt;/strong&gt;&lt;/a&gt;のインストールが必要だったりめんどくさそうなので後者にする。(Pygmentsは&lt;a href=&#34;https://www.kaitoy.xyz/2015/08/15/github-pages-and-jekyll/&#34;&gt;Jekyllのとき&lt;/a&gt;にすでに入れたけど…)&lt;/p&gt;

&lt;p&gt;クライアントサイドでやるのもいくつかやり方があるが、例えば&lt;a href=&#34;https://highlightjs.org/&#34;&gt;Highlight.js&lt;/a&gt;を使うなら以下をHTMLヘッダに加えるだけでいい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://yandex.st/highlightjs/8.0/styles/default.min.css&amp;quot;&amp;gt;
&amp;lt;script src=&amp;quot;https://yandex.st/highlightjs/8.0/highlight.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;hljs.initHighlightingOnLoad();&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この&lt;code&gt;default.min.css&lt;/code&gt;の部分を変えると&lt;a href=&#34;https://highlightjs.org/static/demo/&#34;&gt;色々なスタイル&lt;/a&gt;が選べる。
このブログでは&lt;code&gt;Zenburn&lt;/code&gt;を使うことにした。&lt;/p&gt;

&lt;h2 id=&#34;hugo味見&#34;&gt;Hugo味見&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/commands/&#34;&gt;Hugoコマンドリファレンス&lt;/a&gt;を見つつ、Hugoの味見をする。&lt;/p&gt;

&lt;p&gt;サイトのひな形を作るコマンドは&lt;code&gt;hugo new site [path]&lt;/code&gt;。&lt;code&gt;hugo new site blog&lt;/code&gt;を実行して、&lt;strong&gt;blog&lt;/strong&gt;という名のフォルダにサイトの初期ソースを生成。blogの部分はファイルもフォルダも存在しないパスを指定する。&lt;/p&gt;

&lt;p&gt;この時点で、blogフォルダ内には以下のものが入っている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/content/archetypes/&#34;&gt;&lt;strong&gt;archetypes&lt;/strong&gt;&lt;/a&gt;: 新規記事作成時に自動で挿入される&lt;a href=&#34;https://gohugo.io/content/front-matter/&#34;&gt;&lt;strong&gt;Front Matter&lt;/strong&gt;&lt;/a&gt; (後述)のカスタマイズをするためのファイルを置くフォルダ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/content/organization/&#34;&gt;&lt;strong&gt;content&lt;/strong&gt;&lt;/a&gt;: ブログのコンテンツ(記事など)を置くフォルダ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/extras/datafiles/&#34;&gt;&lt;strong&gt;data&lt;/strong&gt;&lt;/a&gt;: サイト生成時に使うデータを置くフォルダ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/templates/overview/&#34;&gt;&lt;strong&gt;layouts&lt;/strong&gt;&lt;/a&gt;: サイトのレイアウトを定義するファイルを置くフォルダ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/themes/creation&#34;&gt;&lt;strong&gt;static&lt;/strong&gt;&lt;/a&gt;: CSSとかJavaScriptとか画像とかのファイルを置くフォルダ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/overview/configuration/&#34;&gt;&lt;strong&gt;config.toml&lt;/strong&gt;&lt;/a&gt;: 設定ファイル。これは&lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;&lt;strong&gt;TOML&lt;/strong&gt;&lt;/a&gt;だが、&lt;a href=&#34;https://ja.wikipedia.org/wiki/YAML&#34;&gt;&lt;strong&gt;YAML&lt;/strong&gt;&lt;/a&gt;か&lt;a href=&#34;https://ja.wikipedia.org/wiki/JavaScript_Object_Notation&#34;&gt;&lt;strong&gt;JSON&lt;/strong&gt;&lt;/a&gt;でもいい。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;記事を作るコマンドは&lt;code&gt;hugo new  [path]&lt;/code&gt;。blogフォルダに&lt;code&gt;cd&lt;/code&gt;して、二つ記事を作ってみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;hugo new about.md
hugo new post/first_post.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;blog\content\about.md&lt;/strong&gt;と&lt;strong&gt;blog\content\post\first_post.md&lt;/strong&gt;が生成された。
これらには、Front Matterという、記事のメタ情報が自動で書き込まれる。
デフォルトで書き込まれるのは、日付 (&lt;strong&gt;date&lt;/strong&gt;)、ドラフトフラグ (&lt;strong&gt;draft&lt;/strong&gt;)、タイトル (&lt;strong&gt;title&lt;/strong&gt;)だけだが、
&lt;a href=&#34;https://gohugo.io/content/archetypes/&#34;&gt;&lt;strong&gt;Archetypes&lt;/strong&gt;&lt;/a&gt;という機能でカスタマイズできる。
が、今はやらない。&lt;/p&gt;

&lt;p&gt;about.mdとfirst_post.mdには適当に記事の内容を書いておく。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;次に&lt;a href=&#34;https://gohugo.io/themes/overview/&#34;&gt;テーマ&lt;/a&gt;を設定する。テーマを使えば、自分でレイアウトを書く必要がない。&lt;/p&gt;

&lt;p&gt;テーマは&lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;&lt;strong&gt;Hugo Themes&lt;/strong&gt;&lt;/a&gt;にリストされていて、ひとつひとつ選んでインストールもできるけど、今回は全部いっぺんにインストールして色々見てみる。blogフォルダ内で以下を実行すると、&lt;strong&gt;blog\themes&lt;/strong&gt;に全テーマがインストールされる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;git clone --recursive https://github.com/spf13/hugoThemes.git themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;これで、以下のコマンドを実行すると、サイトがビルドされ、サーバが起動し、ブラウザで確認できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;hugo server -t angels-ladder -D -w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-t&lt;/code&gt;でテーマを指定している。指定するのは&lt;strong&gt;blog\themes&lt;/strong&gt;内のフォルダ名。&lt;code&gt;-D&lt;/code&gt;はドラフト記事をビルドしたいときにつけるオプション。さっき作ったabout.mdとfirst_post.mdは、そのFront Matterのdraftがtrueになっていて、つまりドラフトなので、&lt;code&gt;-D&lt;/code&gt;を付けないとビルドされない。&lt;code&gt;-w&lt;/code&gt;は&lt;a href=&#34;https://gohugo.io/extras/livereload/&#34;&gt;&lt;strong&gt;LiveReload&lt;/strong&gt;&lt;/a&gt;を有効にするフラグで、付けておくとソースを修正したら自動でリビルドとブラウザのリロードが実行される。(変更を監視されるのはサブフォルダ内だけ。config.tomlの変更は無視される。)&lt;/p&gt;

&lt;p&gt;サーバには&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt;&lt;/strong&gt;でアクセスできる。今回指定したテーマangels-ladderだと、トップページにfirst_post.mdの記事へのリンクがあり、その内容を確認できる。about.mdの方はリンクはなく、直接&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/about/&#34;&gt;http://localhost:1313/about/&lt;/a&gt;&lt;/strong&gt;アクセスしないと見れない。この辺りはテーマ(と設定?)によって異なるのかな。
まあabout.mdは試しに作ってみただけなので消しておく。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hugo server&lt;/code&gt;の&lt;code&gt;-t&lt;/code&gt;に与える値を変えれば簡単にテーマを切り替えられるので、いろいろ見てみる。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;以上で味見終わり。&lt;/p&gt;

&lt;h2 id=&#34;テーマの選定-robust&#34;&gt;テーマの選定 - Robust&lt;/h2&gt;

&lt;p&gt;Hugo Themesにあるテーマはどれもあまりしっくりこなかった。
もう自分で作ろうかと思っていたところ、&lt;a href=&#34;https://github.com/dim0627/hugo_theme_robust&#34;&gt;&lt;strong&gt;Robust&lt;/strong&gt;&lt;/a&gt;というテーマを見つけた。
&lt;a href=&#34;http://yet.unresolved.xyz/&#34;&gt;こんな感じ&lt;/a&gt;のページができる。いい。これを使うことにする。&lt;/p&gt;

&lt;p&gt;blogフォルダ内で、いったんthemesを消してから以下を実行してRobustをインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;&amp;gt; git init .
&amp;gt; git submodule add https://github.com/dim0627/hugo_theme_robust.git themes/hugo_theme_robust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでは、&lt;code&gt;git init&lt;/code&gt;でblogフォルダをGitリポジトリにして、&lt;code&gt;git submodule add&lt;/code&gt;で&lt;strong&gt;hugo_theme_robust&lt;/strong&gt; (RobustのGitHubプロジェクト)を&lt;a href=&#34;https://git-scm.com/book/ja/v1/Git-%E3%81%AE%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB-%E3%82%B5%E3%83%96%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB&#34;&gt;サブモジュール&lt;/a&gt;として追加している。
こうすることで、blogとhugo_theme_robustを別々のリポジトリとして管理しつつ、hugo_theme_robustをblogの一部として使うことができる。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hugo server&lt;/code&gt;するときやビルド時に毎回テーマを指定しなくてもいいように、
config.tomlに&lt;code&gt;theme = &amp;quot;hugo_theme_robust&amp;quot;&lt;/code&gt;を追記しておく。&lt;/p&gt;

&lt;h2 id=&#34;テーマのカスタマイズ&#34;&gt;テーマのカスタマイズ&lt;/h2&gt;

&lt;p&gt;テーマフォルダ内の構成はblogフォルダ(プロジェクトルート)内と同じようになっていて、Hugoがサイトをビルドするとき、プロジェクトルート内のフォルダとテーマフォルダ内のフォルダをマージしたものを使ってくれる。この際、プロジェクトルート内のファイルが優先される。&lt;/p&gt;

&lt;p&gt;つまり例えば以下のような構成のプロジェクトがあったとする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;blog

&lt;ul&gt;
&lt;li&gt;layouts

&lt;ul&gt;
&lt;li&gt;hoge.html&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;themes

&lt;ul&gt;
&lt;li&gt;hugo_theme_robust

&lt;ul&gt;
&lt;li&gt;layouts

&lt;ul&gt;
&lt;li&gt;hoge.html&lt;/li&gt;
&lt;li&gt;foo.html&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hugoはこれをビルドするとき、layouts内には&lt;strong&gt;blog\layouts\hoge.html&lt;/strong&gt;と&lt;strong&gt;blog\thmes\hugo_theme_robust\layouts\foo.html&lt;/strong&gt;があるものとして処理してくれる。テーマをちょっとカスタマイズしたいときに、テーマのソースをいじらないでいいのが便利。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Robustはとりあえず設定ファイルをカスタマイズすれば使える。設定ファイルは、Robustはconfig.yamlだけど、ルートにconfig.toml置いたらちゃんと上書きできた。&lt;/p&gt;

&lt;h2 id=&#34;記事の仕上げ&#34;&gt;記事の仕上げ&lt;/h2&gt;

&lt;p&gt;first_post.mdの内容を仕上げて、以下のコマンドでdraftフラグをオフにする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;&amp;gt; hugo undraft content\post\first_post.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これをやるとdateも更新される。&lt;/p&gt;

&lt;h2 id=&#34;githubへソースを保存&#34;&gt;GitHubへソースを保存&lt;/h2&gt;

&lt;p&gt;blog内の変更をコミットして、GitHubにblogという名のリポジトリを作成して、以下のコマンドでソースをアップロードする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;&amp;gt; git remote add origin git@github.com:kaitoy/blog.git
&amp;gt; git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;また、ここで、&lt;strong&gt;gh-pages&lt;/strong&gt;というブランチを作り、中身を空にして、masterとは別途チェックアウトしておく。
コマンドは以下。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;&amp;gt; git checkout -b gh-pages
&amp;gt; rm -rf *
&amp;gt; git rm -rf .
&amp;gt; git commit -m &amp;quot;Init GitHub Pages branch.&amp;quot;
&amp;gt; git push origin gh-pages
&amp;gt; git checkout master
&amp;gt; git clone -b gh-pages git@github.com:kaitoy/blog.git pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでgh-pagesブランチが&lt;strong&gt;blog\pages&lt;/strong&gt;フォルダに展開された。&lt;/p&gt;

&lt;p&gt;因みにgh-pagesは、&lt;a href=&#34;https://www.kaitoy.xyz/2015/08/15/github-pages-and-jekyll/#github-pages%E5%91%B3%E8%A6%8B&#34;&gt;以前のエントリ&lt;/a&gt;にも書いたが、GitHub Pagesで公開するサイトを置く特別なブランチ。&lt;/p&gt;

&lt;p&gt;(2016/8/18追記: &lt;a href=&#34;https://www.kaitoy.xyz/2016/08/18/simpler-github-pages-publishing/&#34;&gt;今はgh-pagesブランチは不要。&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;ビルド-デプロイ&#34;&gt;ビルド・デプロイ&lt;/h2&gt;

&lt;p&gt;ビルドコマンドは単に&lt;code&gt;hugo&lt;/code&gt;。ビルド成果物はデフォルトで&lt;strong&gt;public&lt;/strong&gt;というフォルダに入る。
ここでは、pagesフォルダに入るように以下のコマンドでビルドする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;&amp;gt; hugo -d pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;ビルド完了したら、pagesフォルダに&lt;code&gt;cd&lt;/code&gt;して、全てのファイルを&lt;code&gt;git add&lt;/code&gt;して、コミットしてプッシュすればデプロイ完了。
&lt;code&gt;https://kaitoy.github.io/blog/&lt;/code&gt;でサイトを確認できる。&lt;/p&gt;

&lt;h2 id=&#34;カスタムドメイン&#34;&gt;カスタムドメイン&lt;/h2&gt;

&lt;p&gt;サイトに&lt;code&gt;http://www.kaitoy.xyz&lt;/code&gt;でアクセスできるようにする。手順は以下。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.value-domain.com/&#34;&gt;&lt;strong&gt;VALUE-DOMAIN&lt;/strong&gt;&lt;/a&gt;でkaitoy.xyzを取得。&lt;/li&gt;
&lt;li&gt;VALUE-DOMAINのDNS設定に&lt;code&gt;cname tbd kaitoy.github.io.&lt;/code&gt;を追加。&lt;/li&gt;
&lt;li&gt;gh-pagesブランチのルートに&lt;strong&gt;CNAME&lt;/strong&gt;というファイルを作り、&lt;strong&gt;www.kaitoy.xyz&lt;/strong&gt;とだけ書いておく。&lt;/li&gt;
&lt;li&gt;config.tomlのbaseurlを&lt;strong&gt;&lt;a href=&#34;http://www.kaitoy.xyz&#34;&gt;http://www.kaitoy.xyz&lt;/a&gt;&lt;/strong&gt;に変更。ビルドしてプッシュ。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上でブログサイト立ち上げ完了。あとはテーマをカスタマイズしたり、ひたすらエントリを書く。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>GitHub Pagesでブログ立ち上げ - Jekyllのためのツール</title>
          <link>https://www.kaitoy.xyz/2015/08/25/tools-for-jekyll/</link>
          <pubDate>Tue, 25 Aug 2015 22:36:28 -0600</pubDate>
          <author>Kaito Yamada</author>
          <guid>https://www.kaitoy.xyz/2015/08/25/tools-for-jekyll/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://www.kaitoy.xyz/2015/08/15/github-pages-and-jekyll/&#34;&gt;&lt;strong&gt;GitHub Pagesでブログ立ち上げ - GitHub PagesとJekyll&lt;/strong&gt;&lt;/a&gt;の続き。
前回は、&lt;a href=&#34;https://pages.github.com/&#34;&gt;&lt;strong&gt;GitHub Pages&lt;/strong&gt;&lt;/a&gt;と&lt;a href=&#34;http://jekyllrb.com/docs/home/&#34;&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;&lt;/a&gt;でブログを始めることにして、Jekyllのセットアップに四苦八苦した。&lt;/p&gt;

&lt;p&gt;Jekyllがだいたいセットアップできたところで、どんなサイトデザインにしようか考え始めた。
調べたところ、生のJekyllを使うよりも簡単に見栄えのいいサイトを作れる方法がある模様。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;



&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-6244473643910448&#34;
     data-ad-slot=&#34;1845600530&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/p&gt;

&lt;h2 id=&#34;octopress&#34;&gt;Octopress&lt;/h2&gt;

&lt;p&gt;もっとも有名なのは&lt;a href=&#34;http://octopress.org/&#34;&gt;&lt;strong&gt;Octopress&lt;/strong&gt;&lt;/a&gt;。
ホームページの説明によると、「Octopress is a framework designed for Jekyll, the static blogging engine powering Github Pages」とのこと。
フレームワークと呼ぶのはちょっと大げさな気がする。
まあ見たところ、Jekyllをサイト生成エンジンとした、ブログサイト構築、ブログエントリ作成、ブログサイトデプロイなどを簡易化するツール。&lt;/p&gt;

&lt;p&gt;広く使われていて情報が豊富だし、テーマを選んでエントリの内容を&lt;a href=&#34;https://ja.wikipedia.org/wiki/Markdown&#34;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/a&gt;で書くだけでかっこいいサイトが作れる。バージョンは2系が主に使われているやつで、3系がβ状態。&lt;/p&gt;

&lt;p&gt;血迷って3系に手を出してみる。&lt;a href=&#34;https://github.com/octopress/octopress&#34;&gt;GitHubにあるREADME&lt;/a&gt;を見ながらWindows 7上にインストールして、適当なサイトを作ろうとするも&lt;code&gt;jekyll build&lt;/code&gt;でエラー。さすがにWindowsじゃだめかと思い、CentOS 7のVMを立ち上げてそこでやってみるもまた&lt;code&gt;jekyll build&lt;/code&gt;でエラー。&lt;/p&gt;

&lt;p&gt;心折れかけながらドキュメントなど見ていたら、多くのプラグインがまだ開発中で、3系は基本的な機能しか動かなそうなことが発覚。素直に2系にすることに。&lt;/p&gt;

&lt;p&gt;2系は成熟しているし情報が沢山あるので、順調にインストールとテストサイト作成に成功したあたりで、不審な情報を発見した。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jekyllrb.com/docs/plugins/&#34;&gt;Jekyllのドキュメント&lt;/a&gt;によると、GitHub Pagesではセキュリティ対策のためにJekyll をセーフモードで実行するため、カスタムプラグインが無効になるとのこと。
Octopressが生成したJekyllソースをGitHub Pagesに上げたらビルドして公開してくれると思っていたけど、OctopressはJekyllのプラグイン機能をもりもり利用しているようなので、上手くいかないようだ。&lt;/p&gt;

&lt;p&gt;つまりOctopressをGitHub Pages上のサイトに使うとしたら、結局ビルド成果物をアップしないといけなくなる。JekyllのソースだけをGitHubで管理するように出来たらいいと思っていたが当てが外れた。&lt;/p&gt;

&lt;h2 id=&#34;jekyll-bootstrap&#34;&gt;Jekyll-Bootstrap&lt;/h2&gt;

&lt;p&gt;Octopressを使うモチベーションが下がり、他のを探したところ、&lt;a href=&#34;http://jekyllbootstrap.com/&#34;&gt;&lt;strong&gt;Jekyll-Bootstrap&lt;/strong&gt;&lt;/a&gt;というのを見つけた。&lt;/p&gt;

&lt;p&gt;Jekyll-BootstrapはJekyllのソースそのもので、面倒な部分は既にできてるので、ユーザはテンプレートを使って記事の内容を書くだけでいいよ、というもの。テーマ機能と、記事作成作業を&lt;a href=&#34;http://docs.seattlerb.org/rake/&#34;&gt;&lt;strong&gt;Rake&lt;/strong&gt;&lt;/a&gt;で簡易化するためのRakefile付き。&lt;/p&gt;

&lt;p&gt;すばらしいことに、「JekyllのソースだけをGitHubで管理するように出来たらいい」という需要に応えることを目指して作られていて、Jekyll-Bootstrapをベースに作ったJekyllソースはGitHub Pages上のJekyllでビルド可能。&lt;/p&gt;

&lt;p&gt;まさに求めていたものと心躍った。
が、&lt;a href=&#34;https://github.com/plusjade/jekyll-bootstrap&#34;&gt;プロジェクトページ&lt;/a&gt;を見るにあまり活発に開発が進んでない模様。
廃れ行きそうなツールを使うのもなぁ…&lt;/p&gt;

&lt;h2 id=&#34;結論&#34;&gt;結論&lt;/h2&gt;

&lt;p&gt;Jekyll-Bootstrapを使うのは気が進まない。Octopressを使うとビルド成果物をアップしないといけない。
どうせビルド成果物を上げるのなら、Jekyllにこだわる必要はないか、ということで、去年末くらいから盛り上がってきている&lt;a href=&#34;https://gohugo.io/&#34;&gt;&lt;strong&gt;Hugo&lt;/strong&gt;&lt;/a&gt;にすることに。Hugoについてはまた&lt;a href=&#34;https://www.kaitoy.xyz/2015/08/28/using-hugo/&#34;&gt;別のエントリ&lt;/a&gt;で書く。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>GitHub Pagesでブログ立ち上げ - GitHub PagesとJekyll</title>
          <link>https://www.kaitoy.xyz/2015/08/15/github-pages-and-jekyll/</link>
          <pubDate>Sat, 15 Aug 2015 10:48:49 -0600</pubDate>
          <author>Kaito Yamada</author>
          <guid>https://www.kaitoy.xyz/2015/08/15/github-pages-and-jekyll/</guid>
          <description>

&lt;p&gt;このブログを立ち上げたときの作業を、主に備忘録としていくつかのエントリに分けて書く。
このエントリでは主に&lt;a href=&#34;https://pages.github.com/&#34;&gt;&lt;strong&gt;GitHub Pages&lt;/strong&gt;&lt;/a&gt;と&lt;a href=&#34;http://jekyllrb.com/docs/home/&#34;&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;&lt;/a&gt;について書く。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;



&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-6244473643910448&#34;
     data-ad-slot=&#34;1845600530&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/p&gt;

&lt;h2 id=&#34;今の構成&#34;&gt;今の構成&lt;/h2&gt;

&lt;p&gt;このブログは、&lt;a href=&#34;https://gohugo.io/&#34;&gt;&lt;strong&gt;Hugo&lt;/strong&gt;&lt;/a&gt;で作って、GitHub Pagesで公開している。&lt;/p&gt;

&lt;p&gt;Hugoについては別のエントリで書くとして、GitHub Pagesは、GitHubが提供しているウェブページのホスティングサービスで、GitHubに特定の名前のリポジトリ、または任意のリポジトリに特定の名前のブランチを作ってウェブサイトのソースを置くと、公開してくれるというサービス。&lt;a href=&#34;https://ja.wikipedia.org/wiki/Platform_as_a_Service&#34;&gt;PaaS&lt;/a&gt;にあたるのかな。
&lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pagesのサイト&lt;/a&gt;に利用方法が載っている。&lt;/p&gt;

&lt;p&gt;以下、このブログ立ち上げに向けてやった作業について書く。&lt;/p&gt;

&lt;h2 id=&#34;github-pages味見&#34;&gt;GitHub Pages味見&lt;/h2&gt;

&lt;p&gt;GitHub Pagesを利用するには、&lt;strong&gt;GitHubユーザ名.github.io&lt;/strong&gt; という名前のリポジトリを作るか、任意のリポジトリに&lt;strong&gt;gh-pages&lt;/strong&gt; という名前のブランチを作って、そこにサイトのソースを置けばいい。そのサイトには、前者の場合は&lt;code&gt;http://GitHubユーザ名.github.io&lt;/code&gt;で、後者の場合は&lt;code&gt;http://GitHubユーザ名.github.io/リポジトリ名&lt;/code&gt;でアクセスできる。
(2016/8/18追記: &lt;a href=&#34;https://www.kaitoy.xyz/2016/08/18/simpler-github-pages-publishing/&#34;&gt;今はgh-pagesブランチは不要。&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;とりあえず前者をやってみる。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;kaitoy.github.io&lt;/strong&gt; という名前の&lt;a href=&#34;https://github.com/kaitoy/kaitoy.github.io&#34;&gt;リポジトリ&lt;/a&gt;を作って、そのルートに「Hello World」とだけ書いた &lt;strong&gt;index.html&lt;/strong&gt; を置く。&lt;/li&gt;
&lt;li&gt;ブラウザで&lt;code&gt;http://kaitoy.github.io&lt;/code&gt;にアクセスすると、「Hello World」と表示された。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これだけ。&lt;/p&gt;

&lt;h2 id=&#34;github-pagesとjekyll&#34;&gt;GitHub PagesとJekyll&lt;/h2&gt;

&lt;p&gt;GitHub Pagesには、普通にHTML/CSS/Javascriptのソースを置いてもいいけど、Jekyllを利用することもできる。&lt;/p&gt;

&lt;p&gt;Jekyllは、ブログ用の静的サイトジェネレータなるもので、&lt;a href=&#34;https://ja.wikipedia.org/wiki/Markdown&#34;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/a&gt;で書いた記事を元にブログサイトのソースを生成するツール。GitHub Pages用のリポジトリにJekyllのソースをアップロードすると、Jekyllでビルドされ、その結果が公開される。&lt;/p&gt;

&lt;p&gt;これはうれしい。  Jekyllのソースとビルド結果を別々に管理しなくてよくて楽だし、公開されるサイトが最新のソースに基づいていることが保証される。&lt;/p&gt;

&lt;p&gt;結論から言うと、以下のような理由で結局Jekyllは使わなかったんだけど、Jekyllとの格闘の記録を残しておく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windowsを正式サポートしていない。&lt;/li&gt;
&lt;li&gt;Rubyで書かれてるため、ビルドが遅い。ブログエントリが数百とかになると辛くなってくるらしい。&lt;/li&gt;
&lt;li&gt;Jekyllを使っても、かっこいいサイトを手軽に作ろうと思ったら、結局ビルド成果物もGitHubに上げないといけなくなる。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;jekyllセットアップ&#34;&gt;Jekyllセットアップ&lt;/h2&gt;

&lt;p&gt;GitHub PagesでJekyll使う場合は、GitHub Pagesと同じJekyll環境を手元に作ってプレビューできるようにしておくべきとのこと。なので、&lt;a href=&#34;https://help.github.com/articles/using-jekyll-with-pages/&#34;&gt;これ&lt;/a&gt;に従って自分のPC (Windows 7) にJekyllをセットアップする。&lt;/p&gt;

&lt;h4 id=&#34;１-rubyインストール&#34;&gt;１．Rubyインストール&lt;/h4&gt;

&lt;p&gt;Jekyllは &lt;strong&gt;Ruby&lt;/strong&gt; で書かれてるので、まずはRubyをインストールする。
Windowsなので&lt;a href=&#34;http://rubyinstaller.org/&#34;&gt;&lt;strong&gt;RubyInstaller&lt;/strong&gt;&lt;/a&gt; (ver. 2.2.2)をダウンロードしてインストール。
&lt;a href=&#34;http://bundler.io/&#34;&gt;&lt;strong&gt;Bundler&lt;/strong&gt;&lt;/a&gt; (RubyのパッケージであるGemの依存をアプリケーションごとに管理するツール) もあるといいらしいので、&lt;code&gt;gem install bundler&lt;/code&gt;を実行してインストール。&lt;/p&gt;

&lt;h4 id=&#34;2-jekyllインストール&#34;&gt;2.  Jekyllインストール&lt;/h4&gt;

&lt;p&gt;さっき作ったリポジトリ　&lt;strong&gt;kaitoy.github.io&lt;/strong&gt; (の手元のクローン)のルートに、Bundlerの定義ファイルを &lt;strong&gt;Gemfile&lt;/strong&gt; という名前で作り、以下の内容を書く。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source &#39;https://rubygems.org&#39;
gem &#39;github-pages&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;依存するGemは &lt;strong&gt;jekyll&lt;/strong&gt; じゃなくて &lt;strong&gt;github-pages&lt;/strong&gt;。これはGitHub Pages環境のJekyllということだろう。&lt;/p&gt;

&lt;p&gt;で、&lt;strong&gt;kaitoy.github.io&lt;/strong&gt; のルートで&lt;code&gt;bundle install&lt;/code&gt;を実行する。ここでエラー発生。
エラーメッセージによると、native gemをビルドするために &lt;strong&gt;DevKit&lt;/strong&gt; なるものが要るとのこと。&lt;/p&gt;

&lt;p&gt;再びRubyInstallerのページに行ってDevKitをダウンロードして、&lt;a href=&#34;http://github.com/oneclick/rubyinstaller/wiki/Development-Kit&#34;&gt;wiki&lt;/a&gt;に従ってインストール。&lt;/p&gt;

&lt;p&gt;再度&lt;code&gt;bundle install&lt;/code&gt;したらJekyllのインストールに成功。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;github-pages: ver. 35&lt;/li&gt;
&lt;li&gt;jekyll: ver. 2.4.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これで、ちょくちょく&lt;code&gt;bundle update&lt;/code&gt;を実行すれば、最新のGitHub Pages環境に追随できる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bundle exec jekyll serve&lt;/code&gt;すると、カレントディレクトリのJekyllソースがビルドされ、Webサーバが起動し、&lt;code&gt;http://localhost:4000&lt;/code&gt;でそのビルド結果を見れるらしい。&lt;/p&gt;

&lt;h4 id=&#34;3-jekyll味見&#34;&gt;3.  Jekyll味見&lt;/h4&gt;

&lt;p&gt;試しに、適当な場所で&lt;code&gt;jekyll new hoge&lt;/code&gt;を実行し、新規サイトフォルダ &lt;strong&gt;hoge&lt;/strong&gt; を作り、その中で&lt;code&gt;jekyll build&lt;/code&gt;してみる。以下のエラー。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c:/Ruby22-x64/lib/ruby/gems/2.2.0/gems/posix-spawn-0.3.11/lib/posix/spawn.rb:164: warning: cannot close fd before spawn
&#39;which&#39; は、内部コマンドまたは外部コマンド、
操作可能なプログラムまたはバッチ ファイルとして認識されていません。
[31m  Liquid Exception: No such file or directory - python c:/Ruby22-x64/lib/ruby/gems/2.2.0/gems/pygments.rb-0.6.1/lib/pygments/mentos.py in jekyll/_posts/2015-05-29-welcome-to-jekyll.markdown[0m
                    done.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jekyllのサイトを見直したらWindowsはサポートされていないとのこと。
けど、Windowsにセットアップする方法は検索したらたくさん出てきた。
Jekyllのサイトでも紹介されている&lt;a href=&#34;http://jekyll-windows.juthilo.com/&#34;&gt;&lt;strong&gt;Run Jekyll on Windows&lt;/strong&gt;&lt;/a&gt;というサイトの手順に従うとか、&lt;a href=&#34;https://github.com/madhur/PortableJekyll&#34;&gt;&lt;strong&gt;Portable Jekyll&lt;/strong&gt;&lt;/a&gt;という、WindowsでJekyllを動かすためのツールを集めたものを使うとか。&lt;/p&gt;

&lt;p&gt;後者は、Jekyllのインスタンスを含んでいて、将来にわたるJekyllのアップデートについていってくれるか怪しいので、前者を見てみる。&lt;/p&gt;

&lt;h4 id=&#34;4-run-jekyll-on-windowsを試す&#34;&gt;4. Run Jekyll on Windowsを試す&lt;/h4&gt;

&lt;p&gt;Run Jekyll on Windowsによると、Jekyllはデフォルトでsyntax highlighterの &lt;strong&gt;pygments.rb&lt;/strong&gt; なるものに依存していて、pygments.rbをWindowsで使うには &lt;strong&gt;Python&lt;/strong&gt; とそのモジュールである &lt;strong&gt;Pygments&lt;/strong&gt; などをインストールする必要があるのこと。&lt;/p&gt;

&lt;p&gt;とりあえずPythonを&lt;a href=&#34;https://www.python.org/downloads/windows/&#34;&gt;ここ&lt;/a&gt;からダウンロードしてインストール。バージョンは、3系はPygmentsがサポートしていないようなので2.7.10。
&lt;strong&gt;pip&lt;/strong&gt; なるPythonパッケージ管理ツールが要るとRun Jekyll on Windowsに書いてあるが、2.7.10にはデフォルトで入っていた。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python -m pip install Pygments&lt;/code&gt;を実行してPygmentsをインストール。これはどうもpygments.rbがラップしているものらしい。&lt;/p&gt;

&lt;p&gt;また、Jekyllにはauto-regenerationなる、ファイル変更を検知して自動ビルドする機能があって、Windowsでこれを使うには &lt;strong&gt;wdm&lt;/strong&gt; というgemが必要らしい。
以下をGemfileに追加して、&lt;code&gt;bundle install&lt;/code&gt;する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem &#39;wdm&#39;, &#39;~&amp;gt; 0.1.0&#39; if Gem.win_platform?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;したら以下のエラー。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c:\Ruby22-x64\lib\ruby\gems\2.2.0\gems\wdm-0.1.0\ext\wdm/rb_monitor.c:508: undefined reference to `rb_thread_blocking_region&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;どうも、&lt;a href=&#34;https://github.com/Maher4Ever/wdm/issues/18&#34;&gt;ここ&lt;/a&gt;によると、エラーメッセージにある &lt;strong&gt;rb_thread_blocking_region&lt;/strong&gt; というメソッドは、Ruby 2.0で非推奨になり2.2で消されたものらしい。&lt;/p&gt;

&lt;p&gt;wdmはもう数年更新されておらず、修正の見込みはなさそう。(後日見たら開発再開されてて、この問題も修正されていた。)&lt;/p&gt;

&lt;p&gt;Rubyをダウングレードするの面倒なので、試しにそのまま&lt;code&gt;jekyll serve&lt;/code&gt;したら以下のメッセージが出たけど動いた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Please add the following to your Gemfile to avoid polling for changes:
    gem &#39;wdm&#39;, &#39;&amp;gt;= 0.1.0&#39; if Gem.win_platform?
 Auto-regeneration: enabled for &#39;c:/Users/Kaito/mirrored_data/pleiades/workspace/kaitoy.github.io/hoge&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;auto-regenerationも動いている模様。実際ソースをいじったら自動で反映された。
よくわからないが、よしとする。&lt;/p&gt;

&lt;p&gt;実は、以下のエラー(上でも出てたやつ)はまだ出ている。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c:/Ruby22-x64/lib/ruby/gems/2.2.0/gems/posix-spawn-0.3.11/lib/posix/spawn.rb:164: warning: cannot close fd before spawn
&#39;which&#39; は、内部コマンドまたは外部コマンド、
操作可能なプログラムまたはバッチ ファイルとして認識されていません。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このwarningについてはRun Jekyll on Windowsには載っていないが、pygments.rbを0.5.0にダウングレードすればいいとの情報が&lt;a href=&#34;https://github.com/jekyll/jekyll/issues/2052&#34;&gt;ここ&lt;/a&gt;とかにある。&lt;/p&gt;

&lt;h2 id=&#34;5-jekyllとの決別&#34;&gt;5. Jekyllとの決別&lt;/h2&gt;

&lt;p&gt;この辺りまでJekyllをセットアップした後、JekyllのWindowsとの相性の悪さに嫌気がさしつつ、Jekyllで簡単にかっこいいサイトを作るためのツールなどを調べているうちに、Jekyllを使うのをやめた。それについては&lt;a href=&#34;https://www.kaitoy.xyz/2015/08/25/tools-for-jekyll/&#34;&gt;別のエントリ&lt;/a&gt;で書く。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>First Post</title>
          <link>https://www.kaitoy.xyz/2015/07/18/first-post/</link>
          <pubDate>Sat, 18 Jul 2015 13:10:37 -0600</pubDate>
          <author>Kaito Yamada</author>
          <guid>https://www.kaitoy.xyz/2015/07/18/first-post/</guid>
          <description>&lt;p&gt;初投稿。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;



&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-6244473643910448&#34;
     data-ad-slot=&#34;1845600530&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;ブログを立ち上げようと思ったきっかけは、&lt;a href=&#34;http://www.teamed.io/&#34;&gt;Teamed.io&lt;/a&gt;というCaliforniaのソフトウェアアウトソーシング(?)をやってる会社のCTO、
Yegor Bugayenko (yegor256)のブログのエントリ、&lt;a href=&#34;http://www.yegor256.com/2014/10/29/how-much-do-you-cost.html&#34;&gt;How Much Do You Cost?&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;これは、Teamed.ioがエンジニアに払うfeeを決める際の指標についてのエントリで、その指標の一つとして &lt;em&gt;Talks and Publications&lt;/em&gt; を挙げている。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Both blog articles and conference presentations make you much more valuable as a specialist.
Mostly because these things demonstrate that some people already reviewed your work and your talent.
And it was not just a single employer, but a group of other programmers and engineers.
This means that we also can rely on your opinions.&lt;/p&gt;

&lt;div style=&#34;font-size: 0.5em; text-align: right;&#34;&gt;&lt;cite&gt;引用元: &lt;a href=&#34;http://www.yegor256.com/2014/10/29/how-much-do-you-cost.html#talks-and-publications&#34;&gt;http://www.yegor256.com/2014/10/29/how-much-do-you-cost.html#talks-and-publications&lt;/a&gt;&lt;/cite&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;つまり、カンファレンスで発表したりブログで意見を発信すると、それらを見た様々な人たちによってレビューされフィードバックを受けることになるので、
そういった経験が多いエンジニアは、より洗練された考えや技術を持っているとみなせるということ。&lt;/p&gt;

&lt;p&gt;確かに、普段会社の同僚としか接しないので、自分の意見を広く発信してフィードバックを受けるのは刺激になりおもしろそうだしためになりそう。
ただそのためにはこのブログが広く読まれコメントをもらえるまでになる必要があるが、それはさておき、
文筆の練習として、また物事に対する理解を深めるためにも、書くということは有益であろう。備忘録にもなるし。&lt;/p&gt;

&lt;p&gt;因みに、Yegorはオブジェクト指向プログラミングの原理主義者で、ソフトウェア開発に対して非常に厳格で斬新な(異端な?)考え方を持っている。
それは例えば彼の以下のブログエントリに見られる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yegor256.com/2015/01/08/morning-standup-meetings.html&#34;&gt;Daily Stand-Up Meetings Are a Good Tool for a Bad Manager&lt;/a&gt; (スタンドアップミーティングはダメマネージャーが好む手法)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yegor256.com/2014/12/01/orm-offensive-anti-pattern.html&#34;&gt;ORM Is an Offensive Anti-Pattern&lt;/a&gt; (ORMはけしからんアンチパターン)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yegor256.com/2014/09/16/getters-and-setters-are-evil.html&#34;&gt;Getters/Setters. Evil. Period.&lt;/a&gt; (GetterやSetterは悪だ。以上。)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下で働くと苦労しそうなタイプな気はするが、言っていることは面白いし説得力もあるので、いくつかのエントリを和訳しておいおいここで紹介していこうかと思う。&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
