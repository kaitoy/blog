<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>To Be Decided </title>
    <link>https://www.kaitoy.xyz/tags/material-ui/</link>
    <language>en-us</language>
    <author>Kaito Yamada</author>
    <rights>(C) 2018</rights>
    <updated>2018-09-06 23:33:31 &#43;0900 JST</updated>

    
      
        <item>
          <title>React &#43; Reduxアプリケーションプロジェクトのテンプレートを作る ― その5: Material-UIとWebフォント</title>
          <link>https://www.kaitoy.xyz/2018/09/06/creating-react-redux-app-from-scratch-05/</link>
          <pubDate>Thu, 06 Sep 2018 23:33:31 JST</pubDate>
          <author>Kaito Yamada</author>
          <guid>https://www.kaitoy.xyz/2018/09/06/creating-react-redux-app-from-scratch-05/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt;と&lt;a href=&#34;https://redux.js.org/&#34;&gt;Redux&lt;/a&gt;を学ぶために、開発環境というかプロジェクトテンプレートをスクラッチから作っている。
(最終的な成果は&lt;a href=&#34;https://github.com/kaitoy/react-redux-scaffold&#34;&gt;GitHub&lt;/a&gt;に置いた。)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.kaitoy.xyz/2018/08/29/creating-react-redux-app-from-scratch-04/&#34;&gt;前回&lt;/a&gt;はCSS周りの処理系をセットアップした。&lt;/p&gt;

&lt;p&gt;



&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-6244473643910448&#34;
     data-ad-slot=&#34;1845600530&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/p&gt;

&lt;h1 id=&#34;既成reactコンポーネント&#34;&gt;既成Reactコンポーネント&lt;/h1&gt;

&lt;p&gt;前回まででHTMLもCSSもReactコンポーネント単位で書けるようになったんだけど、実際、自分で1からコンポーネントを書くのは、特にデザインセンスがない人にとっては辛い。
かっこいいUIコンポーネントを作りたいならデザイナーの協力が必要だけど、個人の開発などそれができない状況も多い。&lt;/p&gt;

&lt;p&gt;という問題を抱えた人たち向けなのかはわからないが、既成のReactコンポーネントセットが色々OSSで提供されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://material-ui.com/&#34;&gt;Material-UI&lt;/a&gt;: Googleの&lt;a href=&#34;https://material.io/design/&#34;&gt;マテリアルデザイン&lt;/a&gt;のReact実装。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://react.semantic-ui.com/&#34;&gt;Semantic UI React&lt;/a&gt;: &lt;a href=&#34;https://semantic-ui.com/&#34;&gt;Semantic UI&lt;/a&gt;のReactバインディング。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ant.design/docs/react/introduce&#34;&gt;antd&lt;/a&gt;: &lt;a href=&#34;https://ant.design/&#34;&gt;Ant Design&lt;/a&gt;のReact実装。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blueprintjs.com/&#34;&gt;Blueprint&lt;/a&gt;: 複雑でデータ量の多いUI向けに作られたReact UIツールキット。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://react-bootstrap.github.io/&#34;&gt;React-Bootstrap&lt;/a&gt;: &lt;a href=&#34;https://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt;のReactバインディング。現時点ではv4未対応。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://grommet.io/&#34;&gt;Grommet&lt;/a&gt;: HPEによるエンタープライズレディなデザインシステム。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.microsoft.com/en-us/fabric#/components&#34;&gt;Office UI Fabric React&lt;/a&gt;: OfficeなどのMicrosoft製品に使われているReactコンポーネントセット。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;今回はこの中でも圧倒的に人気なMaterial-UIを導入する。&lt;/p&gt;

&lt;h1 id=&#34;material-ui&#34;&gt;Material-UI&lt;/h1&gt;

&lt;p&gt;Material-UIは簡単に使える。
とりあえずコアパッケージをインストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;yarn add @material-ui/core
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;あとはパッケージに入っている色々なコンポーネントをMaterial-UIのドキュメント見ながら使えばいいだけ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; import React from &#39;react&#39;;
 import styled from &#39;styled-components&#39;;
 +import Button from &#39;@material-ui/core/Button&#39;;

 const Wrapper = styled.div`
   font-size: 5rem;
 `;

 const App = () =&amp;gt; (
   &amp;lt;Wrapper&amp;gt;
-    HOGE
+    &amp;lt;Button variant=&amp;quot;contained&amp;quot;&amp;gt;
+      HOGE
+    &amp;lt;/Button&amp;gt;
   &amp;lt;/Wrapper&amp;gt;
 );

 export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでただのテキストがボタンになった。&lt;/p&gt;

&lt;h1 id=&#34;css-web-fonts&#34;&gt;CSS Web Fonts&lt;/h1&gt;

&lt;p&gt;前節でいちおうMaterial-UI使えたけど、フォントをケアしてやるともう少しかっこよくなる。
Material-UIは&lt;a href=&#34;https://fonts.google.com/specimen/Roboto&#34;&gt;Robotoフォント&lt;/a&gt;を想定して作られているが、これはブラウザにデフォルトで入ってはいないので、そのままだとArialとかにフォールバックされちゃう。
のでRobotoフォントを導入する。&lt;/p&gt;

&lt;p&gt;フォントは&lt;a href=&#34;https://www.w3schools.com/css/css3_fonts.asp&#34;&gt;CSS Web Fonts&lt;/a&gt;の機能である&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/CSS/@font-face&#34;&gt;@font-face&lt;/a&gt;で、フォントファイルをブラウザにロードさせることで導入できる。
&lt;code&gt;@font-face&lt;/code&gt;で読み込むフォントファイル(i.e. &lt;code&gt;url()&lt;/code&gt;関数で指定するファイル)はwebpackでバンドルできる。&lt;/p&gt;

&lt;p&gt;Robotoフォントのフォントファイルはnpmで配布されていて、Yarnでプロジェクトにインストールできる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;yarn add typeface-roboto
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;フォントファイルの種類は、OTFとかTTFとかWOFFとかWOFF2とかいろいろあるけど、&lt;a href=&#34;https://www.6666666.jp/design/20160218/&#34;&gt;この記事&lt;/a&gt;などをみるに、WOFFだけ使えばよさげ。&lt;/p&gt;

&lt;p&gt;フォントファイルのバンドルは&lt;a href=&#34;https://github.com/webpack-contrib/url-loader&#34;&gt;url-loader&lt;/a&gt;を使う方法と&lt;a href=&#34;https://github.com/webpack-contrib/file-loader&#34;&gt;file-loader&lt;/a&gt;を使う方法とがある。&lt;/p&gt;

&lt;h2 id=&#34;url-loaderを使う方法&#34;&gt;url-loaderを使う方法&lt;/h2&gt;

&lt;p&gt;url-loaderを使う場合は、url-loaderとフォールバック用のfile-loaderをインストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yarn add -D url-loader file-loader
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;webpackのローダ設定は以下のようなのを追加すればいい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;(前略)
   module: {
     rules: [
(中略)
-      }
+      },
+      {
+        test: /\.(png|woff|woff2|eot|ttf|svg)$/,
+        include: [path.resolve(__dirname, &#39;node_modules/typeface-roboto&#39;)],
+        loader: &#39;url-loader&#39;,
+        options: {
+          limit: 100000,
+        },
+      },
     ],
   },
(後略)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;あとは、typeface-robotoパッケージ内のフォントファイルを指すようにCSSに@font-faceを書けばいい。
例えば、weightが300のWOFFファイルを読むなら以下のような感じ。&lt;/p&gt;

&lt;p&gt;src/fonts.css:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@font-face {
  font-family: &#39;Roboto&#39;;
  font-style: normal;
  font-display: swap;
  font-weight: 300;
  src: local(&#39;Roboto Light &#39;), local(&#39;Roboto-Light&#39;),
    url(&#39;../node_modules/typeface-roboto/files/roboto-latin-300.woff&#39;) format(&#39;woff&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これをどこかのJavaScriptでインポートしてやればいい。&lt;/p&gt;

&lt;p&gt;src/index.jsx:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; import React from &#39;react&#39;;
 import ReactDOM from &#39;react-dom&#39;;
 import App from &#39;./components/App&#39;;
+import &#39;./fonts.css&#39;;

 const root = document.getElementById(&#39;root&#39;);

 if (root) {
   ReactDOM.render(
     &amp;lt;App /&amp;gt;,
     root,
   );
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;けど、styled-componentsを使っている場合はurl-loaderは使えないみたいで、代わりにfile-loaderを使う必要がある。&lt;/p&gt;

&lt;h2 id=&#34;file-loaderを使う方法-styled-components&#34;&gt;file-loaderを使う方法 (styled-components)&lt;/h2&gt;

&lt;p&gt;file-loaderを使う場合は、file-loaderだけインストールすればいい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yarn add -D file-loader
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;webpackのローダ設定は以下のようなのを追加すればいい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;(前略)
   module: {
     rules: [
(中略)
-      }
+      },
+      {
+        test: /\.(png|woff|woff2|eot|ttf|svg)$/,
+        include: [path.resolve(__dirname, &#39;node_modules&#39;)],
+        loader: &#39;file-loader&#39;,
+      },
     ],
   },
(後略)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;で、&lt;a href=&#34;https://github.com/styled-components/styled-components/issues/233&#34;&gt;ここ&lt;/a&gt;にある通り、styled-componentsの&lt;a href=&#34;https://www.styled-components.com/docs/api#injectglobal&#34;&gt;injectGlobal&lt;/a&gt;というAPIを使って、以下のようにフォントファイルを読み込む。&lt;/p&gt;

&lt;p&gt;src/font.js:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { injectGlobal } from &#39;styled-components&#39;;
import roboto300 from &#39;../node_modules/typeface-roboto/files/roboto-latin-300.woff&#39;;

injectGlobal`
  /* roboto-300normal - latin */
  @font-face {
    font-family: &#39;Roboto&#39;;
    font-style: normal;
    font-display: swap;
    font-weight: 300;
    src:
      local(&#39;Roboto Light &#39;),
      local(&#39;Roboto-Light&#39;),
      url(&#39;${roboto300}&#39;) format(&#39;woff&#39;);
  }
`;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;あとはこれをどこかのJavaScriptでインポートしてやればいい。&lt;/p&gt;

&lt;p&gt;src/index.jsx:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; import React from &#39;react&#39;;
 import ReactDOM from &#39;react-dom&#39;;
 import App from &#39;./components/App&#39;;
+import &#39;./fonts&#39;;

 const root = document.getElementById(&#39;root&#39;);

 if (root) {
   ReactDOM.render(
     &amp;lt;App /&amp;gt;,
     root,
   );
 }
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    

  </channel>
</rss>
