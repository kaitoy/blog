<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>groovy on To Be Decided</title>
    <link>https://www.kaitoy.xyz/tags/groovy/</link>
    <description>Recent content in groovy on To Be Decided</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2015 Kaito Yamada</copyright>
    <lastBuildDate>Sun, 10 Apr 2016 00:05:27 -0600</lastBuildDate>
    
	<atom:link href="https://www.kaitoy.xyz/tags/groovy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pcap4J in Groovy</title>
      <link>https://www.kaitoy.xyz/2016/04/10/pcap4j-in-groovy/</link>
      <pubDate>Sun, 10 Apr 2016 00:05:27 -0600</pubDate>
      
      <guid>https://www.kaitoy.xyz/2016/04/10/pcap4j-in-groovy/</guid>
      <description>GroovyでPcap4Jを使ってパケットキャプチャしてみた。
GroovyからでもPcap4Jちゃんと動くよということを実証するのが主な目的。 また、さすがにそろそろMavenを卒業してGradle(下記)使おうと思うので、予習も兼ねている。

   (adsbygoogle = window.adsbygoogle || []).push({});  Groovyとは GroovyはJVM言語、つまりJavaのバイトコードにコンパイルされてJavaの実行環境で動くプログラミング言語のひとつ。 Javaのプログラマにとってとっつきやすい文法を保ちつつ、動的型付けを実現し、またRubyなどのスクリプト言語の記法や機能を取り入れ、生産性を高めている。
現在はApacheソフトウェア財団によって管理され、OSSとして開発が進められている。
WebアプリケーションフレームワークのGrails やビルドツールのGradleで採用されている。 Gradleは最近Javaプロジェクトのビルドツールの主流になっていて、Groovyはその定義ファイルを記述する言語として知名度が高いが、Groovyで開発されているプロジェクトとなるとあまり多くないようだ。 GitHubにホストされているGroovyプロジェクトは、2016/4/9現在 0.8%弱 (25,087/3,200,229) しかない。
なぜ人気がないのかはよく分からないが、少なくとも、長くて打ちにくい名前とダサいロゴは不評のようだ。
Groovyのインストール Windows 7にGroovy 2.4.6をインストールする。
本家サイトの手順に従い、Binary Releaseのアーカイブをダウンロードして、適当なところに展開して、展開したフォルダのパスを環境変数GROOVY_HOMEにセットし、%GROOVY_HOME%\binをPATHに追加するだけ。
Java 6以降が前提なので、JAVA_HOMEにJDK 1.7.0_17のパスをセットしておいた。JREでもいいはず。
パケットキャプチャ with Pcap4J in Java Pcap4Jでパケットキャプチャするコードを普通にJavaで書くと以下の様になる。
 これを実行すると、パケットキャプチャするネットワークインターフェースを選択し、5つのパケットをキャプチャしてタイムスタンプと共にコンソールに表示する。
パケットキャプチャ with Pcap4J in Groovy 上記処理をGroovyで書くと以下の様になる。
 メインクラスを書かなくていいところが大きい。 変数の型を書かなくていいのも楽。 ラムダ式でクロージャも作れるし補間文字列(String interpolation)も使える。
また、ここでは使っていないが、オープンクラスなどのメタプログラミングもサポートされている。
上記コードは、Pcap4J 1.6.2、Slf4J 1.7.12、JNA 4.2.1を使って、以下のコマンドで実行できることを確認した。
groovy -cp &amp;quot;pcap4j-core.jar;jna.jar;slf4j-api.jar;pcap4j-packetfactory-static.jar&amp;quot; Pcap4jLoop.groovy tcp  これはスクリプト的な実行方法だが、groovycコマンドで事前にコンパイルしてclassファイルを生成し、javaコマンドで実行することもできる。
困ったところ  本家サイトのドキュメントが分かり辛い。
頭から読んでいくと急にディープな部分に引き込まれ、なかなかコードを書き始められなかった。</description>
    </item>
    
  </channel>
</rss>