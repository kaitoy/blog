<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>To Be Decided </title>
    <link>https://www.kaitoy.xyz/tags/impress/index.js/</link>
    <language>en-us</language>
    <author>Kaito Yamada</author>
    <rights>(C) 2019</rights>
    <updated>2015-12-19 23:37:08 -0700 -0700</updated>

    
      
        <item>
          <title>impress.jsでのプレゼン資料作成をサポートするAtomパッケージ - impress</title>
          <link>https://www.kaitoy.xyz/2015/12/19/atom-impress/</link>
          <pubDate>Sat, 19 Dec 2015 23:37:08 -0700</pubDate>
          <author>Kaito Yamada</author>
          <guid>https://www.kaitoy.xyz/2015/12/19/atom-impress/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;&lt;strong&gt;Atom&lt;/strong&gt;&lt;/a&gt;のパッケージを作った話。&lt;/p&gt;

&lt;p&gt;ついでに、パッケージプロジェクト内で別のプロジェクトを取り込んで使いたい場合に、&lt;a href=&#34;https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB-%E3%82%B5%E3%83%96%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB&#34;&gt;Gitのサブモジュール&lt;/a&gt;を使ってはダメという話。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;



&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-6244473643910448&#34;
     data-ad-slot=&#34;1845600530&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/p&gt;

&lt;h2 id=&#34;impress-js&#34;&gt;impress.js&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/impress/impress.js&#34;&gt;&lt;strong&gt;impress.js&lt;/strong&gt;&lt;/a&gt;というJavaScriptライブラリがある。
HTML5とCSS3とJavaScriptでプレゼン資料を作るためのライブラリで、これを使うと、&lt;a href=&#34;https://products.office.com/ja-jp/powerpoint&#34;&gt;PowerPoint&lt;/a&gt;や&lt;a href=&#34;http://www.apple.com/jp/mac/keynote/&#34;&gt;Keynote&lt;/a&gt;といった従来のツールによるものからは一線を画す斬新な資料を作ることができる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://impress.github.io/impress.js/#/bored&#34;&gt;公式のデモ&lt;/a&gt;を見ればその魅力を堪能できる。&lt;/p&gt;

&lt;p&gt;デモを見ると分かるが、&lt;a href=&#34;https://prezi.com/&#34;&gt;&lt;strong&gt;Prezi&lt;/strong&gt;&lt;/a&gt;に触発されたライブラリだ。
Preziでも非常に新鮮な資料を作れるが、ほぼ有料で、また作成した資料をPreziのサーバに置かなければいけないので、仕事で使う資料作りには使いにくい。
その点impress.jsは、&lt;a href=&#34;https://ja.wikipedia.org/wiki/MIT_License&#34;&gt;MIT&lt;/a&gt;(と&lt;a href=&#34;https://ja.wikipedia.org/wiki/GNU_General_Public_License&#34;&gt;GPLv2&lt;/a&gt;)で公開されていて自由に無料で使えるのがよい。&lt;/p&gt;

&lt;p&gt;ただし、Preziがスライドという概念から大きく脱却しているのに対して、実のところimpress.jsで作れる資料はあくまでスライドベースだ。
従来のものに比べてスライドの並びに制約がなく、スライド間の遷移がダイナミックというだけだ。
impress.jsでもまあ工夫すればPreziのような資料は作れるが。
独自のオーサリングツール/ビューワに依存するPreziに対し、impress.jsは標準的なHTML/CSS/JavaScriptにだけ依存しているので、&lt;a href=&#34;https://jquery.com/&#34;&gt;jQuery&lt;/a&gt;などのWeb技術を活用してスライドを作れるという副次的なメリットはある。&lt;/p&gt;

&lt;p&gt;impress.jsは、2012年に最初のバージョンが公開されてからもう4年近く経つが、未だにそれほど広く使われている様子はない。
PowerPointが幅を利かせているせいもあるだろうが、その使い辛さから利用をためらう人が多いのではないだろうか。
impress.jsはあまりドキュメントが充実しているとは言えない。
&lt;a href=&#34;https://github.com/impress/impress.js#how-to-use-it&#34;&gt;GitHubに公開されているREADME&lt;/a&gt;には、使い方はソースを見よ、それで分からないなら使うなとある。
さらにソース中には、impress.jsを使うには、HTMLとCSSのスキルに加えてデザイナーのセンスも必要とある。
かなりハードルを上げている。&lt;/p&gt;

&lt;p&gt;このハードルをクリアしていたとしても、実際、impress.jsで資料を作るのはPowerPointに比べて10倍は大変だ。
impress.jsはスライド(impress.js用語ではステップ)間の遷移を制御してくれるだけで、各スライドのコンテンツを作るという部分に関してはなんのサポートも提供しない。
テンプレートもなければ、表やグラフを書く機能もなく、アニメーションも作れない。
そういうことをしたければ、自分で別途ライブラリを探して使うなりしないといけない。&lt;/p&gt;

&lt;p&gt;ちょっとした図を書くにも、テキストエディタでちまちまHTMLとCSSを書いて、ブラウザで表示して確認して、思った通りになっていなければディベロッパツールでデバッグして、Web UIでも書いていたんだっけという気になってくる。&lt;/p&gt;

&lt;h2 id=&#34;impressパッケージ&#34;&gt;impressパッケージ&lt;/h2&gt;

&lt;p&gt;そんな負担を少しでも軽くしたいと思って作ったのが&lt;a href=&#34;https://atom.io/packages/impress&#34;&gt;impressパッケージ&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;同じ目的のツール(i.e. オーサリングツール)は実は既に&lt;a href=&#34;https://github.com/impress/impress.js/wiki/Examples-and-demos#authoring-tools&#34;&gt;いくつかあった&lt;/a&gt;。
なかでも、&lt;a href=&#34;https://github.com/regebro/hovercraft&#34;&gt;Hovercraft!&lt;/a&gt;というのが高機能で便利そう。
ただ、これらはPowerPointほど自在にスライドを作れるまでには至っておらず、結局は仕上げにHTML/CSSを手でいじる作業が必要になる。(と思う。)
また、jQueryのプラグイン使ってかっこいいことしたいとか言う場合にも、手でコードを書かなければいけない。&lt;/p&gt;

&lt;p&gt;つまりテキストエディタを開かなければいけない。よってAtomを起動することになる。(私は。)&lt;/p&gt;

&lt;p&gt;であれば、オーサリングツールもAtomに統合されていた方が便利なんじゃないの?
というのがimpressパッケージを作った動機。&lt;/p&gt;

&lt;p&gt;まだ機能は少なくて、新規資料プロジェクトの雛形生成、&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/atom-impress/new_project.gif&#34; alt=&#34;new_project&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;ステップをリスト表示するビュー表示、&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/atom-impress/step_list_view.gif&#34; alt=&#34;step_list_view&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;プレビューができるだけ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.kaitoy.xyz/images/atom-impress/preview.gif&#34; alt=&#34;preview&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;ゆくゆくは、GUIでステップの配置や角度を編集する機能、GUIでステップ内の図を作成する機能を作りたい。
あとできればアニメーションを付ける機能とかも。
Hovercraft!みたいにHTML書かなくてもいいよ、というのを目指すつもりはなくて、あくまでもコーダーのための、コーディングを補助するツールを目指す。&lt;/p&gt;

&lt;h2 id=&#34;パッケージのサブモジュール&#34;&gt;パッケージのサブモジュール&lt;/h2&gt;

&lt;p&gt;impressパッケージは、新規資料プロジェクトの雛形生成機能などのため、impress.jsプロジェクト(の&lt;a href=&#34;https://github.com/kaitoy/impress.js&#34;&gt;フォーク&lt;/a&gt;)をサブモジュールとしてとりこんでいる。&lt;/p&gt;

&lt;p&gt;最初はGitのサブモジュールコマンド(&lt;code&gt;git submodule&lt;/code&gt;)を使って取り込んでいて、上手くいっているように見えたが、パブリッシュ後に次のような問題が発生した。
即ち、試しにimpressパッケージをインストールしてみたら、サブモジュールのフォルダの中身がからっぽだった。&lt;/p&gt;

&lt;p&gt;これは、Atomのパッケージマネージャがパッケージを&lt;a href=&#34;https://help.github.com/articles/about-releases/&#34;&gt;GitHub Releases&lt;/a&gt;から&lt;a href=&#34;https://www.kaitoy.xyz/2015/12/02/unpublish-atom-package/#%E6%B3%A8%E6%84%8F%E3%81%99%E3%81%B9%E3%81%8D%E7%82%B9-3-%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%81%AE%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5&#34;&gt;ダウンロードしてインストールする&lt;/a&gt;からだ。サブモジュールの中身はGitHub Releasesに登録されるアーカイブに含まれない。このGitHub Releasesの挙動は、サブモジュールを含むGitプロジェクトをクローンした場合、&lt;a href=&#34;https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB-%E3%82%B5%E3%83%96%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB#%E3%82%B5%E3%83%96%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%82%92%E5%90%AB%E3%82%80%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%B3&#34;&gt;デフォルトではサブモジュールはクローンされない&lt;/a&gt;というGitサブモジュールの仕様に関係しているのかもしれない。&lt;/p&gt;

&lt;p&gt;この問題をきっかけにGitサブモジュールについてちょっと調べてみた。
&lt;a href=&#34;https://www.oreilly.co.jp/books/9784873114408/&#34;&gt;蝙蝠本&lt;/a&gt;によると、Git開発チームはあまりサブモジュールコマンドの開発に熱心ではなく真面目に作らなかったらしい。
また、&lt;a href=&#34;http://japan.blogs.atlassian.com/2014/03/alternatives-to-git-submodule-git-subtree/&#34;&gt;あるブログ&lt;/a&gt;によればサブモジュールコマンドは大分まえからオワコンらしい。このブログによれば、今は多くの場合&lt;code&gt;git subtree&lt;/code&gt;を使うのがいいとのこと。&lt;code&gt;git subtree&lt;/code&gt;は蝙蝠本にも&lt;a href=&#34;https://git-scm.com/book/en/v2&#34;&gt;Pro Git&lt;/a&gt;にも載ってないのだが。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git subtree&lt;/code&gt;でプロジェクトを取り込んだ場合、親プロジェクトのクローン時にサブプロジェクトもデフォルトでクローンされる仕様だ。
(というか正しくは、サブモジュールと違って、子プロジェクトが親プロジェクトにマージされているから、一緒にクローンされるというだけ。)
これを使ってimpressパッケージを構成しなおしてみたら件の問題が解決した。
因みにやりかたは、impressパッケージプロジェクトのルートに&lt;code&gt;impress.js&lt;/code&gt;というフォルダを作った後、以下のコマンドを実行しただけ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git subtree add --prefix impress.js git@github.com:kaitoy/impress.js.git master --squash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;ということで、Atomのパッケージに別のプロジェクトを取り込んで使いたい場合は、&lt;code&gt;git submodule&lt;/code&gt;ではなく、&lt;code&gt;git subtree&lt;/code&gt;を使わないといけないという教訓を得た。&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
