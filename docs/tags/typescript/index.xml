<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>typescript on To Be Decided</title>
    <link>https://www.kaitoy.xyz/tags/typescript/</link>
    <description>Recent content in typescript on To Be Decided</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2015 Kaito Yamada</copyright>
    <lastBuildDate>Mon, 26 Nov 2018 16:09:14 +0900</lastBuildDate>
    
	<atom:link href="https://www.kaitoy.xyz/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>React &#43; Reduxアプリケーションプロジェクトのテンプレートを作る ― その11: FlowからTypeScriptへ移行</title>
      <link>https://www.kaitoy.xyz/2018/11/26/creating-react-redux-app-from-scratch-11/</link>
      <pubDate>Mon, 26 Nov 2018 16:09:14 +0900</pubDate>
      
      <guid>https://www.kaitoy.xyz/2018/11/26/creating-react-redux-app-from-scratch-11/</guid>
      <description>ReactとReduxを学ぶために、開発環境というかプロジェクトテンプレートをスクラッチから作っている。 (最終的な成果はGitHubに置いた。)
前回はCode Splitting、Flow、Jest、Enzymeをセットアップした。
前回でこのシリーズを終わりにするつもりだったけど、型システムをFlowからTypeScriptに移行したのでそれについて書く。
   (adsbygoogle = window.adsbygoogle || []).push({});  TypeScript TypeScriptはMicrosoft製のAltJS。 もともとはCoffeeScriptのように言語の機能面(e.g. class構文やアロー関数)を補強しつつ、静的型付けをサポートする言語だったが、最近はECMAScriptが前者をカバーしてるので、後者を主な目的として使う人が多い。
2012年に誕生した言語で、同様に静的型付けをサポートするFlowよりも2歳ほど年上。
TypeScript vs Flow 個人的には、静的型付けだけを目的にするならAltJSである必要はなく、静的型付けだけを補完するFlowのほうが筋がいいような気がする。 TypeScriptはECMAScriptの進化に追従すべく、追加される機能や構文をサポートするためのエンハンスを繰り返しているが、そこはBabelに任せて静的型付けに注力したらいいような。
とはいえ、以下のような点を鑑み、結局TypeScriptを選択した。
 TypeScriptの方が人気  GitHubのプロジェクトのスター数はTypeScriptが4万超えでFlowが2万弱。 観測している限り、FlowからTypeScriptへ移行したというのは聞くが、逆は聞かない。 人気があるということはコミュニティやエコシステムが大きいということ。  TypeScriptがノってる  BabelやCreate React AppがTypeScriptをサポートして来ていて、なんだか時流にのっている。  Flowは型定義ファイルの管理方法が微妙  Flowはflow-typedという専用のツールを使ってファイルをダウンロードし、ダウンロードしたものをGitとかのVCSでバージョン管理するというやりかた。 TypeScriptはnpmで管理されてるので、Yarnでダウンロードもバージョン管理もできる。VCSのリポジトリに自前のコードしか入れないで済むのもいい。  TypeScriptの方が型定義ファイルが沢山提供されてる  Flowの10倍くらいある。  TypeScriptの方がエラーメッセージが分かりやすい  というのをどこかで聞いた。  Flowの方が段階的に型を導入できる、というのは昔の話  今はTypeScriptもオプションによって段階的に導入できるというのが定評。 そもそも最初から型付けするならどうでもいい。  Flowの方が厳密な型チェックしてくれる、というのも昔の話  TypeScriptが追い付いてきて、今はほぼ同程度らしい。  TypeScript+VSCodeの開発体験が最高すぎるらしい  どっちもMicrosoft製なので。  TypeScriptの方がドキュメントが充実してる TypeScriptの方が、いざというときにソースが読みやすい  TypeScriptはTypeScriptで実装されてて、FlowはOCamlで実装されてる。   参考:</description>
    </item>
    
  </channel>
</rss>