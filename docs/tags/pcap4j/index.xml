<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pcap4j on To Be Decided</title>
    <link>https://www.kaitoy.xyz/tags/pcap4j/</link>
    <description>Recent content in pcap4j on To Be Decided</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2015 Kaito Yamada</copyright>
    <lastBuildDate>Sat, 19 Nov 2016 11:41:07 -0700</lastBuildDate>
    
	<atom:link href="https://www.kaitoy.xyz/tags/pcap4j/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Currently Pcap4J Doesn&#39;t Work on Bash on Windows</title>
      <link>https://www.kaitoy.xyz/2016/11/19/pcap4j-doesnt-work-on-bow-yet/</link>
      <pubDate>Sat, 19 Nov 2016 11:41:07 -0700</pubDate>
      
      <guid>https://www.kaitoy.xyz/2016/11/19/pcap4j-doesnt-work-on-bow-yet/</guid>
      <description>TL;DR I&amp;rsquo;ve attempted to run Pcap4J on Bash on Windows (BoW) but it didn&amp;rsquo;t work due to lack of support for network staff in BoW.

   (adsbygoogle = window.adsbygoogle || []).push({});  What&amp;rsquo;s Bash on Windows Bash on Windows is a feature released in Windows 10 Anniversary Update to add Linux fanctionalities to Windows.
With this feature, we can run Bash and several Linux commands on Windows.</description>
    </item>
    
    <item>
      <title>Pcap4J on Nano Server on Hyper-V Containers on Windows 10 on VMware Playerにトライ</title>
      <link>https://www.kaitoy.xyz/2016/09/15/pcap4j-on-hyper-v-container-on-win10/</link>
      <pubDate>Thu, 15 Sep 2016 13:56:35 -0600</pubDate>
      
      <guid>https://www.kaitoy.xyz/2016/09/15/pcap4j-on-hyper-v-container-on-win10/</guid>
      <description>Pcap4Jが動くHyper-VコンテナをWindows 10上でビルドしようとしたけど3合目あたりで息絶えた話。

   (adsbygoogle = window.adsbygoogle || []).push({});  Hyper-V Containersとは Hyper-V Containersは、MicrosoftによるWindowsネイティブなコンテナ技術であるWindows Containersの一種で、これによるコンテナは、同じくWindows Containersの一種であるWindows Server Containersのものに比べて、より厳密に隔離されている分、起動コストが高い。
実体はDockerそのもので、コンテナイメージはDocker Hubからpullできるし、コンテナの操作や管理はdockerコマンドでやる。(昔はコンテナ操作用PowerShellコマンドレットもあったが、不評だったので廃止したようだ。) ソースもLinuxとWindowsで一本化されている。
Windows 10のAnniversary Updateで正式にリリースされたが、なんだかあまり注目されていない気がする。
Docker for Windowsとは全く別物なので注意。
Hyper-V Containersのインストール (on VMware Player) 自前のPCが5年前に買ったdynabookでWindows 10をサポートしていないので、VMware PlayerのVM上のWindows 10にHyper-V Containersをインストールしてみる。
VMは、Windows 7に入れたVMware Workstation 11.1.0 build-2496824に付属の VMware Player 7.1.0 build-2496824で作ったもの。 VMのバージョンは11.0。 2CPUでメモリは2.5GB。 ネットワークインターフェースはNAT。 このVMを、Hyper-Vが使えるように設定しておく。
この記事にしたがい、Windows 10の評価版をダウンロード。 今公開されている評価版はAnniversary Update適用済みのバージョン1607で、Hyper-V Containersをサポートしている。
これをさっき作ったVMにインストール。
Windows 10を起動し、以下、Windows Containers on Windows 10に従って進める。
 containers機能有効化
PowerShellプロンプトを管理者権限でひらき、以下のコマンドでcontainers機能を有効化。
PS C:\Windows\system32&amp;gt;Enable-WindowsOptionalFeature -Online -FeatureName containers -All  1分程度経つと再起動を促されるので再起動。</description>
    </item>
    
    <item>
      <title>オープンソースプロジェクトのすゝめ</title>
      <link>https://www.kaitoy.xyz/2016/08/21/an-encouragement-of-open-sourcing/</link>
      <pubDate>Sun, 21 Aug 2016 20:54:12 -0600</pubDate>
      
      <guid>https://www.kaitoy.xyz/2016/08/21/an-encouragement-of-open-sourcing/</guid>
      <description>人は生まれながらにして貴賤の別なく、ただオープンソースプロジェクトを勤めて物事をよく知る者が貴人となるなり。
昔、偉い人がそんな感じのことを言っていたような。
私がGitHubで開発しているライブラリ、Pcap4J のスターの数がつい先日 200 に達したのを記念して、これまでどんな活動をしてきたか、この活動によって何を得たかなどについて書きたい。
願わくは、この記事に触発されてオープンソースプロジェクトを始める人のあらんことを。

   (adsbygoogle = window.adsbygoogle || []).push({});  Pcap4Jとは？ Pcap4Jは、パケットキャプチャとパケット解析をするJavaのライブラリ。 ニッチ。
ただ最近になってビッグデータ解析技術が発達し、大量のパケットをリアルタイムで解析してシステムや運用にフィードバックするというのが現実的になってきたので、パケットキャプチャへの注目が高まってきている雰囲気がある。 こういう分野ではJavaがまだかなり人気なのもあってワンチャンある。
パケットキャプチャの部分は pcap のラッパ。 パケット解析の部分は割とプラガブルで、外からプロトコル追加などのカスタマイズができるはできるんだけど、作りのせいなのかJavaなせいなのか解析器を書くのが結構つらい。
競合は jpcap や jNetPcap など。 Google.comでjava packet captureと検索するとだいたいjpcap、Pcap4J、jNetPcapの順で表示される。
打倒jpcap。
数字で見るPcap4Jプロジェクト Pcap4Jリポジトリの一番古いコミットは 2011/12/18。 東日本大震災後の節電施策として実施された休日シフト中にコーディングしていた覚えがあるので、多分2011年夏くらいから開発していたんだけど、とりあえずこの最古のコミットをプロジェクトの開始とすると、スターが200になった 2016/8/11 まで 1698日 かかったことになる。 約 0.118個/日。遅い…
コミット数は 559個。ほとんどが自前のコミット。 プロジェクト成長過程の動画を Gource というツールで生成してみたが、一人でかけずりまわっているのがよく分かる。
  コミット頻度は約 0.33個/日 で、だいたい3日に1コミット。 思っていたより多いけど、胸張れるほどの頻度ではない。
リリースは 17個 で、約 0.30個/月。少ない…
Issuesが 52個、プルリクエストが 16個。 自分ではIssuesもプルリクエストもあまり作らないので、ほとんどが他人からのもの。 ちゃんとチケット駆動にしてトレーサビリティを確保しておくべきだったと後悔している。 けど面倒だし今更なので今後も適当にコミットしちゃう。
あとはWatchが 28人、Forkが 66個、コントリビュータが 7人。</description>
    </item>
    
    <item>
      <title>Windows Server 2016 TP5でWindows Containersにリトライ</title>
      <link>https://www.kaitoy.xyz/2016/07/11/windows_containers_on_tp5/</link>
      <pubDate>Mon, 11 Jul 2016 00:30:33 -0600</pubDate>
      
      <guid>https://www.kaitoy.xyz/2016/07/11/windows_containers_on_tp5/</guid>
      <description>Windows Server 2016のTechnical Preview 5(TP5)が公開されていたので、 TP4でバグに阻まれて挫折した、Windows ContainersでPcap4Jを使ってパケットキャプチャする試みにリトライした話。

   (adsbygoogle = window.adsbygoogle || []).push({});  OSセットアップ TP4のときと同じ環境。
以降はWindows Server Containersのクイックスタートガイドに沿ってセットアップを進める。 TP4からは大分変わっていて、単一のPowershellスクリプトを実行する形式から、Powershellのコマンドレットを逐次手動実行する形式になっている。 面倒だけど何やってるかわかりやすくて好き。
コンテナ機能のインストール  管理者権限のパワーシェルウィンドウを開く
コマンドプロンプトから以下のコマンドを実行。
powershell start-process powershell -Verb runas  コンテナ機能のインストール
開いた青いパワーシェルウィンドウで以下のコマンドを実行するとコンテナ機能がインストールされる。
Install-WindowsFeature containers  数分で終わる。
インストールされたのはHyper-V ContainersじゃなくてWindows Server Containersの方。 クイックスタートガイドをみると、前者がWindows 10向け、後者がWindows Server向けというように住み分けされているっぽい。TP4では両方ともWindows Serverで使えたんだけど。
 再起動
変更を有効にするために再起動が必要。
Restart-Computer -Force   Dockerインストール Dockerは、コンテナイメージの管理やコンテナの起動などもろもろの機能を提供するDockerデーモンと、その機能を利用するためのCLIを提供するDockerクライアントからなる。この節ではそれら両方をインストールする。
 Dockerインストールフォルダ作成
管理者権限のパワーシェルウィンドウを開いて、以下のコマンドでDockerインストールフォルダを作成。
New-Item -Type Directory -Path &#39;C:\Program Files\docker\&#39;  Dockerデーモンインストール
まずはデーモンの方をインストール。</description>
    </item>
    
    <item>
      <title>Pcap4J in Kotlin</title>
      <link>https://www.kaitoy.xyz/2016/04/16/pcap4j-in-kotlin/</link>
      <pubDate>Sat, 16 Apr 2016 11:09:53 -0600</pubDate>
      
      <guid>https://www.kaitoy.xyz/2016/04/16/pcap4j-in-kotlin/</guid>
      <description>Groovyに続いて、KotlinでPcap4Jを使ってパケットキャプチャしてみた。
KotlinからでもPcap4Jちゃんと動くよということを実証するのが主な目的。 また、今後JavaなアプリはKotlinで書こうかと思っているので、その予習も兼ねている。

   (adsbygoogle = window.adsbygoogle || []).push({});  Kotlinとは KotlinはJVM言語、つまりJavaのバイトコードにコンパイルされてJavaの実行環境で動くプログラミング言語のひとつ。 IntelliJ IDEAで有名なJetBrains社によってOSSとして開発されている。
2011年に生まれた新しめな言語で、2016/2/17にv1がリリースされ、主にAndroidアプリの開発用として注目されている。
「実用的」であることを売りにしていて、つまり少ない学習コストで導入でき、既存のJavaコードやMavenなどのツールとの相互運用性を持つとされている。 IntelliJ IDEA、Android Studio、Eclipseといった主要なIDEのサポートもあり、開発環境は整っている。 v1以降の後方互換性の維持も表明されていて、長期サポートが必要な製品開発にも堪える。
さらに、厳格な静的型付けやNullable/Non-Null型などにより安全性を確保しつつ、型推論やラムダ式などで生産性を高めている。
Javaのバイトコードだけでなく、JavaScriptを生成するバックエンドを持っているのも大きな特徴。 ユースケースがよく分からないが。
GitHubにホストされているKotlinプロジェクトは、2016/4/15現在、全体の 0.1% (3493&amp;frasl;3215549) しかない。 v1のリリースは結構注目を集めたので、この割合は今後増えていくと期待される。
Kotlinのインストール チュートリアルに従えば、IDEやテキストエディタ+コマンドラインの環境を整えてHello Worldを書いて実行するところまで簡単にできる。 筆者はEclipse(Mars)とコマンドラインの環境をWindows 7上で作った。 Kotlinのバージョンは1.0.1-2。
コマンドラインについては、GitHub Releasesからアーカイブをダウンロードして、適当なところに展開してbinフォルダにパスを通すだけ。 前提となるJavaについては、環境変数JAVA_HOMEを設定するか、javaコマンドにパスを通せばいい模様。
因みにKotlinの書き方は、Kotlin Koansという例題集をオンラインのIDEで解きながらを学ぶことができる。
パケットキャプチャ with Pcap4J in Java Pcap4Jでパケットキャプチャするコードを普通にJavaで書くと以下の様になる。 (Groovyの時のと一緒。)
 これを実行すると、パケットキャプチャするネットワークインターフェースを選択し、5つのパケットをキャプチャしてタイムスタンプと共にコンソールに表示する。
パケットキャプチャ with Pcap4J in Kotlin 上記処理をKotlinで書くと以下の様になる。
 メインクラスはGroovy同様書かなくていいが、main関数は必要。
型推論があってとても楽。 ラムダ式、補間文字列(String interpolation)、名前付き引数といったモダンめな機能は普通に使える。 (名前付き引数はJavaで書いたメソッドをKotlinから呼ぶときは使えない。)
オープンクラスを実現する機能であるExtensionsをPcapHandleに使ってみた。 なんだか便利そう。
Nullable/Non-Null型がすごい。言語仕様でNullPointerExceptionが発生しないように守ってくれる。 例えばfilterは宣言の時点では初期化文でnullが入る可能性があるのでNullableなStringという型に推論されるが、filter?.letというNullチェックをするメソッドに渡したブロック内では自動でNon-NullなStringにキャストされ、filter.lengthを安全に評価できるようになっている。 Nullチェックをしないでfilter.lengthと書くとコンパイルエラーになる。すごい。
けどJavaのコードから返ってくるオブジェクトは普通、プラットフォーム型というものになり、このNullセーフな仕組みが働かない。 これに対してはNull可能性アノテーションを使えば幸せになれるらしい。</description>
    </item>
    
    <item>
      <title>Pcap4J in Groovy</title>
      <link>https://www.kaitoy.xyz/2016/04/10/pcap4j-in-groovy/</link>
      <pubDate>Sun, 10 Apr 2016 00:05:27 -0600</pubDate>
      
      <guid>https://www.kaitoy.xyz/2016/04/10/pcap4j-in-groovy/</guid>
      <description>GroovyでPcap4Jを使ってパケットキャプチャしてみた。
GroovyからでもPcap4Jちゃんと動くよということを実証するのが主な目的。 また、さすがにそろそろMavenを卒業してGradle(下記)使おうと思うので、予習も兼ねている。

   (adsbygoogle = window.adsbygoogle || []).push({});  Groovyとは GroovyはJVM言語、つまりJavaのバイトコードにコンパイルされてJavaの実行環境で動くプログラミング言語のひとつ。 Javaのプログラマにとってとっつきやすい文法を保ちつつ、動的型付けを実現し、またRubyなどのスクリプト言語の記法や機能を取り入れ、生産性を高めている。
現在はApacheソフトウェア財団によって管理され、OSSとして開発が進められている。
WebアプリケーションフレームワークのGrails やビルドツールのGradleで採用されている。 Gradleは最近Javaプロジェクトのビルドツールの主流になっていて、Groovyはその定義ファイルを記述する言語として知名度が高いが、Groovyで開発されているプロジェクトとなるとあまり多くないようだ。 GitHubにホストされているGroovyプロジェクトは、2016/4/9現在 0.8%弱 (25,087/3,200,229) しかない。
なぜ人気がないのかはよく分からないが、少なくとも、長くて打ちにくい名前とダサいロゴは不評のようだ。
Groovyのインストール Windows 7にGroovy 2.4.6をインストールする。
本家サイトの手順に従い、Binary Releaseのアーカイブをダウンロードして、適当なところに展開して、展開したフォルダのパスを環境変数GROOVY_HOMEにセットし、%GROOVY_HOME%\binをPATHに追加するだけ。
Java 6以降が前提なので、JAVA_HOMEにJDK 1.7.0_17のパスをセットしておいた。JREでもいいはず。
パケットキャプチャ with Pcap4J in Java Pcap4Jでパケットキャプチャするコードを普通にJavaで書くと以下の様になる。
 これを実行すると、パケットキャプチャするネットワークインターフェースを選択し、5つのパケットをキャプチャしてタイムスタンプと共にコンソールに表示する。
パケットキャプチャ with Pcap4J in Groovy 上記処理をGroovyで書くと以下の様になる。
 メインクラスを書かなくていいところが大きい。 変数の型を書かなくていいのも楽。 ラムダ式でクロージャも作れるし補間文字列(String interpolation)も使える。
また、ここでは使っていないが、オープンクラスなどのメタプログラミングもサポートされている。
上記コードは、Pcap4J 1.6.2、Slf4J 1.7.12、JNA 4.2.1を使って、以下のコマンドで実行できることを確認した。
groovy -cp &amp;quot;pcap4j-core.jar;jna.jar;slf4j-api.jar;pcap4j-packetfactory-static.jar&amp;quot; Pcap4jLoop.groovy tcp  これはスクリプト的な実行方法だが、groovycコマンドで事前にコンパイルしてclassファイルを生成し、javaコマンドで実行することもできる。
困ったところ  本家サイトのドキュメントが分かり辛い。
頭から読んでいくと急にディープな部分に引き込まれ、なかなかコードを書き始められなかった。</description>
    </item>
    
    <item>
      <title> ズンドコキヨシ with Pcap4J - ZUNDOKOプロトコルを実装してみた</title>
      <link>https://www.kaitoy.xyz/2016/03/19/zundoko-kiyoshi-with-pcap4j/</link>
      <pubDate>Sat, 19 Mar 2016 11:47:03 -0600</pubDate>
      
      <guid>https://www.kaitoy.xyz/2016/03/19/zundoko-kiyoshi-with-pcap4j/</guid>
      <description>先週くらいから巷でズンドコズンドコ騒いでいると思ってはいたが、昨日ようやくその元ネタを見た。 以下のツイートだ。
Javaの講義、試験が「自作関数を作り記述しなさい」って問題だったから
「ズン」「ドコ」のいずれかをランダムで出力し続けて「ズン」「ズン」「ズン」「ズン」「ドコ」の配列が出たら「キ・ヨ・シ！」って出力した後終了って関数作ったら満点で単位貰ってた
&amp;mdash; てくも (@kumiromilk) 2016年3月9日 
面白い。 巷ではこれをいろんな言語で実装したりしているみたいでさらに面白い。
私もこのビッグウェーブに乗らないわけにいかないので、専門分野であるネットワーク周りを開拓しようと思い、ZUNDOKOプロトコルというものを考案して実装してみた。書いたソースはGitHubにおいた。

   (adsbygoogle = window.adsbygoogle || []).push({});  ZUNDOKOプロトコル クライアントはサーバに「ズン」か「ドコ」を送る。
サーバは「ズン」を4回受信した後に「ドコ」を受信するとクライアントに「キ・ヨ・シ！」を返す。
クライアント/サーバ間でやり取りするメッセージ(Zundokoパケット)のフォーマットは下図。
 0 15 31 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | zundoko (null-terminated string) | | | | | | | | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  要はzundokoフィールドがあるだけ。 このzundokoフィールドは20 byte固定長で、NULL (0x00)で終わるUTF-8の文字列を保持する。
このメッセージを運ぶ下位レイヤはEthernetで、EtherTypeは0x01FF。
Ethernetにした理由は実装(下記)が楽だから。 EtherTypeはIANAでExperimentalとされている範囲から適当に選んだ。もちろんIANAに登録などはしていない。
因みに、Ethernetヘッダを加えた、クライアント/サーバ間でやり取りする完全なパケットは以下の様になる。(プリアンブルとかは除く。)
 0 15 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Dst Hardware Address | + + | | + + | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Src Hardware Address | + + | | + + | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | EtherType (0x01FF) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | zundoko | | (null-terminated string) | | | | | | | | | | | | | | | | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | padding | | |  実装 Pcap4Jを使ってクライアントとサーバを実装した。 書いたのは以下の3つのクラス。(といくつかのインナークラス。)</description>
    </item>
    
    <item>
      <title>Pcap4J Meets Windows Containers</title>
      <link>https://www.kaitoy.xyz/2016/01/22/pcap4j-meets-windows-containers/</link>
      <pubDate>Fri, 22 Jan 2016 17:46:43 -0700</pubDate>
      
      <guid>https://www.kaitoy.xyz/2016/01/22/pcap4j-meets-windows-containers/</guid>
      <description>Windows Containers で Pcap4J のコンテナをビルドしてみた話。

   (adsbygoogle = window.adsbygoogle || []).push({});  Windows Containersとは Windows Containersは、MicrosoftがDocker, Incと提携して開発しているコンテナ技術で、Windows版Dockerとも言われる機能。 今年リリースされる Windows Server 2016 に実装される予定で、その3つめのテクニカルプレビューである Windows Server 2016 Technical Preview 3 (2015/8/19公開)から評価できるようになった。
Windows Containersには次の二種類がある。
 Windows Server Containers
プロセスと名前空間の分離を実現する機能で、これによるコンテナはカーネルをホストと共有する。 つまり本家Dockerに近い形の機能。
 Hyper-V Containers
それぞれのコンテナを軽量化されたHyper-Vの仮想マシンっぽいものの上で動かす機能。 このコンテナの実行にはHyper-Vが必要。 Windows Server Containersよりコンテナ間の分離性が高く、カーネルの共有もしないが、そもそもそれってコンテナなの?
  どちらも同じようなインターフェースで操作でき、このインターフェースにはPowershellのコマンドレットとDockerコマンドの二種類がある。
より詳しくは、Microsoftによる解説や@ITのこの記事がわかりやすい。 また、Qiitaのこの記事がDockerとWindows Server Containersのアーキテクチャを詳細に説明していて面白い。
Windows Containersセットアップ まず、Windows 7 x64のノートPCにVMware Player 7.1.0を入れてWindows 10 x64用のVM(CPU2つとメモリ2.5GB)を作り、そこに2015/11/19に公開された Windows Server 2016 Technical Preview 4 をインストール。 コマンドでいろいろ設定するの慣れていないのでGUI(Desktop Experience)付きで。 (リモートデスクトップ使えばよかったのかもしれないけど。) ロケールは英語以外は問題が起きそうなので英語で。</description>
    </item>
    
    <item>
      <title>Pcap4J with Four Native Libraries on Windows 10</title>
      <link>https://www.kaitoy.xyz/2016/01/12/pcap4j-with-four-native-libraries-on-windows10/</link>
      <pubDate>Tue, 12 Jan 2016 08:43:30 -0700</pubDate>
      
      <guid>https://www.kaitoy.xyz/2016/01/12/pcap4j-with-four-native-libraries-on-windows10/</guid>
      <description>I did some basic tests for Pcap4J 1.6.2 on Windows 10 Pro on VMware Player 7.1.0 using the following native packet capture libraries:
 Official WinPcap 4.1.3 Unofficial WinPcap based on libpcap 1.7.4 Win10Pcap 10.2 Npcap 0.0.5  This article explains each of the above libraries and tells the test results.

   (adsbygoogle = window.adsbygoogle || []).push({});  Official WinPcap WinPcap is the most common native packet capture library developed based on libpcap.</description>
    </item>
    
    <item>
      <title>pcap-ng support in Pcap4J</title>
      <link>https://www.kaitoy.xyz/2016/01/10/pcap-ng-support-in-pcap4j/</link>
      <pubDate>Sun, 10 Jan 2016 09:52:06 -0700</pubDate>
      
      <guid>https://www.kaitoy.xyz/2016/01/10/pcap-ng-support-in-pcap4j/</guid>
      <description>Sometimes I receive inquiries about support for pcap-ng files in Pcap4J. I wrote the result of my investigation on it in this article.

   (adsbygoogle = window.adsbygoogle || []).push({});  What&amp;rsquo;s a pcap-ng file A pcap-ng file (i.e. a file with .pcapng extension ) is a packet dump file in The pcap Next Generation Capture File Format (or pcap-ng format for short). This format was created to overcome the limitations of the traditional Libpcap File Format (or pcap format for short) which is used in pcap files.</description>
    </item>
    
    <item>
      <title>Pcap4JがSoftware Quality Award 2015で入賞</title>
      <link>https://www.kaitoy.xyz/2015/12/03/software-quality-award-2015/</link>
      <pubDate>Thu, 03 Dec 2015 12:28:24 -0700</pubDate>
      
      <guid>https://www.kaitoy.xyz/2015/12/03/software-quality-award-2015/</guid>
      <description>Teamed.ioが主催の、ソフトウェアの品質とその開発プロジェクトの品質への取り組みを競うコンテスト、Software Quality Awardの第一回が2015年4月～11月にかけて開催された。 Teamed.ioのCTOであるYegorとは、彼のブログを和訳してここに載せている関係でたまにメールしているが、そのやりとりの中で誘われたので私もPcap4Jをひっさげてそれに参加した。

   (adsbygoogle = window.adsbygoogle || []).push({});  優勝すると$4,096もらえるということではあったが、150以上のプロジェクトがエントリーしていて、Gulpとか有名なものも入っていたので、どうせ全然ダメだろと思ってエントリー以来なにも対策しなかったが、なんと 8位 入賞を果たしてしまった。 まあ講評をみるとずいぶんこき下ろされてはいるが…
因みに講評は以下の感じ。
 utilパッケージがあってそこにユーティリティクラスがある。クソだ。 NULLが可変オブジェクトで使われている。例えばAbstractPcapAddress。クソだ。 スタティックメソッドとスタティック変数が多すぎる。文字通りどこにでもある。pcap4j-packetfactory-staticという名のスタティックメソッドだらけのモジュールまである。 JavaDocに一貫性がなく、未完なものもある。これとか。 ほんのちょっとのissuesとたった6つのプルリクエストしかない。コミットがissuesにリンクされてない。変更のトレーサビリティはほとんどゼロだ。 リリース手順が自動化されていない。リリースがドキュメントに書かれていない。 静的解析してなくて、そのせいか乱雑なコードがたまにある。 スコア: 3  静的解析くらいは導入しようかな…
ユーティリティクラスとかNULLとかスタティックメソッドは使うのやめるつもりはないけど。
そういえば、入賞者にはスポンサーであるJetBrainsの製品の一年ライセンスがもらえることになっていたはずだが特に連絡がないな。</description>
    </item>
    
    <item>
      <title>Step by Step to Add a Protocol Support to Pcap4J (Part 2)</title>
      <link>https://www.kaitoy.xyz/2015/10/12/step-by-step-to-add-a-protocol-support-to-pcap4j-2/</link>
      <pubDate>Mon, 12 Oct 2015 01:00:13 -0600</pubDate>
      
      <guid>https://www.kaitoy.xyz/2015/10/12/step-by-step-to-add-a-protocol-support-to-pcap4j-2/</guid>
      <description>This is continued from the part 1.
We are adding DHCP support to Pcap4J.

   (adsbygoogle = window.adsbygoogle || []).push({});  Packet Piece Class A packet piece class is a Java class which represents a field of a packet. We should create such classes instead of using a primitive types in some cases.
In the case of DHCP, its flags field includes two fields in itself as like below:</description>
    </item>
    
    <item>
      <title>Step by Step to Add a Protocol Support to Pcap4J (Part 1)</title>
      <link>https://www.kaitoy.xyz/2015/08/09/step-by-step-to-add-a-protocol-support-to-pcap4j-1/</link>
      <pubDate>Sun, 09 Aug 2015 21:53:29 -0600</pubDate>
      
      <guid>https://www.kaitoy.xyz/2015/08/09/step-by-step-to-add-a-protocol-support-to-pcap4j-1/</guid>
      <description>I will show how to add a protocol support to Pcap4J in detail giving the example of DHCP (v4) via some posts.

   (adsbygoogle = window.adsbygoogle || []).push({});  Named Number Class First of all, we need to know the packet format. It&amp;rsquo;s explained in RFC 2131 as below:
0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | op (1) | htype (1) | hlen (1) | hops (1) | +---------------+---------------+---------------+---------------+ | xid (4) | +-------------------------------+-------------------------------+ | secs (2) | flags (2) | +-------------------------------+-------------------------------+ | ciaddr (4) | +---------------------------------------------------------------+ | yiaddr (4) | +---------------------------------------------------------------+ | siaddr (4) | +---------------------------------------------------------------+ | giaddr (4) | +---------------------------------------------------------------+ | | | chaddr (16) | | | | | +---------------------------------------------------------------+ | | | sname (64) | +---------------------------------------------------------------+ | | | file (128) | +---------------------------------------------------------------+ | | | options (variable) | +---------------------------------------------------------------+     FIELD OCTETS DESCRIPTION     op 1 Message op code / message type.</description>
    </item>
    
    <item>
      <title>Another way to capture LAN packets with pcap4j container</title>
      <link>https://www.kaitoy.xyz/2015/07/27/another-way-to-capture-lan-packets-with-pcap4j-container/</link>
      <pubDate>Mon, 27 Jul 2015 23:41:49 -0600</pubDate>
      
      <guid>https://www.kaitoy.xyz/2015/07/27/another-way-to-capture-lan-packets-with-pcap4j-container/</guid>
      <description>2 days ago, I posted an article How to capture packets on a local network with Pcap4J container.
Today, I was reading Docker Docs and found another way to do it. I&amp;rsquo;m writing about it here.

   (adsbygoogle = window.adsbygoogle || []).push({});  &amp;ndash;net option for docker run When we start a docker container we use docker run command. It accepts some options. --net is one of them, which is to set a network mode for a container.</description>
    </item>
    
    <item>
      <title>How to capture packets on a local network with Pcap4J container</title>
      <link>https://www.kaitoy.xyz/2015/07/25/how-to-capture-packets-on-a-local-network-with-pcap4j-container/</link>
      <pubDate>Sat, 25 Jul 2015 19:05:06 -0600</pubDate>
      
      <guid>https://www.kaitoy.xyz/2015/07/25/how-to-capture-packets-on-a-local-network-with-pcap4j-container/</guid>
      <description>I&amp;rsquo;ll show how to capture packets on a local network with Pcap4J container.

   (adsbygoogle = window.adsbygoogle || []).push({});  Docker network By default, Docker containers are not connected to a local network. They are connected only to a virtual network Docker creates as like below:
  Refer to the Docker doc for more details.
What&amp;rsquo;s a challenge In order to let a Pcap4J container capture packets in a local (real) network, we need to directly connect the container to the local network, because docker0 forwards only packets the destinations of which are in the virtual network.</description>
    </item>
    
    <item>
      <title>Pcap4J container with runC</title>
      <link>https://www.kaitoy.xyz/2015/07/19/pcap4j-container-with-runc/</link>
      <pubDate>Sun, 19 Jul 2015 16:25:03 -0600</pubDate>
      
      <guid>https://www.kaitoy.xyz/2015/07/19/pcap4j-container-with-runc/</guid>
      <description>I tried to run a Pcap4J container with runC.

   (adsbygoogle = window.adsbygoogle || []).push({});  What is Pcap4J? Pcap4J is a Java library for capturing, crafting, and sending packets. It&amp;rsquo;s actually a Java wrapper for libpcap/WinPcap plus packet analyzer. We can see the details in its README.
What is runC? runC is a container runtime developed by Docker and released on June 22, 2015. With runC, we can start a container from a docker image without the docker service or the docker command.</description>
    </item>
    
  </channel>
</rss>