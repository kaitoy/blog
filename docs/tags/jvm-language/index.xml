<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>To Be Decided </title>
    <link>https://www.kaitoy.xyz/tags/jvm-language/</link>
    <language>en-us</language>
    <author>Kaito Yamada</author>
    <rights>(C) 2019</rights>
    <updated>2016-04-16 11:09:53 -0600 -0600</updated>

    
      
        <item>
          <title>Pcap4J in Kotlin</title>
          <link>https://www.kaitoy.xyz/2016/04/16/pcap4j-in-kotlin/</link>
          <pubDate>Sat, 16 Apr 2016 11:09:53 -0600</pubDate>
          <author>Kaito Yamada</author>
          <guid>https://www.kaitoy.xyz/2016/04/16/pcap4j-in-kotlin/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://www.kaitoy.xyz/2016/04/10/pcap4j-in-groovy/&#34;&gt;Groovy&lt;/a&gt;に続いて、&lt;a href=&#34;https://kotlinlang.org/&#34;&gt;&lt;strong&gt;Kotlin&lt;/strong&gt;&lt;/a&gt;で&lt;a href=&#34;https://github.com/kaitoy/pcap4j&#34;&gt;&lt;strong&gt;Pcap4J&lt;/strong&gt;&lt;/a&gt;を使ってパケットキャプチャしてみた。&lt;/p&gt;

&lt;p&gt;KotlinからでもPcap4Jちゃんと動くよということを実証するのが主な目的。
また、今後JavaなアプリはKotlinで書こうかと思っているので、その予習も兼ねている。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;



&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-6244473643910448&#34;
     data-ad-slot=&#34;1845600530&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/p&gt;

&lt;h2 id=&#34;kotlinとは&#34;&gt;Kotlinとは&lt;/h2&gt;

&lt;p&gt;KotlinはJVM言語、つまりJavaのバイトコードにコンパイルされてJavaの実行環境で動くプログラミング言語のひとつ。
&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt;で有名な&lt;a href=&#34;https://www.jetbrains.com/&#34;&gt;JetBrains社&lt;/a&gt;によって&lt;a href=&#34;https://github.com/JetBrains/kotlin&#34;&gt;OSS&lt;/a&gt;として開発されている。&lt;/p&gt;

&lt;p&gt;2011年に生まれた新しめな言語で、2016/2/17に&lt;a href=&#34;http://blog.jetbrains.com/jp/2016/02/17/578&#34;&gt;v1がリリースされ&lt;/a&gt;、主にAndroidアプリの開発用として注目されている。&lt;/p&gt;

&lt;p&gt;「実用的」であることを売りにしていて、つまり少ない学習コストで導入でき、既存のJavaコードやMavenなどのツールとの相互運用性を持つとされている。
IntelliJ IDEA、&lt;a href=&#34;http://developer.android.com/sdk/index.html&#34;&gt;Android Studio&lt;/a&gt;、&lt;a href=&#34;https://eclipse.org/&#34;&gt;Eclipse&lt;/a&gt;といった主要なIDEのサポートもあり、開発環境は整っている。
v1以降の後方互換性の維持も表明されていて、長期サポートが必要な製品開発にも堪える。&lt;/p&gt;

&lt;p&gt;さらに、厳格な静的型付けやNullable/Non-Null型などにより安全性を確保しつつ、型推論やラムダ式などで生産性を高めている。&lt;/p&gt;

&lt;p&gt;Javaのバイトコードだけでなく、JavaScriptを生成するバックエンドを持っているのも大きな特徴。
ユースケースがよく分からないが。&lt;/p&gt;

&lt;p&gt;GitHubにホストされているKotlinプロジェクトは、2016/4/15現在、全体の &lt;strong&gt;0.1%&lt;/strong&gt; (&lt;sup&gt;3493&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3215549&lt;/sub&gt;) しかない。
v1のリリースは結構注目を集めたので、この割合は今後増えていくと期待される。&lt;/p&gt;

&lt;h2 id=&#34;kotlinのインストール&#34;&gt;Kotlinのインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://kotlinlang.org/docs/tutorials/&#34;&gt;チュートリアル&lt;/a&gt;に従えば、IDEやテキストエディタ+コマンドラインの環境を整えてHello Worldを書いて実行するところまで簡単にできる。
筆者はEclipse(Mars)とコマンドラインの環境をWindows 7上で作った。
Kotlinのバージョンは1.0.1-2。&lt;/p&gt;

&lt;p&gt;コマンドラインについては、&lt;a href=&#34;https://github.com/JetBrains/kotlin/releases/latest&#34;&gt;GitHub Releases&lt;/a&gt;からアーカイブをダウンロードして、適当なところに展開して&lt;code&gt;bin&lt;/code&gt;フォルダにパスを通すだけ。
前提となるJavaについては、環境変数&lt;code&gt;JAVA_HOME&lt;/code&gt;を設定するか、&lt;code&gt;java&lt;/code&gt;コマンドにパスを通せばいい模様。&lt;/p&gt;

&lt;p&gt;因みにKotlinの書き方は、&lt;a href=&#34;https://kotlinlang.org/docs/tutorials/koans.html&#34;&gt;Kotlin Koans&lt;/a&gt;という例題集を&lt;a href=&#34;http://try.kotlinlang.org/koans&#34;&gt;オンラインのIDE&lt;/a&gt;で解きながらを学ぶことができる。&lt;/p&gt;

&lt;h2 id=&#34;パケットキャプチャ-with-pcap4j-in-java&#34;&gt;パケットキャプチャ with Pcap4J in Java&lt;/h2&gt;

&lt;p&gt;Pcap4Jでパケットキャプチャするコードを普通にJavaで書くと以下の様になる。
(&lt;a href=&#34;https://www.kaitoy.xyz/2016/04/10/pcap4j-in-groovy/&#34;&gt;Groovy&lt;/a&gt;の時のと一緒。)&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/kaitoy/eebcd5bdfab179cab916d3182f3d6d11.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;これを実行すると、パケットキャプチャするネットワークインターフェースを選択し、5つのパケットをキャプチャしてタイムスタンプと共にコンソールに表示する。&lt;/p&gt;

&lt;h2 id=&#34;パケットキャプチャ-with-pcap4j-in-kotlin&#34;&gt;パケットキャプチャ with Pcap4J in Kotlin&lt;/h2&gt;

&lt;p&gt;上記処理をKotlinで書くと以下の様になる。&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/kaitoy/074769880c7bf4c0628c1c25a724c1a7.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;メインクラスはGroovy同様書かなくていいが、&lt;code&gt;main&lt;/code&gt;関数は必要。&lt;/p&gt;

&lt;p&gt;型推論があってとても楽。
ラムダ式、補間文字列(String interpolation)、名前付き引数といったモダンめな機能は普通に使える。
(名前付き引数はJavaで書いたメソッドをKotlinから呼ぶときは使えない。)&lt;/p&gt;

&lt;p&gt;オープンクラスを実現する機能である&lt;a href=&#34;https://kotlinlang.org/docs/reference/extensions.html&#34;&gt;Extensions&lt;/a&gt;を&lt;code&gt;PcapHandle&lt;/code&gt;に使ってみた。
なんだか便利そう。&lt;/p&gt;

&lt;p&gt;Nullable/Non-Null型がすごい。言語仕様で&lt;code&gt;NullPointerException&lt;/code&gt;が発生しないように守ってくれる。
例えば&lt;code&gt;filter&lt;/code&gt;は宣言の時点では初期化文で&lt;code&gt;null&lt;/code&gt;が入る可能性があるので&lt;code&gt;Nullable&lt;/code&gt;な&lt;code&gt;String&lt;/code&gt;という型に推論されるが、&lt;code&gt;filter?.let&lt;/code&gt;というNullチェックをするメソッドに渡したブロック内では自動で&lt;code&gt;Non-Null&lt;/code&gt;な&lt;code&gt;String&lt;/code&gt;にキャストされ、&lt;code&gt;filter.length&lt;/code&gt;を安全に評価できるようになっている。
Nullチェックをしないで&lt;code&gt;filter.length&lt;/code&gt;と書くとコンパイルエラーになる。すごい。&lt;/p&gt;

&lt;p&gt;けどJavaのコードから返ってくるオブジェクトは普通、プラットフォーム型というものになり、このNullセーフな仕組みが働かない。
これに対しては&lt;a href=&#34;https://kotlinlang.org/docs/reference/java-interop.html#nullability-annotations&#34;&gt;Null可能性アノテーション&lt;/a&gt;を使えば幸せになれるらしい。&lt;/p&gt;

&lt;p&gt;さらに、上記コードには表れていないが、キャストも安全になっている模様。(cf. &lt;a href=&#34;http://kotlinlang.org/docs/reference/typecasts.html#smart-casts&#34;&gt;スマートキャスト&lt;/a&gt;、&lt;a href=&#34;http://kotlinlang.org/docs/reference/typecasts.html#safe-nullable-cast-operator&#34;&gt;セーフキャスト&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Kotlinは基本コンパイラ言語なので、上記コードを実行するには以下ようなコマンドで一旦コンパイルする必要がある。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;kotlinc -cp pcap4j-core.jar Pcap4jLoop.kt -include-runtime -d Pcap4jLoop.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコマンドだとKotlinのランタイム入りjarファイルができる。
このjarを、Pcap4J 1.6.2、Slf4J 1.7.12、JNA 4.2.1を使って、以下のコマンドで実行できることを確認した。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;java -cp pcap4j-core.jar;pcap4j-packetfactory-static.jar;jna.jar;slf4j-api.jar;Pcap4jLoop.jar Pcap4jLoopKt tcp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコマンドで指定しているメインクラス&lt;code&gt;Pcap4jLoopKt&lt;/code&gt;は、上記コードでクラスの記述を省いた為にKotlinがソースファイル名(Pcap4jLoop.kt)を基に自動生成したもの。&lt;/p&gt;

&lt;p&gt;コンパイル/実行方法は&lt;a href=&#34;https://kotlinlang.org/docs/tutorials/command-line.html#creating-and-running-a-first-application&#34;&gt;他にもある&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;スクリプトなkotlin&#34;&gt;スクリプトなKotlin&lt;/h2&gt;

&lt;p&gt;Kotlinプログラムはスクリプトとしても書けて、コンパイル無しで実行することができる。
この場合、&lt;code&gt;main&lt;/code&gt;関数は消してその中身をトップレベルに書き、ファイルの拡張子を&lt;code&gt;.kts&lt;/code&gt;にする。&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/kaitoy/b6ee844ad2353585a30984ef0bedf844.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;上記スクリプトは以下のコマンドで実行できた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;kotlinc -cp pcap4j-core.jar;jna.jar;pcap4j-packetfactory-static.jar;slf4j-api.jar -script Pcap4jLoop.kts tcp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;EclipseのKotlinプラグインはこのスクリプト形式をまだサポートしていないようで残念。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Pcap4J in Groovy</title>
          <link>https://www.kaitoy.xyz/2016/04/10/pcap4j-in-groovy/</link>
          <pubDate>Sun, 10 Apr 2016 00:05:27 -0600</pubDate>
          <author>Kaito Yamada</author>
          <guid>https://www.kaitoy.xyz/2016/04/10/pcap4j-in-groovy/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://www.groovy-lang.org/index.html&#34;&gt;&lt;strong&gt;Groovy&lt;/strong&gt;&lt;/a&gt;で&lt;a href=&#34;https://github.com/kaitoy/pcap4j&#34;&gt;&lt;strong&gt;Pcap4J&lt;/strong&gt;&lt;/a&gt;を使ってパケットキャプチャしてみた。&lt;/p&gt;

&lt;p&gt;GroovyからでもPcap4Jちゃんと動くよということを実証するのが主な目的。
また、さすがにそろそろ&lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt;を卒業してGradle(下記)使おうと思うので、予習も兼ねている。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;



&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-6244473643910448&#34;
     data-ad-slot=&#34;1845600530&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/p&gt;

&lt;h2 id=&#34;groovyとは&#34;&gt;Groovyとは&lt;/h2&gt;

&lt;p&gt;GroovyはJVM言語、つまりJavaのバイトコードにコンパイルされてJavaの実行環境で動くプログラミング言語のひとつ。
Javaのプログラマにとってとっつきやすい文法を保ちつつ、動的型付けを実現し、また&lt;a href=&#34;https://www.ruby-lang.org/ja/&#34;&gt;Ruby&lt;/a&gt;などのスクリプト言語の記法や機能を取り入れ、生産性を高めている。&lt;/p&gt;

&lt;p&gt;現在は&lt;a href=&#34;http://www.apache.org/&#34;&gt;Apacheソフトウェア財団&lt;/a&gt;によって管理され、&lt;a href=&#34;https://github.com/apache/groovy&#34;&gt;OSS&lt;/a&gt;として開発が進められている。&lt;/p&gt;

&lt;p&gt;Webアプリケーションフレームワークの&lt;a href=&#34;https://grails.org/&#34;&gt;&lt;strong&gt;Grails&lt;/strong&gt;&lt;/a&gt; やビルドツールの&lt;a href=&#34;http://gradle.org/&#34;&gt;&lt;strong&gt;Gradle&lt;/strong&gt;&lt;/a&gt;で採用されている。
Gradleは最近Javaプロジェクトのビルドツールの主流になっていて、Groovyはその定義ファイルを記述する言語として知名度が高いが、Groovyで開発されているプロジェクトとなるとあまり多くないようだ。
GitHubにホストされているGroovyプロジェクトは、2016/4/9現在 &lt;strong&gt;0.8%弱&lt;/strong&gt; (25,087/3,200,229) しかない。&lt;/p&gt;

&lt;p&gt;なぜ人気がないのかはよく分からないが、少なくとも、長くて打ちにくい名前とダサいロゴは不評のようだ。&lt;/p&gt;

&lt;h2 id=&#34;groovyのインストール&#34;&gt;Groovyのインストール&lt;/h2&gt;

&lt;p&gt;Windows 7にGroovy 2.4.6をインストールする。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.groovy-lang.org/install.html&#34;&gt;本家サイトの手順&lt;/a&gt;に従い、Binary Releaseのアーカイブをダウンロードして、適当なところに展開して、展開したフォルダのパスを環境変数&lt;code&gt;GROOVY_HOME&lt;/code&gt;にセットし、&lt;code&gt;%GROOVY_HOME%\bin&lt;/code&gt;を&lt;code&gt;PATH&lt;/code&gt;に追加するだけ。&lt;/p&gt;

&lt;p&gt;Java 6以降が前提なので、&lt;code&gt;JAVA_HOME&lt;/code&gt;にJDK 1.7.0_17のパスをセットしておいた。JREでもいいはず。&lt;/p&gt;

&lt;h2 id=&#34;パケットキャプチャ-with-pcap4j-in-java&#34;&gt;パケットキャプチャ with Pcap4J in Java&lt;/h2&gt;

&lt;p&gt;Pcap4Jでパケットキャプチャするコードを普通にJavaで書くと以下の様になる。&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/kaitoy/eebcd5bdfab179cab916d3182f3d6d11.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;これを実行すると、パケットキャプチャするネットワークインターフェースを選択し、5つのパケットをキャプチャしてタイムスタンプと共にコンソールに表示する。&lt;/p&gt;

&lt;h2 id=&#34;パケットキャプチャ-with-pcap4j-in-groovy&#34;&gt;パケットキャプチャ with Pcap4J in Groovy&lt;/h2&gt;

&lt;p&gt;上記処理をGroovyで書くと以下の様になる。&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/kaitoy/c75837d3537303b004506d3e335eac17.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;メインクラスを書かなくていいところが大きい。
変数の型を書かなくていいのも楽。
ラムダ式でクロージャも作れるし補間文字列(String interpolation)も使える。&lt;/p&gt;

&lt;p&gt;また、ここでは使っていないが、オープンクラスなどのメタプログラミングもサポートされている。&lt;/p&gt;

&lt;p&gt;上記コードは、Pcap4J 1.6.2、Slf4J 1.7.12、JNA 4.2.1を使って、以下のコマンドで実行できることを確認した。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;groovy -cp &amp;quot;pcap4j-core.jar;jna.jar;slf4j-api.jar;pcap4j-packetfactory-static.jar&amp;quot; Pcap4jLoop.groovy tcp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これはスクリプト的な実行方法だが、&lt;code&gt;groovyc&lt;/code&gt;コマンドで事前にコンパイルしてclassファイルを生成し、&lt;code&gt;java&lt;/code&gt;コマンドで実行することもできる。&lt;/p&gt;

&lt;h3 id=&#34;困ったところ&#34;&gt;困ったところ&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;本家サイトのドキュメントが分かり辛い。&lt;/p&gt;

&lt;p&gt;頭から読んでいくと急にディープな部分に引き込まれ、なかなかコードを書き始められなかった。&lt;/p&gt;

&lt;p&gt;最近の言語やフレームワークのサイトはチュートリアルに従って動くコードを見ながら概要から詳細に理解を深められる形になっていることが多いので、仕様の詳細が羅列されている感じのGroovyサイトはなんとも読みにくかった。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;クラスパスの指定が上手くできない。&lt;/p&gt;

&lt;p&gt;groovyコマンドにオプションで複数のクラスパスを指定するのに、普通に&lt;code&gt;-cp pcap4j-core.jar;jna.jar&lt;/code&gt;みたいにしたら最初の&lt;code&gt;pcap4j-core.jar&lt;/code&gt;にしかクラスパスが通らなかった。
区切りを&lt;code&gt;:&lt;/code&gt;にするとどちらにも通らない。&lt;/p&gt;

&lt;p&gt;環境変数&lt;code&gt;CLASSPATH&lt;/code&gt;に&lt;code&gt;pcap4j-core.jar;jna.jar&lt;/code&gt;をセットしておくと&lt;code&gt;-cp&lt;/code&gt;を使わなくても正しく両方に通るし、&lt;code&gt;%userprofile%\.groovy\&lt;/code&gt;にjarを入れておくだけでもいいみたいなんだけど、&lt;code&gt;-cp&lt;/code&gt;が中途半端にしか機能しないのが気持ち悪い。&lt;/p&gt;

&lt;p&gt;のでちょっとソースを見たら、groovyコマンドはバッチで書かれていることに気付いた。
バッチだと、&lt;code&gt;;&lt;/code&gt;で区切られているものは半角スペースで区切られているのと同じで別々の引数になってしまうので、上のような書き方だと&lt;code&gt;jna.jar&lt;/code&gt;は&lt;code&gt;-cp&lt;/code&gt;の値として処理されない。
クラスパス全体をダブルコーテーションで囲って、&lt;code&gt;-cp &amp;quot;pcap4j-core.jar;jna.jar&amp;quot;&lt;/code&gt;みたいにしたらできた。なんか残念な出来。。。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
      
    

  </channel>
</rss>
