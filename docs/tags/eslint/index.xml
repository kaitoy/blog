<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>eslint on To Be Decided</title>
    <link>https://www.kaitoy.xyz/tags/eslint/</link>
    <description>Recent content in eslint on To Be Decided</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2015 Kaito Yamada</copyright>
    <lastBuildDate>Thu, 23 Aug 2018 00:19:09 +0900</lastBuildDate>
    
	<atom:link href="https://www.kaitoy.xyz/tags/eslint/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>React &#43; Reduxアプリケーションプロジェクトのテンプレートを作る ― その3: PrettierとESLint</title>
      <link>https://www.kaitoy.xyz/2018/08/23/creating-react-redux-app-from-scratch-03/</link>
      <pubDate>Thu, 23 Aug 2018 00:19:09 +0900</pubDate>
      
      <guid>https://www.kaitoy.xyz/2018/08/23/creating-react-redux-app-from-scratch-03/</guid>
      <description>ReactとReduxを学ぶために、開発環境というかプロジェクトテンプレートをスクラッチから作っている。 (最終的な成果はGitHubに置いた。)
前回はReactをセットアップした。
(2018/11/21更新)
   (adsbygoogle = window.adsbygoogle || []).push({});  フォーマッタとリンタ プロジェクトにフォーマッタとリンタを導入する。
フォーマッタはソースの体裁を整えるツール。 フォーマッタを使うことで体裁が統一され、ソースが読みやすくなり、品質向上につながる。
リンタはソースを静的解析して、潜在的なバグ、構造的な問題、体裁の問題を検出して警告してくれるツール。 フォーマッタは体裁だけ整えるのに対し、リンタは論理構造にも制約を課せるので、コーディングスタイルがより統一できたり、ミスをしやすい論理構造が無くなったりして、品質向上につながる。
JavaScriptのような動的型付け言語では、実行時まで顕在化しないバグを作りこみやすく、また実行時エラーの原因解析が静的型付け言語に比べて難しいので、フォーマッタとリンタでプログラム実行前に問題をできるだけ取り除いておくのが重要。 またチーム開発では、コードレビューでコーディンスタイルを見る必要がなくなり、効率化につながる。
Prettier フォーマッタにはPrettierを使う。
Prettierは2017年1月にリリースされた新しいツール。 構文解析をしてASTを構築し、そこからフォーマット済みコードを出力するので、従来のツールよりも厳密な整形(e.g. 行の最大長を考慮した整形)ができる。
また、opinionated(独断的)であることも特徴で、Prettierプロジェクトが推奨するフォーマットをほぼ強制し、設定がほとんどない。 このため導入が簡単だけど、かゆいところに手が届かないこともある。
JavaScriptの他、JSX、CSS、Markdown、GraphQLのフォーマットにも対応している。

まずプロジェクトにインストールする。
yarn add -D prettier v1.15.2が入った。

設定はprettier.config.jsというファイルを書いてプロジェクトルートに置けばいい。
prettier.config.js:
module.exports = { printWidth: 100, // 行の最大長  tabWidth: 2, // インデント長  singleQuote: true, // 文字列をシングルクオートで囲う  trailingComma: &amp;#39;all&amp;#39;, // オブジェクトのプロパティとか関数の引数を複数行で書いたときに、全行の末尾にカンマをつける };  
また、フォーマット対象外のファイルを指定するファイルである.prettierignoreをプロジェクトルートに置く。
.prettierignore:
node_modules/ dist/ node_modulesはnpmパッケージが入るディレクトリ。 実際はnode_modulesはデフォルトで無視されるから書かなくていいんだけど。</description>
    </item>
    
  </channel>
</rss>