<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>To Be Decided </title>
    <link>https://www.kaitoy.xyz/tags/test-framework/</link>
    <language>en-us</language>
    <author>Kaito Yamada</author>
    <rights>(C) 2018</rights>
    <updated>2017-08-04 15:29:37 &#43;0900 JST</updated>

    
      
        <item>
          <title>2017年夏、ブラウザテストフレームワーク</title>
          <link>https://www.kaitoy.xyz/2017/08/04/browser-test-framework/</link>
          <pubDate>Fri, 04 Aug 2017 15:29:37 JST</pubDate>
          <author>Kaito Yamada</author>
          <guid>https://www.kaitoy.xyz/2017/08/04/browser-test-framework/</guid>
          <description>

&lt;p&gt;「&lt;a href=&#34;https://www.kaitoy.xyz/2017/07/12/2017-selenium-headless-browsers/&#34;&gt;2017年夏、Selenium、ヘッドレスブラウザ&lt;/a&gt;」の続き。
&lt;a href=&#34;https://www.servicenow.com/ja&#34;&gt;ServiceNow&lt;/a&gt;アプリケーションのブラウザテストをしたくて色々調べている。
前回は、Selenium(WebDriver)とChromeのヘッドレスモードを使うのがよさそうというところまで書いた。&lt;/p&gt;

&lt;p&gt;この記事では、ブラウザテストフレームワークを選ぶ。&lt;/p&gt;

&lt;p&gt;



&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-6244473643910448&#34;
     data-ad-slot=&#34;1845600530&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/p&gt;

&lt;h2 id=&#34;ブラウザ操作ツールとかブラウザテストフレームワークとか&#34;&gt;ブラウザ操作ツールとかブラウザテストフレームワークとか&lt;/h2&gt;

&lt;p&gt;Seleniumを直接使って、&lt;a href=&#34;http://junit.org/junit4/&#34;&gt;JUnit&lt;/a&gt;なんかのテストフレームワークでブラウザテストを書くこともできるけど、それは結構つらい。
Seleniumは低レベルなブラウザ操作APIを提供するので、単純にテスト書き辛いし、動的サイトを扱うときには、かなり気を使ってwait処理を入れていかないとテストが安定しない。
テスト前に、WebDriverの準備をしないといけなかったりするのも面倒。&lt;/p&gt;

&lt;p&gt;なので、昨今はもう少し高級なツールやフレームワークを使うのが普通な模様。
あまり知らなかったので色々記事を読んだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/cognitom/items/27b7375bea653b414c8f&#34;&gt;Seleniumアレルギーのための処方箋&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/cognitom/items/6cce719b57341769c14d&#34;&gt;ブラウザテストツール総まとめ・2016年夏版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/a-complete-guide-to-testing-javascript-in-2017/&#34;&gt;2017年JavaScriptのテスト概論&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;結果、ブラウザ操作ツールやブラウザテストフレームワークには以下のようなものがあることが分かった。
(SeleniumやWebDriver系じゃないのも含む。)&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://nightwatchjs.org/&#34;&gt;Nightwatch.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHubの★は6835。&lt;/p&gt;

&lt;p&gt;JavaScriptでブラウザテストを書けるフレームワーク。
WebDriverプロトコルに対応していて、Seleniumと異なる独自のクライアントAPIを実装。
つまり使えるブラウザの幅が広い。&lt;/p&gt;

&lt;p&gt;テストフレームワークは独自のもの。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://webdriver.io/&#34;&gt;WebdriverIO&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHubの★は3217。&lt;/p&gt;

&lt;p&gt;JavaScriptでブラウザを操作できるツール。
WebDriverプロトコルに対応していて、Seleniumと異なる独自のクライアントAPI(ラッパ?)を実装。
つまり使えるブラウザの幅が広い。&lt;/p&gt;

&lt;p&gt;独自のテストランナである&lt;a href=&#34;http://webdriver.io/guide/testrunner/gettingstarted.html&#34;&gt;WDIO&lt;/a&gt;付きで、テストフレームワークに&lt;a href=&#34;https://mochajs.org/&#34;&gt;Mocha&lt;/a&gt;、&lt;a href=&#34;https://jasmine.github.io/&#34;&gt;Jasmine&lt;/a&gt;、&lt;a href=&#34;https://cucumber.io/&#34;&gt;Cucumber&lt;/a&gt;など、いろいろ利用できる。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.protractortest.org/#/&#34;&gt;Protractor&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHubの★は6801。&lt;/p&gt;

&lt;p&gt;JavaScriptでブラウザテストを書けるフレームワーク。
WebDriverプロトコルに対応していて、&lt;a href=&#34;https://github.com/SeleniumHQ/selenium/wiki/WebDriverJs&#34;&gt;selenium-webdriver&lt;/a&gt;をラップしたAPIを提供する。
WebDriverなのでブラウザはなんでも。&lt;/p&gt;

&lt;p&gt;テストフレームワークは、Jasmine、Mocha、Cucumberのほか、いろいろ選べる模様。&lt;/p&gt;

&lt;p&gt;AngularとAngularJS向けだけどそれ以外にも使える。
Google製なので信頼感があるし、ドキュメントもコミュニティもしっかりしてる。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://casperjs.org/&#34;&gt;Casper.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHubの★は6337。&lt;/p&gt;

&lt;p&gt;JavaScriptでブラウザテストを書けるフレームワーク。
使えるブラウザは&lt;a href=&#34;http://phantomjs.org/&#34;&gt;PhantomJS&lt;/a&gt;か&lt;a href=&#34;https://slimerjs.org/&#34;&gt;SlimerJS&lt;/a&gt;だけで、多分WebDriver使ってない。&lt;/p&gt;

&lt;p&gt;テストフレームワークは独自のもの。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.nightmarejs.org/&#34;&gt;Nightmare&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHubの★は12964。&lt;/p&gt;

&lt;p&gt;JavaScriptでブラウザを操作できるツール。
ブラウザは、昔の1系はPhantomJSを使ってたけど、今の2系は&lt;a href=&#34;https://electron.atom.io/&#34;&gt;Electron&lt;/a&gt;。
WebDriverは使ってないはず。&lt;/p&gt;

&lt;p&gt;テストフレームワーク機能は付いてないけど、同じ作者の&lt;a href=&#34;https://open.segment.com/niffy&#34;&gt;Niffy&lt;/a&gt;というNightmareベースのツールがちょっとそれっぽい。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://devexpress.github.io/testcafe/&#34;&gt;TestCafe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHubの★は3029。&lt;/p&gt;

&lt;p&gt;JavaScriptでブラウザテストを書けるフレームワーク。
すごい多機能っぽいし、TypeScriptやasync/awaitをサポートしててなんかモダン。
WebDriverは使ってないっぽいけど、Chrome、Firefox、IE、Edge、Safariなど、一通りのブラウザが使える。
なぜかリモートテストもできる。&lt;/p&gt;

&lt;p&gt;どうもSelenium 1みたいにJavaScriptコードを挿入してテスト実行するらしいんだけど、よくわからない。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://zombie.js.org/&#34;&gt;Zombie.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHubの★は4608。&lt;/p&gt;

&lt;p&gt;JavaScriptでjsdomを操作できるツール。
なぜか妙にアサーション機能に凝っている。&lt;/p&gt;

&lt;p&gt;WebDriverは使ってないはず。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/OnetapInc/chromy&#34;&gt;Chromy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHubの★は294。&lt;/p&gt;

&lt;p&gt;JavaScriptでChromeを操作できるツール。
&lt;a href=&#34;https://github.com/cyrus-and/chrome-remote-interface&#34;&gt;chrome-remote-interface&lt;/a&gt;をラップして、
NightmareっぽいAPIを提供する。&lt;/p&gt;

&lt;p&gt;WebDriverは使ってない。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://codeception.com/&#34;&gt;Codeception&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHubの★は2900。&lt;/p&gt;

&lt;p&gt;PHPUnitとSeleniumをラップして、ユーザ視点のブラウザテスト(受入テスト)をPHPで書けるフレームワーク。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://teamcapybara.github.io/capybara/&#34;&gt;Capybara&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHubの★は7937。&lt;/p&gt;

&lt;p&gt;Seleniumをラップして、ブラウザテスト(受入テスト)をRubyで書けるフレームワーク。
テストフレームワークはRack::Testを始め、いろいろ選べる模様。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.gebish.org/&#34;&gt;Geb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHubの★は759。&lt;/p&gt;

&lt;p&gt;Seleniumをラップして、 JUnitやTestNGと連携して、ブラウザテストをGroovyで書けるフレームワーク。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://selenide.org/&#34;&gt;Selenide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHubの★は555。&lt;/p&gt;

&lt;p&gt;Seleniumをラップして、ブラウザテストをJavaで書けるフレームワーク。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;これらよりさらに高級なツールに、&lt;a href=&#34;http://codecept.io/&#34;&gt;CodeceptJS&lt;/a&gt;というのがあって、これはJavaScriptでユーザ視点のブラウザテスト(受入テスト)を書けるフレームワーク。
基本的にはMochaとWebdriverIOをラップして、より抽象的なAPIを提供する。
WebdriverIOをProtractorとかNightmareとか&lt;a href=&#34;http://appium.io/&#34;&gt;Appium&lt;/a&gt;に代えられて、色んな環境のテストが統一的なAPIで書ける。
すごいけどバグを踏んだ時辛そう。&lt;/p&gt;

&lt;p&gt;また、ブラウザテストの文脈でよく名前が出る&lt;a href=&#34;http://karma-runner.github.io/1.0/index.html&#34;&gt;Karma&lt;/a&gt;は、テストフレームワークではなくて、HTTPサーバを起動して、テストを実行するためのHTMLを生成して、ブラウザを起動してそれを読み込んでくれたりするツール(i.e. テストランナ)。
主にユニットテストを色んなブラウザで実行するためのもので、ServiceNowのようなSaaSのテストには使えないはず。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;どれを使うか。&lt;/p&gt;

&lt;p&gt;ServiceNowアプリの開発がJavaScriptなので、テストもJavaScriptで書いてユニバーサルな感じにしたい。
のでCodeceptionとCapybaraとGebとSelenideは無し。&lt;/p&gt;

&lt;p&gt;テストのリモート実行やクロスブラウザテストを見据えてWebDriver使ってたほうがよさそうなので、
NightmareとCasper.jsとZombie.jsとChromyも無し。&lt;/p&gt;

&lt;p&gt;TestCafeはWebDriverにこだわらなければよさそうだけど、今回はWebDriverで行きたい気分なのでパス。&lt;/p&gt;

&lt;p&gt;Protractorはよさそうだったけど、Angularで開発してるわけではないので、利用するのはちょっと違和感が。&lt;/p&gt;

&lt;p&gt;Nightwatch.jsは、全部メソッドチェーンでつなげる形で書くので、ブラウザ操作とアサーションがごっちゃになるのがちょっと見にくそう。
テストフレームワークは自分の好みで選びたい。&lt;/p&gt;

&lt;p&gt;ということで残ったのがWebdriverIO。
ややドキュメントが少なそうなのと、★が比較的少ないのが懸念。
ProtractorかNightwatch.jsにしとけばよかったってなりそうではある。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.kaitoy.xyz/2017/08/14/webdriverio-chrome/&#34;&gt;WebdriverIOの環境を構築した記事&lt;/a&gt;を書いた。&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
