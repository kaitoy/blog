<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>To Be Decided </title>
    <link>https://www.kaitoy.xyz/tags/react/</link>
    <language>en-us</language>
    <author>Kaito Yamada</author>
    <rights>(C) 2018</rights>
    <updated>2017-08-25 00:29:39 &#43;0900 JST</updated>

    
      
        <item>
          <title>スタートアップはReactを使うべきではない (BSD &#43; patentsライセンスを考慮して) — もし、いつか大企業に買収されたいと望むなら</title>
          <link>https://www.kaitoy.xyz/2017/08/25/if-youre-a-startup-you-should-not-use-react-reflecting-on-the-bsd-patents-license/</link>
          <pubDate>Fri, 25 Aug 2017 00:29:39 JST</pubDate>
          <author>Kaito Yamada</author>
          <guid>https://www.kaitoy.xyz/2017/08/25/if-youre-a-startup-you-should-not-use-react-reflecting-on-the-bsd-patents-license/</guid>
          <description>

&lt;p&gt;このエントリでは、Raúl Kripalaniによる記事、&lt;a href=&#34;https://medium.com/@raulk/if-youre-a-startup-you-should-not-use-react-reflecting-on-the-bsd-patents-license-b049d4a67dd2&#34;&gt;If you’re a startup, you should not use React (reflecting on the BSD + patents license)&lt;/a&gt;を紹介する。
(Raúlから和訳と転載の許可は得た。)
以下はその全文の和訳だが、意訳超訳が混じっているので、もとのニュアンスを知りたければ元記事を読んでもいいし、読まなくてもいい。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;2017/9/23追記: React、Jest、Flow、Immutable.jsが&lt;a href=&#34;https://code.facebook.com/posts/300798627056246/relicensing-react-jest-flow-and-immutable-js/&#34;&gt;MITにリライセンスされる&lt;/a&gt;というアナウンスがFacebookからあった。
コミュニティの大勝利だ。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;



&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-6244473643910448&#34;
     data-ad-slot=&#34;1845600530&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;現在オープンソースコミュニティで起こっていることには落胆させられる。&lt;/strong&gt;
特に、オープンソースのおかげで多くのスタートアップやビジネスが存在することを認識したときは。
独占的なソフトウェアのために法外なライセンス料を払わなければならないとしたら、それらは存続できない。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;オープンソースとは、より良いソフトウェアをみんなで構築するためのコミュニティをつくることだ。
それを、— Facebookが意図しているような — 人々の権利を交換するための市場として決して使用すべきではない。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Facebookは「BSD + patents」というライセンスモデルを推進している。
広く人気のあるReactを含む、すべてのプロジェクトで。&lt;/p&gt;

&lt;p&gt;基本的に、「BSD + patents」はコードが(誰でも参照し利用できるように)公開されていることを意味するが、しかしそれは常にFacebookの著作物でもある。
そして彼らは、&lt;strong&gt;君がFacebookを特許侵害で訴えないで&lt;/strong&gt; 仲良くやっている限り、君に特許ライセンスを与える。&lt;/p&gt;

&lt;p&gt;Facebookを訴えた瞬間、Reactの他、君の使っているあらゆるFacebookの「オープンソース」技術の特許権は自動的に取り消されてしまう。&lt;/p&gt;

&lt;p&gt;アディオス、バイバイ、どこかへ行ってしまう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*crzf_h-aHXU-g3J0W6Ryig.png&#34; alt=&#34;React PATENTS&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;(&lt;a href=&#34;https://github.com/facebook/react/blob/b8ba8c83f318b84e42933f6928f231dc0918f864/PATENTS&#34;&gt;https://github.com/facebook/react/blob/b8ba8c83f318b84e42933f6928f231dc0918f864/PATENTS&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;この問題は、Apache Software Foundationによって&lt;a href=&#34;https://github.com/facebook/react/issues/10191#issuecomment-323486580&#34;&gt;衆目にさらされることとなった&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;この制限は広大で、残忍だ。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;・・・&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;その知的財産がReactを使用しているドメインと関連しているかどうかは関係ない。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;君がReactを使うなら、Facebookが保持する特許に逆らうことはできない。
いつまでも。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;言い換えれば、代償。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Facebook、それが君らの考えるオープンソースなのか?&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;・・・&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;fridgebook-inc&#34;&gt;Fridgebook Inc.&lt;/h2&gt;

&lt;p&gt;例として、君の会社「Fridgebook Inc.」はインテリジェントな冷蔵庫を販売しているとしよう。
君の冷蔵庫にはスクリーンが付いていて、独自のアプリケーションを実行していて、そのUIにはReactが使われている。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*vfurq6EY120rZCwkaVtsCg.png&#34; alt=&#34;Fridge&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;突然、Facebookは冷蔵庫業界への進出を決め、新製品「FBfridge」をわずか1週間後に世界中でローンチすると発表した。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;仮に、Facebookがあなたの特許の一部を「FBfridge」で露骨に侵害していた場合、どうすればいい?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;そう、&lt;strong&gt;君は即座に彼らを訴えることはできない。&lt;/strong&gt;
君は顧客が使うアプリにReactを使っている、だろ?&lt;/p&gt;

&lt;p&gt;もし他のもの(&lt;a href=&#34;https://vuejs.org/&#34;&gt;vue.js&lt;/a&gt;とか)に移行せずに訴えたら、Reactのために与えられたライセンスを即座に失い、思いがけず君自身が違反している状態になり、&lt;strong&gt;ソフトウェア不正使用の訴訟を約5000億ドルの会社から起こされる可能性と戦うことになる。&lt;/strong&gt;
君だけで。&lt;/p&gt;

&lt;p&gt;もちろん、君は顧客サービスを中断したくはない。&lt;/p&gt;

&lt;p&gt;だから、もし彼らを訴えたい、もしくは少なくともそれをするための効力を保持したいのであれば、&lt;strong&gt;記録的な期間でReactから移行できる解決策を見つける必要がある&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;それが君の陥るひどい窮地だ。そうだろ?
それはほとんど致命的な状況だ。
&lt;strong&gt;回避策?
最初からReactを使わないことだ。&lt;/strong&gt;
そうすれば権利を主張する自由を維持できる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;注: 私は特許に支持も反対もしない。私はこの問題について明確な立場を持っていない。
ここでは私は単にギブアンドテイクのバランスを分析しているだけだ。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;facebookの釈明&#34;&gt;Facebookの釈明&lt;/h2&gt;

&lt;p&gt;私が最後に見たとき、オープンソースの哲学は、よりよいソフトウェアを構築し、技術をより先に推し進めるために、有能な人々が砂粒に貢献するコミュニティを主要なテーマとしていた。&lt;/p&gt;

&lt;p&gt;それが、Apache Software FoundationやLinux Foundationなどの、&lt;strong&gt;オープンソース界の主要な基準組織の精神だ&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;それで、なぜ特許をオープンソースに持ち込んだのか?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Facebookは&lt;a href=&#34;https://code.facebook.com/posts/112130496157735/explaining-react-s-license/&#34;&gt;正式な釈明&lt;/a&gt;を発表した。
短く要約すると次のようなものだ:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Facebookは、多くのメリットのない特許請求を受けている。
それらに対抗すると多くのリソースを無駄にする。
そこで、(Reactのなどの)オープンソースプロジェクトの成功を利用して、ユーザが理論上メリットのない特許請求を提起するのを阻止するトロイの木馬を導入することに決めた。
彼らはこの制限を交換しない。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;しかしここに重要な部分がある&lt;/strong&gt;。
彼らは、オープンソースソフトウェアをリリースする他のすべての企業が同じことを &lt;em&gt;すべきだと主張している&lt;/em&gt; 。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;残念ながら、これはうまくいかず、以下のような要因により、いずれ再び業界のクローズドソース化を招くだろう：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;それは市場最大級のプレーヤー間のコンセンサスを必要とする。
&lt;strong&gt;彼らは競合他社に対抗する力として実際の特許兵器(下の画像参照)を保有している。&lt;/strong&gt;
突然、これらの兵器の価値が$0になってしまう。&lt;/li&gt;
&lt;li&gt;そのコンセンサスに達するまず不可能だ。
参加しない悪徳企業が1つでもあれば、残りの企業は「守備/特許兵器」を維持する必要がある。&lt;/li&gt;
&lt;li&gt;すべての巨人達が「BSD + patents」スキームに基づくオープンソースに合意した場合でも、&lt;strong&gt;相互採用はしだいに無くなるだろう。
なぜかって?&lt;/strong&gt;
GoogleがProject Xを「BSD + patents」でリリースし、Amazonがそれを本当に気に入ったら、それを採用してGoogleに特許訴訟をする権利を永久に失うよりは、&lt;strong&gt;それを見限って自分たちで作ってしまうだろう。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;これは、そうした製品の周りにコミュニティが形成されないことを意味する。
コミュニティは、オープンソース製品の燃料でありインセンティブだ。
&lt;strong&gt;コミュニティに着火するチャンスがないならば、オープンソースにする理由はない。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;やがて、上記の状況が何度も繰り返されるにつれ、巨人達は製品をオープンソース化することに価値を見出さなくなり、業界は結局クローズドソースモデルに陥る。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*VL9qHHrYQ_HMiShoNO4qeg.png&#34; alt=&#34;patent arsenals&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;(2012) &lt;a href=&#34;http://www.droid-life.com/2012/01/24/web-of-tech-patent-lawsuits-infographic/&#34;&gt;http://www.droid-life.com/2012/01/24/web-of-tech-patent-lawsuits-infographic/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;facebookによるオープンソース哲学の非倫理的な利用&#34;&gt;Facebookによるオープンソース哲学の非倫理的な利用&lt;/h2&gt;

&lt;p&gt;特許はアイデアや発明を保護する。
ほとんどの場合特許主張裁判は、白黒が付くのではなく、勝ち負けになる。
&lt;strong&gt;侵害の評価は複雑でコストがかかる。&lt;/strong&gt;
ひとつの訴訟を提起して遂行するのに、何十万か何百万ドルもかかり得る。
FBが君の特許を侵害したという85％の確信を持っていたとしても、それを追求するのに多額の費用がかかるだろう。&lt;/p&gt;

&lt;p&gt;それに加え、まずは別のフロントエンドフレームワークへの移行に投資し、&lt;strong&gt;さらにすべての顧客が新しいバージョンの製品を使用していることを確認する必要がある。&lt;/strong&gt;
(React Nativeを使用していたとするとどうなる? ユーザは一斉にはアプリをアップグレードしてくれないかもしれない!)
そうしなければ、訴訟を起こすことさえできない。
これがオープンソース哲学の誠実で倫理的な利用法だと思うか?&lt;/p&gt;

&lt;p&gt;要点:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;オープンソースは、「代償」取引ではない。
オープンソースは、よりよいソフトウェアを一緒に構築するためのコミュニティをつくることだ。
権利を交換するための市場として使用されるべきではない。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;君はどう思う?&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;・・・&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;なぜスタートアップはreactを避けるべきなのか&#34;&gt;なぜスタートアップはReactを避けるべきなのか&lt;/h2&gt;

&lt;p&gt;君がスタートアップを立ち上げているなら、君と君の投資家は、いつかは百万ドルの価値のある出口に到達することを望んでいるんだろう?&lt;/p&gt;

&lt;p&gt;君は、すべての買収元、特にApple、Microsoft、Google、Amazonなどの大企業に扉を開いておきたい。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;そうした企業は、Facebookに対抗して特許兵器を保有している可能性が高いし、そうでなかったとしても、いざという時にFacebookを訴える権利を放棄したくはない。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;君の製品がReactで構築されている場合、君を買収することはその権利を失うことを意味し、これは恐らく彼らが覚悟できていないことだ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;基本的に、もし君を買収することがFacebookの特許侵害を訴える権利を永久に放棄することを意味するなら、
潜在的なバイヤーは10フィートの棒で君を触らない。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;よって、選択肢を残しておきたいのであれば…&lt;/p&gt;

&lt;h2 id=&#34;悪いことは言わない-reactを使うのをやめろ&#34;&gt;悪いことは言わない、Reactを使うのをやめろ&lt;/h2&gt;

&lt;p&gt;私は特に&lt;a href=&#34;https://github.com/developit/preact&#34;&gt;Preact&lt;/a&gt;が好きだが、FacebookにVirtual DOMやReact APIのソフトウェア特許を持っているかは定かではない。&lt;/p&gt;

&lt;p&gt;もし持っていたら、Preactはそれらの特許を侵害しているかもしれないので、&lt;a href=&#34;https://vuejs.org/&#34;&gt;vue.js&lt;/a&gt;や&lt;a href=&#34;https://cycle.js.org/&#34;&gt;cycle.js&lt;/a&gt;も見てみるといい。&lt;/p&gt;

&lt;p&gt;いずれ、知的財産の観点でPreactと&lt;a href=&#34;https://github.com/infernojs/inferno&#34;&gt;Inferno&lt;/a&gt;(もうひとつの軽量なReactの代替品)がどうなのかをコミュニティが明確にできることを願う。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;以上がRaúlの記事。&lt;/p&gt;

&lt;p&gt;Facebookの「BSD + Patents」への流れは、2015年4月に書かれた&lt;a href=&#34;https://code.facebook.com/posts/1639473982937255/updating-our-open-source-patent-grant/&#34;&gt;Updating Our Open Source Patent Grant&lt;/a&gt;というブログ記事でのアナウンスから始まったようだ。&lt;/p&gt;

&lt;p&gt;Reactのコミットログを見てみると、2014年10月、v16.0.0のアルファ版で「Apache License Version 2.0」から「BSD + Patents」に変わったことが以下のコミットからわかる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facebook/react/commit/dcf415c2b91ce52fd5d4dd02b70875ba9d33290f&#34;&gt;BSD + PATENTS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そのPATENTSの部分をより明確にしたのが2015年4月の以下のコミット。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facebook/react/commit/b8ba8c83f318b84e42933f6928f231dc0918f864&#34;&gt;Update Patent Grant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このPATENTSの条項をApache Software Foundationが問題視し、2017年7月に、Apache Software Foundationは自身の全プロジェクトで「BSD + Patents」なOSSの使用を禁止した。
で、Reactのライセンスを「Apache License Version 2.0」に戻せと言ったのをFacebookがごね、ついには、2017/8/19に公式に&lt;a href=&#34;https://code.facebook.com/posts/112130496157735/explaining-react-s-license/&#34;&gt;「BSD + Patents」と心中する&lt;/a&gt;という声明を出して炎上した、というのが今までの流れ。&lt;/p&gt;

&lt;p&gt;Reactのほか、Jest、Flow、Immutable.js、GraphQLなんかもアウト。
うちのプロジェクトでちょっとJestとFlow使いたいと思ってたけど様子見だな。&lt;/p&gt;

&lt;p&gt;Facebookの、みんなもそうすべきだという思惑に反し、今のところはPalantirという企業だけが同様のライセンスを採用しているらしい。&lt;/p&gt;

&lt;p&gt;因みに、たまにBSD + patentsライセンスが&lt;a href=&#34;http://www.opensource.jp/osd/osd-japanese.html&#34;&gt;オープンソースの定義(OSD)&lt;/a&gt;に違反しているので、ReactはOSSですらないという主張があるが、これは間違いであるというのが大方の見方だ。
この主張は、&lt;a href=&#34;https://www.elcaminolegal.com/single-post/2016/10/04/Facebook-Reactjs-License&#34;&gt;Robert Pierceによる記事&lt;/a&gt;が多分発端で、OSDの第一条「再頒布の自由」で、ソフトウェアの再配布に関して報酬(fee)を要求してはいけないとしている部分に、BSD + patentsライセンスが違反しているというもの。
すなわち、Facebookを訴えないという報酬を要求しているという主張だが、この解釈は法律家によって&lt;a href=&#34;http://lu.is/blog/2016/10/31/reacts-license-necessary-and-open/&#34;&gt;否定されている&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;また、OSDの第五条「個人やグループに対する差別の禁止」に違反しているからという主張もあるが、これも微妙。
この主張はつまり、Facebookを訴えていないグループと比較して、訴えたグループを差別しているという主張だろうが、Apache License 2.0、EPL、MPL 2.0といったメジャーなライセンスでも、そのような「差別」をする(i.e. 訴えたら特許使用権を剥奪する)条項がある。
これらのライセンスは、OSDをメンテしている組織であるOSIに&lt;a href=&#34;https://opensource.org/licenses/alphabetical&#34;&gt;承認されている&lt;/a&gt;ので、そうした差別がOSDに決定的に違反することではないことは明らか。
(&lt;a href=&#34;https://lists.opensource.org/pipermail/license-discuss/2016-December/thread.html&#34;&gt;この議論&lt;/a&gt;を見るに、厳密には違反しているけど、原理主義よりも現実主義であるべきなので、受け入れるべきといった雰囲気。)
BSD + patentsライセンスによる「差別」のような条項が、特別なものでも新しいものでもないことは&lt;a href=&#34;https://opensource.org/node/862&#34;&gt;OSI自身も言及している&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;FacebookのBSD + patentsライセンスが特別なのは、その「差別」の範囲が広いことだ。
Apache License 2.0なんかは、訴えた特許を含むソフトウェアだけが使えなくなるが、Facebookのは、Facebookに対するいかなる特許訴訟でもひとたび起こせば、Facebookが提供する広範囲の(全ての?)OSSが使えなくなるというもので、これはあまりにジャイアン的だということで炎上した。&lt;/p&gt;

&lt;p&gt;Facebookはこの炎上をどう収めるつもりなんだろう。
これをきっかけにReactが廃れ、Vue.jsとかに行ってしまうんだろうか。
結局フロントエンドフレームワークは何を学べばいいの?
Angular?&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ReactをAtomパッケージ開発に使ってみた</title>
          <link>https://www.kaitoy.xyz/2015/12/21/hello-react/</link>
          <pubDate>Mon, 21 Dec 2015 00:07:28 -0700</pubDate>
          <author>Kaito Yamada</author>
          <guid>https://www.kaitoy.xyz/2015/12/21/hello-react/</guid>
          <description>

&lt;p&gt;私は今&lt;a href=&#34;https://www.hpe.com/us/en/home.html&#34;&gt;HPE&lt;/a&gt;の&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%95%E3%82%A9%E3%83%BC%E3%83%88%E3%83%BB%E3%82%B3%E3%83%AA%E3%83%B3%E3%82%BA_%28%E3%82%B3%E3%83%AD%E3%83%A9%E3%83%89%E5%B7%9E%29&#34;&gt;Fort Collins&lt;/a&gt;オフィスに居候している。
HPEは最近、&lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;React&lt;/a&gt;を使ったUXフレームワークである&lt;a href=&#34;http://www.grommet.io/docs/&#34;&gt;Grommet&lt;/a&gt;を開発していて、私が扱っている製品もそれを使う兆しが見えてきた。
Grommetはいずれ仕事で触ることになりそうなので、まずはReactの勉強をと思い、&lt;a href=&#34;https://www.kaitoy.xyz/2015/12/19/atom-impress/&#34;&gt;とあるAtomパッケージ&lt;/a&gt;の開発に敢えて使ってみた。&lt;/p&gt;

&lt;p&gt;このエントリには、その作業の中で得た知識などについて書いた。
ただし、Reactを使った開発のノウハウみたいなものまでは得ていないので書いていない。&lt;/p&gt;

&lt;p&gt;(因みにGrommetは&lt;a href=&#34;https://github.com/grommet/grommet&#34;&gt;GitHub&lt;/a&gt;で公開されているが、ほとんど話題になっておらずスターも現時点で245しかついていない。。。)&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;



&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-6244473643910448&#34;
     data-ad-slot=&#34;1845600530&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/p&gt;

&lt;h2 id=&#34;reactとは&#34;&gt;Reactとは&lt;/h2&gt;

&lt;p&gt;ReactはFacebookが開発しているWeb UIのフレームワークで、&lt;a href=&#34;https://ja.wikipedia.org/wiki/Model_View_Controller&#34;&gt;MVC&lt;/a&gt;のVだけを実装したもの。
2013年に最初のバージョンが公開され、世界中で流行ってきているらしい。&lt;/p&gt;

&lt;p&gt;その特徴(というかほぼ全容)は仮想DOM(&lt;a href=&#34;https://facebook.github.io/react/docs/glossary.html&#34;&gt;Virtual DOM&lt;/a&gt;)。
ReactのAPIを使うと、リアルDOMと一対一で対応する仮想DOMのツリーを作ることができ、UIを組み立てられる。
リアルDOMの構築や更新はReactが最適化された方法でやってくれるので、性能がいいUIができるらしい。
因みに、仮想DOM自体はReact特有の技術ではなく、別の実装もある。&lt;/p&gt;

&lt;p&gt;もう一つの特徴は&lt;a href=&#34;https://facebook.github.io/jsx/&#34;&gt;JSX&lt;/a&gt;。
これは、JavaScriptのコードの中で、XMLみたいな構文で仮想DOMを記述するための拡張構文。
これを使うとReactコードが見やすく簡単に書けるけど、当然普通のJavaScript実行環境では動かないので、プリコンパイルなどが必要になる。&lt;/p&gt;

&lt;p&gt;FacebookはReactを使った開発に&lt;a href=&#34;http://facebook.github.io/flux/docs/overview.html#content&#34;&gt;Flux&lt;/a&gt;というアーキテクチャの採用を推奨している。
FluxはMVCアーキテクチャに置き換わるもので、従来の複雑なデータフローに反発し、一方向のシンプルなデータフローを提供する。
Fluxは単なるアーキテクチャで、その全体の実装を支援するフレームワークは現時点では無い。
(多分。&lt;a href=&#34;https://facebook.github.io/relay/&#34;&gt;Relay&lt;/a&gt;が一部支援してくれるっぽい。)&lt;/p&gt;

&lt;h2 id=&#34;reactを触った感想&#34;&gt;Reactを触った感想&lt;/h2&gt;

&lt;p&gt;Reactは本当にちょっとしか触っていないので、あまりよく分かっていないんだろうけど、なんだか使いにくかった。&lt;/p&gt;

&lt;p&gt;Reactは仮想DOMを作るところしか助けてくれないので、他のことは全部自分でやらないといけない。
FacebookはReact用のウィジェットすら提供していない。
昔仕事で全部入りの&lt;a href=&#34;https://ja.wikipedia.org/wiki/Dojo_Toolkit&#34;&gt;Dojo&lt;/a&gt;を使っていたので、それとのギャップをすごい感じた。&lt;/p&gt;

&lt;p&gt;そのうえ、他のフレームワークやライブラリと組み合わせて使おうとすると仮想DOMが壁になってくる。普通のフレームワークはリアルDOMを扱うからだ。
例えば、JavaScriptを書いているとすぐ&lt;a href=&#34;https://jquery.com/&#34;&gt;jQuery&lt;/a&gt;を使いたくなるが、これでリアルDOMを直接いじってしまってはReactを使う意味がない気がする。&lt;/p&gt;

&lt;h2 id=&#34;atomパッケージでreactを使う&#34;&gt;AtomパッケージでReactを使う&lt;/h2&gt;

&lt;p&gt;Reactは&lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt;でも提供されていて、Atomパッケージの開発に簡単に使える。
パッケージの&lt;code&gt;package.json&lt;/code&gt;の&lt;code&gt;dependencies&lt;/code&gt;に&lt;a href=&#34;https://www.npmjs.com/package/react&#34;&gt;react&lt;/a&gt;と&lt;a href=&#34;https://www.npmjs.com/package/react-dom&#34;&gt;react-dom&lt;/a&gt;を入れておけば、パッケージコード中で以下の様に仮想DOMを作れるようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var React = require(&#39;react&#39;);
var ReactDOM = require(&#39;react-dom&#39;);

class MyComponent extends React.Component {
  render() {
    return &amp;lt;div&amp;gt;Hello World&amp;lt;/div&amp;gt;;
  }
}

ReactDOM.render(&amp;lt;MyComponent /&amp;gt;, node);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;babelによるjsxの手動コンパイル&#34;&gt;BabelによるJSXの手動コンパイル&lt;/h2&gt;

&lt;p&gt;JSXのコンパイルには&lt;a href=&#34;https://babeljs.io/&#34;&gt;Babel&lt;/a&gt;を使うのがいい。
手動コンパイルにはBabelのコマンドラインツールが必要で、これはnpmで提供されている。
npmコマンドはAtomに同梱されているので別途インストールは不要。&lt;/p&gt;

&lt;p&gt;以下が手順の詳細。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Babelのコマンドラインツールのインストール&lt;/p&gt;

&lt;p&gt;任意の場所で、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install -g babel-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行すると、Babelのコマンドラインツールがグローバルにインストールされ、任意の場所で&lt;code&gt;babel&lt;/code&gt;コマンドが使えるようになる。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Babelの定義ファイル作成&lt;/p&gt;

&lt;p&gt;適当なフォルダ(プロジェクトのルートなど)に&lt;code&gt;.babelrc&lt;/code&gt;というBabelの定義ファイルを作り、以下を書いておく。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;presets&amp;quot;: [&amp;quot;react&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Reactプラグインのインストール&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.babelrc&lt;/code&gt;に書いた&lt;code&gt;presets&lt;/code&gt;の値は、コンパイルにReactプラグインを使うという意味。
なので、以下のコマンドでReactプラグインを(ローカルに)インストールする必要がある。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd &amp;lt;.babelrcを置いたフォルダ&amp;gt;
npm install babel-preset-react
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;コンパイル&lt;/p&gt;

&lt;p&gt;&lt;code&gt;babel&lt;/code&gt;コマンドでコンパイルを実行する。例えば以下を実行すると、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd &amp;lt;.babelrcを置いたフォルダ&amp;gt;
babel src -d lib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;src/*.jsx&lt;/code&gt;がコンパイルされて、&lt;code&gt;lib/*.js&lt;/code&gt;に出力される。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;language-babelパッケージによるjsxの自動コンパイル&#34;&gt;language-babelパッケージによるJSXの自動コンパイル&lt;/h2&gt;

&lt;p&gt;上記Babelによるコンパイルは、Atomなら&lt;a href=&#34;https://atom.io/packages/language-babel&#34;&gt;language-babelパッケージ&lt;/a&gt;で自動化できる。&lt;/p&gt;

&lt;p&gt;以下、Atomパッケージの開発でlanguage-babelを利用する手順を書く。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;language-babelのインストール&lt;/p&gt;

&lt;p&gt;language-babelをAtomのSettingsなどからインストールして、language-babelのSettingsで、&lt;code&gt;Allow Local Override&lt;/code&gt;にチェックを付ける。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Babelの定義ファイル作成&lt;/p&gt;

&lt;p&gt;手動のと同じ内容の&lt;code&gt;.babelrc&lt;/code&gt;をパッケージプロジェクトのルートに置く。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;package.json編集&lt;/p&gt;

&lt;p&gt;パッケージプロジェクトの&lt;code&gt;package.json&lt;/code&gt;の&lt;code&gt;dependencies&lt;/code&gt;の下あたりに以下の定義を追加して、BabelとReactプラグインへの依存を張る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;  &amp;quot;devDependencies&amp;quot;: {
    &amp;quot;babel-core&amp;quot;: &amp;quot;^6.1.2&amp;quot;,
    &amp;quot;babel-preset-react&amp;quot;: &amp;quot;^6.1.2&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記定義を追加したら、&lt;code&gt;apm install&lt;/code&gt;を実行して追加した依存をダウンロードする。&lt;/p&gt;

&lt;p&gt;因みに、&lt;code&gt;devDependencies&lt;/code&gt;は&lt;code&gt;dependencies&lt;/code&gt;と似てるけど、開発時だけに必要なモジュールを定義するプロパティ。
&lt;code&gt;devDependencies&lt;/code&gt;に書いたものは&lt;code&gt;apm install&lt;/code&gt;したときはダウンロードされるけど、パブリッシュされたものをインストールするときにはダウンロードされない。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;language-babelの設定ファイル作成&lt;/p&gt;

&lt;p&gt;language-babelの設定は&lt;code&gt;.languagebabel&lt;/code&gt;というファイルにかく。
これに以下の様な内容を書いてパッケージプロジェクトのルートに置く。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;babelMapsPath&amp;quot;:                   &amp;quot;lib&amp;quot;,
  &amp;quot;babelMapsAddUrl&amp;quot;:                 false,
  &amp;quot;babelSourcePath&amp;quot;:                 &amp;quot;src&amp;quot;,
  &amp;quot;babelTranspilePath&amp;quot;:              &amp;quot;lib&amp;quot;,
  &amp;quot;createMap&amp;quot;:                       false,
  &amp;quot;createTargetDirectories&amp;quot;:         true,
  &amp;quot;createTranspiledCode&amp;quot;:            true,
  &amp;quot;disableWhenNoBabelrcFileInPath&amp;quot;:  false,
  &amp;quot;suppressSourcePathMessages&amp;quot;:      true,
  &amp;quot;suppressTranspileOnSaveMessages&amp;quot;: false,
  &amp;quot;transpileOnSave&amp;quot;:                 true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで、&lt;code&gt;&amp;lt;パッケージプロジェクトのルート&amp;gt;/src/*.jsx&lt;/code&gt;が、Atomで編集して保存したときにコンパイルされ、&lt;code&gt;&amp;lt;パッケージプロジェクトのルート&amp;gt;/lib/*.js&lt;/code&gt;に出力されるようになった。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;babelでjsxをコンパイルする場合の制限&#34;&gt;BabelでJSXをコンパイルする場合の制限&lt;/h2&gt;

&lt;p&gt;手動にしろ自動にしろ、JSXのコンパイルにBabelを使う場合、BabelがCoffeeScriptに対応していないので、CoffeeScript + JSXでは書けない。
JavaScript + JSXで書かないといけない。&lt;/p&gt;

&lt;h2 id=&#34;minified-exception&#34;&gt;Minified exception&lt;/h2&gt;

&lt;p&gt;React周りでバグを作りこんでエラーが発生した場合、コンソールに以下のようなエラーメッセージが出ることがある。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Uncaught Error: Minified exception occured; use the non-minified dev environment for the full error message and additional helpful warnings.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これではエラーの詳細はわからない。詳細を見たい場合は、AtomをDev Modeで開いておく必要がある。
(e.g. Atomのメニューバーの[View]&amp;gt;[Developer]&amp;gt;[Open In Dev Mode]から開く。)&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
