<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>windows on To Be Decided</title>
    <link>https://www.kaitoy.xyz/tags/windows/</link>
    <description>Recent content in windows on To Be Decided</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2015 Kaito Yamada</copyright>
    <lastBuildDate>Sat, 19 Nov 2016 11:41:07 -0700</lastBuildDate>
    
	<atom:link href="https://www.kaitoy.xyz/tags/windows/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Currently Pcap4J Doesn&#39;t Work on Bash on Windows</title>
      <link>https://www.kaitoy.xyz/2016/11/19/pcap4j-doesnt-work-on-bow-yet/</link>
      <pubDate>Sat, 19 Nov 2016 11:41:07 -0700</pubDate>
      
      <guid>https://www.kaitoy.xyz/2016/11/19/pcap4j-doesnt-work-on-bow-yet/</guid>
      <description>TL;DR I&amp;rsquo;ve attempted to run Pcap4J on Bash on Windows (BoW) but it didn&amp;rsquo;t work due to lack of support for network staff in BoW.

   (adsbygoogle = window.adsbygoogle || []).push({});  What&amp;rsquo;s Bash on Windows Bash on Windows is a feature released in Windows 10 Anniversary Update to add Linux fanctionalities to Windows.
With this feature, we can run Bash and several Linux commands on Windows.</description>
    </item>
    
    <item>
      <title>Bash on WindowsでWindows側からUbuntu側のファイルをいじると壊れることがあるので注意</title>
      <link>https://www.kaitoy.xyz/2016/11/19/bow-do-not-change-linux-files-from-windows/</link>
      <pubDate>Sat, 19 Nov 2016 01:05:26 -0700</pubDate>
      
      <guid>https://www.kaitoy.xyz/2016/11/19/bow-do-not-change-linux-files-from-windows/</guid>
      <description>Bash on WindowsでWindows側からUbuntu側のファイルをいじると危険という情報を見つけたので、試してみたら確かに困った状態になった話。

   (adsbygoogle = window.adsbygoogle || []).push({});  Bash on Windowsとは Bash on Windows (aka BoW)は、2016/8/3に公開されたWindows 10 Anniversary Updateで使えるようになった、Windows上でBashが使えるようになる機能。
POSIX APIのWindows実装を提供するCygwinなどとは違い、WindowsのサブシステムとしてUbuntuが動き、その上でBashが動き、そこからUbuntu用のバイナリをそのまま利用できるというもの。
2016/11/17現在でまだベータ版の機能。
Windows側からUbuntu側のファイルをいじると壊れる問題 Microsoftの中の人のブログに、BoWがセットアップされた環境で、Windows側からUbuntu側のファイル(i.e. %localappdata%\lxss\以下のファイル)をいじると壊れるという話があった。 いかにもやってしまいそうな操作で危険だし、実際このブログの人はこれに関する問い合わせに毎日1,2件対応しているそうな。
原因は上記ブログに詳しいが、簡単に言うと、Windows側のプロセスがUbuntu側のファイルを作ったり編集したりする際、パーミッションなどのメタデータを適切に設定しないため、Ubuntu側でファイルが壊れたと判断されてしまうから。 こうなると、結果としてファイルが消えてしまったり、壊れたデータで上書きされてしまったりするとのこと。
因みに、Ubuntu側からWindows側のファイルをいじるのは問題ないらしい。
再現確認 そういえばまだBoWをさわったことがなかったので、セットアップして件の問題を体験してみた。
環境は、VMware Player 7.1.0で作ったVMに評価版のWindows 10 Enterprise v1607をインストールしたもの。 セットアップは公式の手順に従うだけ。2ステップだけの簡単な手順。
セットアップ後、コマンドプロンプトでbashとうつとBoWが起動する。(初回はインストール処理が走り、十数分待たされる。)
[コマンドプロンプト → Bash] 
再現確認に使うのはhogeと書いたhoge.txt。 これをWindows側のC:\Users\kaitoy\Desktop\とUbuntu側の/home/kaitoy/に置く。
[コマンドプロンプト]
[Bash]

Windows側からは、Ubuntuのファイルシステムが%localappdata%\lxss\にマウントされているように見える。 (lxssはエクスプローラーのオプションから「保護されたオペレーティングシステムファイルを表示しない（推奨）」のチェックをはずさないと見えない。見えなくてもアドレスバーにパスを入力すればアクセスできるけど。)

一方Ubuntu側からは、WindowsのCドライブが/mnt/cにマウントされているように見える。
[Bash]

ここで、コマンドプロンプトを開き、%localappdata%\lxss\hoge\kaitoy\(i.e. Ubuntu側の/home/kaitoy/)にcdし、hoge.txtをechoで編集してみた。
[コマンドプロンプト]

したらBashから見えなくなった。アクセスしようとすると「Input/output error」というエラーになる。これが件の現象か。
[Bash]
エクスプローラからは見えていたので、GUIで%localappdata%\lxss\hoge\kaitoy\hoge.txtを削除したら正常な状態に戻った。

再度同じhoge.txtを作り、今度はメモ帳で編集して内容をfooに変えてみた。 この場合は特に問題なし。なぜだ?</description>
    </item>
    
    <item>
      <title>Pcap4J on Nano Server on Hyper-V Containers on Windows 10 on VMware Playerにトライ</title>
      <link>https://www.kaitoy.xyz/2016/09/15/pcap4j-on-hyper-v-container-on-win10/</link>
      <pubDate>Thu, 15 Sep 2016 13:56:35 -0600</pubDate>
      
      <guid>https://www.kaitoy.xyz/2016/09/15/pcap4j-on-hyper-v-container-on-win10/</guid>
      <description>Pcap4Jが動くHyper-VコンテナをWindows 10上でビルドしようとしたけど3合目あたりで息絶えた話。

   (adsbygoogle = window.adsbygoogle || []).push({});  Hyper-V Containersとは Hyper-V Containersは、MicrosoftによるWindowsネイティブなコンテナ技術であるWindows Containersの一種で、これによるコンテナは、同じくWindows Containersの一種であるWindows Server Containersのものに比べて、より厳密に隔離されている分、起動コストが高い。
実体はDockerそのもので、コンテナイメージはDocker Hubからpullできるし、コンテナの操作や管理はdockerコマンドでやる。(昔はコンテナ操作用PowerShellコマンドレットもあったが、不評だったので廃止したようだ。) ソースもLinuxとWindowsで一本化されている。
Windows 10のAnniversary Updateで正式にリリースされたが、なんだかあまり注目されていない気がする。
Docker for Windowsとは全く別物なので注意。
Hyper-V Containersのインストール (on VMware Player) 自前のPCが5年前に買ったdynabookでWindows 10をサポートしていないので、VMware PlayerのVM上のWindows 10にHyper-V Containersをインストールしてみる。
VMは、Windows 7に入れたVMware Workstation 11.1.0 build-2496824に付属の VMware Player 7.1.0 build-2496824で作ったもの。 VMのバージョンは11.0。 2CPUでメモリは2.5GB。 ネットワークインターフェースはNAT。 このVMを、Hyper-Vが使えるように設定しておく。
この記事にしたがい、Windows 10の評価版をダウンロード。 今公開されている評価版はAnniversary Update適用済みのバージョン1607で、Hyper-V Containersをサポートしている。
これをさっき作ったVMにインストール。
Windows 10を起動し、以下、Windows Containers on Windows 10に従って進める。
 containers機能有効化
PowerShellプロンプトを管理者権限でひらき、以下のコマンドでcontainers機能を有効化。
PS C:\Windows\system32&amp;gt;Enable-WindowsOptionalFeature -Online -FeatureName containers -All  1分程度経つと再起動を促されるので再起動。</description>
    </item>
    
    <item>
      <title>Hyper-Vコンテナ(Nano Server)でunzipしたいならjarを使え</title>
      <link>https://www.kaitoy.xyz/2016/09/12/unzip-on-nanoserver/</link>
      <pubDate>Mon, 12 Sep 2016 16:46:54 -0600</pubDate>
      
      <guid>https://www.kaitoy.xyz/2016/09/12/unzip-on-nanoserver/</guid>
      <description>Nano Serverでunzipしたかっただけだったのに、妙に苦労した話。

   (adsbygoogle = window.adsbygoogle || []).push({});  Nano Serverとは Nano Serverは、Windows Server 2016で追加されるWindows Serverの新たなインストール形式で、Server Coreよりさらに機能を絞り、リモートで管理するクラウドホストやWebサーバ向けにに特化したもの。
Server Coreが数GBくらいなのに対し、Nano Serverは数百MBととても軽量で、それゆえ起動が速くセキュア。
unzipとは unzipとは、[zip](https://ja.wikipedia.org/wiki/ZIP_(%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88)ファイルを解凍する、ただそれだけのこと。
ただそれだけのことで、基本的な機能だと思うのだが、Windowsはこれをコマンドラインで実行する方法をつい最近まで正式に提供していなかった。
Nano Serverでunzip Windows 10のHyper-V Containersの上でPcap4JのビルドとテストをするDockerイメージをビルドしたくて、そのための依存ライブラリなどをインストールする処理をDockerfileに書いていて、ADDでzipをダウンロードしたところまではいいんだけど、このzipどうやって解凍してやろうかとなった。 (Dockerホストに置いたものをコンテナにADDするのはなんか格好悪いから無しで。Dockerfile裸一貫で実現したい。)
Windows 10のHyper-V Containersは、現時点でNano Serverしかサポートしていないのが厳しい点。Server Coreだったら楽だったのに。

以下、いろいろ試したことを書く。
正攻法: Expand-Archive PowerShellの v5 で実装されたExpand-Archiveというコマンドレットでzipを解凍できる。 Nano ServerのPowerShellのバージョンを確認したら 5.1 だったのでこれでいけるかと思った。
C:\&amp;gt;powershell -command &amp;quot;$PSVersionTable.PSVersion&amp;quot; Major Minor Build Revision ----- ----- ----- -------- 5 1 14284 1000  
したらこのエラー。
Add-Type : Cannot find path &#39;C:\System.</description>
    </item>
    
    <item>
      <title>Docker for Windowsがコレジャナかった</title>
      <link>https://www.kaitoy.xyz/2016/07/31/docker-for-windows/</link>
      <pubDate>Sun, 31 Jul 2016 14:34:16 -0600</pubDate>
      
      <guid>https://www.kaitoy.xyz/2016/07/31/docker-for-windows/</guid>
      <description>7/28にDocker for Winodws(とDocker for Mac)の正式版リリースのアナウンスがあったので試してみたけど、期待していたものと違ったしなんだか上手く動かなかった話。

   (adsbygoogle = window.adsbygoogle || []).push({});  Docker for Windowsとは Docker for WindowsはDocker Toolboxの後継製品。(多分。)
Docker ToolboxはWindowsやMacでDockerを使うための製品で、以下のコンポーネントからなる。
 Docker Engine
コンテナランタイム。
 Docker Compose
複数のコンテナを組み合わせたアプリケーション/サービスの構築/管理ツール。
 Docker Machine
Docker仮想ホストのプロビジョニング/管理ツール。
 Kitematic
Dockerコンテナを管理するGUIを提供する製品。 Docker Machineと連携してローカルマシンへのDocker仮想ホストのプロビジョニングもしてくれる。
  Docker Toolboxを使うと、VirtualBoxのLinux VMをWindows/Mac上にプロビジョニングして、そのVMにDockerをインストールして、Windows/Macから利用できる。
Docker for Windowsもだいたい同じで、Docker EngineとDocker ComposeとDocker MachineをWinodwsで利用するための製品。 ElectronベースでOracleのVirtualBox依存なKitematicの代わりに、ネイティブなインストーラがWindows内蔵のHyper-Vを使ってDockerをセットアップしてくれる。 Hyper-Vを使うため、VirtualBoxより速くて高信頼らしい。 KitematicはDocker for Windowsには付属しないが、別途ダウンロードすればコンテナ管理に使える。Docker for WindowsとDocker Toolboxとは共存はできない。
私は勝手にDocker for WindowsはHyper-V ContainersのデスクトップOS版のようなものかと勘違いしていて、Windowsのコンテナが使えるようになったのかと期待したが違った。 Docker for Windowsは単にDocker ToolboxのVirtualBoxがHyper-Vになっただけのもので、結局Linux VMの中でDockerを使うだけのものだということにセットアップ中に気付いた。</description>
    </item>
    
    <item>
      <title>Windows Server 2016 TP5でWindows Containersにリトライ</title>
      <link>https://www.kaitoy.xyz/2016/07/11/windows_containers_on_tp5/</link>
      <pubDate>Mon, 11 Jul 2016 00:30:33 -0600</pubDate>
      
      <guid>https://www.kaitoy.xyz/2016/07/11/windows_containers_on_tp5/</guid>
      <description>Windows Server 2016のTechnical Preview 5(TP5)が公開されていたので、 TP4でバグに阻まれて挫折した、Windows ContainersでPcap4Jを使ってパケットキャプチャする試みにリトライした話。

   (adsbygoogle = window.adsbygoogle || []).push({});  OSセットアップ TP4のときと同じ環境。
以降はWindows Server Containersのクイックスタートガイドに沿ってセットアップを進める。 TP4からは大分変わっていて、単一のPowershellスクリプトを実行する形式から、Powershellのコマンドレットを逐次手動実行する形式になっている。 面倒だけど何やってるかわかりやすくて好き。
コンテナ機能のインストール  管理者権限のパワーシェルウィンドウを開く
コマンドプロンプトから以下のコマンドを実行。
powershell start-process powershell -Verb runas  コンテナ機能のインストール
開いた青いパワーシェルウィンドウで以下のコマンドを実行するとコンテナ機能がインストールされる。
Install-WindowsFeature containers  数分で終わる。
インストールされたのはHyper-V ContainersじゃなくてWindows Server Containersの方。 クイックスタートガイドをみると、前者がWindows 10向け、後者がWindows Server向けというように住み分けされているっぽい。TP4では両方ともWindows Serverで使えたんだけど。
 再起動
変更を有効にするために再起動が必要。
Restart-Computer -Force   Dockerインストール Dockerは、コンテナイメージの管理やコンテナの起動などもろもろの機能を提供するDockerデーモンと、その機能を利用するためのCLIを提供するDockerクライアントからなる。この節ではそれら両方をインストールする。
 Dockerインストールフォルダ作成
管理者権限のパワーシェルウィンドウを開いて、以下のコマンドでDockerインストールフォルダを作成。
New-Item -Type Directory -Path &#39;C:\Program Files\docker\&#39;  Dockerデーモンインストール
まずはデーモンの方をインストール。</description>
    </item>
    
    <item>
      <title>Pcap4J Meets Windows Containers</title>
      <link>https://www.kaitoy.xyz/2016/01/22/pcap4j-meets-windows-containers/</link>
      <pubDate>Fri, 22 Jan 2016 17:46:43 -0700</pubDate>
      
      <guid>https://www.kaitoy.xyz/2016/01/22/pcap4j-meets-windows-containers/</guid>
      <description>Windows Containers で Pcap4J のコンテナをビルドしてみた話。

   (adsbygoogle = window.adsbygoogle || []).push({});  Windows Containersとは Windows Containersは、MicrosoftがDocker, Incと提携して開発しているコンテナ技術で、Windows版Dockerとも言われる機能。 今年リリースされる Windows Server 2016 に実装される予定で、その3つめのテクニカルプレビューである Windows Server 2016 Technical Preview 3 (2015/8/19公開)から評価できるようになった。
Windows Containersには次の二種類がある。
 Windows Server Containers
プロセスと名前空間の分離を実現する機能で、これによるコンテナはカーネルをホストと共有する。 つまり本家Dockerに近い形の機能。
 Hyper-V Containers
それぞれのコンテナを軽量化されたHyper-Vの仮想マシンっぽいものの上で動かす機能。 このコンテナの実行にはHyper-Vが必要。 Windows Server Containersよりコンテナ間の分離性が高く、カーネルの共有もしないが、そもそもそれってコンテナなの?
  どちらも同じようなインターフェースで操作でき、このインターフェースにはPowershellのコマンドレットとDockerコマンドの二種類がある。
より詳しくは、Microsoftによる解説や@ITのこの記事がわかりやすい。 また、Qiitaのこの記事がDockerとWindows Server Containersのアーキテクチャを詳細に説明していて面白い。
Windows Containersセットアップ まず、Windows 7 x64のノートPCにVMware Player 7.1.0を入れてWindows 10 x64用のVM(CPU2つとメモリ2.5GB)を作り、そこに2015/11/19に公開された Windows Server 2016 Technical Preview 4 をインストール。 コマンドでいろいろ設定するの慣れていないのでGUI(Desktop Experience)付きで。 (リモートデスクトップ使えばよかったのかもしれないけど。) ロケールは英語以外は問題が起きそうなので英語で。</description>
    </item>
    
    <item>
      <title>Pcap4J with Four Native Libraries on Windows 10</title>
      <link>https://www.kaitoy.xyz/2016/01/12/pcap4j-with-four-native-libraries-on-windows10/</link>
      <pubDate>Tue, 12 Jan 2016 08:43:30 -0700</pubDate>
      
      <guid>https://www.kaitoy.xyz/2016/01/12/pcap4j-with-four-native-libraries-on-windows10/</guid>
      <description>I did some basic tests for Pcap4J 1.6.2 on Windows 10 Pro on VMware Player 7.1.0 using the following native packet capture libraries:
 Official WinPcap 4.1.3 Unofficial WinPcap based on libpcap 1.7.4 Win10Pcap 10.2 Npcap 0.0.5  This article explains each of the above libraries and tells the test results.

   (adsbygoogle = window.adsbygoogle || []).push({});  Official WinPcap WinPcap is the most common native packet capture library developed based on libpcap.</description>
    </item>
    
  </channel>
</rss>