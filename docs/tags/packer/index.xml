<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>packer on To Be Decided</title>
    <link>https://www.kaitoy.xyz/tags/packer/</link>
    <description>Recent content in packer on To Be Decided</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2015 Kaito Yamada</copyright>
    <lastBuildDate>Sat, 30 Jun 2018 16:56:34 +0900</lastBuildDate>
    
	<atom:link href="https://www.kaitoy.xyz/tags/packer/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PackerでESXiにVMを自動構築</title>
      <link>https://www.kaitoy.xyz/2018/06/30/packer-esxi/</link>
      <pubDate>Sat, 30 Jun 2018 16:56:34 +0900</pubDate>
      
      <guid>https://www.kaitoy.xyz/2018/06/30/packer-esxi/</guid>
      <description>前回「Packer + Ansible on Windows 10でKubernetes 1.10のクラスタ on VirtualBoxを全自動構築」で、やったことをESXiでやっただけ。
書いたコードはGitHubに置いてある。
   (adsbygoogle = window.adsbygoogle || []).push({});  前回との違い VirtualBoxとESXiとで変えないといけない部分は、主にPackerのbuilderの定義。 前回はvirtualbox-isoだったけど、今回はvmware-isoを使う。 それに伴ってパラメータが結構違ってくる。
いっこトリッキーだったのが、cdrom_adapter_typeにideを明示的に指定しておかないと、CDロムドライブがSCSIになって、OSのインストールメディアのマウントか読み取り辺りでエラーになってしまったところ。 環境によっては指定しないでいいかも。
また、&amp;quot;vnc_disable_password&amp;quot;: &amp;quot;true&amp;quot;をbuilderに指定しておかないと、Packerが「Error handshaking with VNC: no suitable auth schemes found. server supported: []byte{0x1}」というエラーを出す。
あとは、Nested Virtualizationでやった(下記)ので、すごく遅くて、色々タイムアウトを伸ばしたりしてやる必要があった。
ESXi環境 ESXi(というかVMware vSphere Hypervisor)は、現時点での最新の6.7を使用。 自前のWindows 10 HomeのノートPC上で動くVMware Player 12で作ったVMにESXiをインストールして環境を作った。
(因みにVirtualBoxにもインストールしてみたESXi上ではVM作成できなかった。VirtualBoxは今の時点でNested Virtualization未サポートで、サポートする予定もない模様。)
Packerから操作するには、以下の設定をする必要がある。
 静的IPアドレスを設定。Packerからの接続先に指定するので。 SSH有効化。PackerがSSHで接続するので。  因みにSSHクライアントでESXiにつなぐときは、チャレンジ/レスポンス認証になる。  GuestIPHack の有効化  ESXiにSSHでログインして「esxcli system settings advanced set -o /Net/GuestIPHack -i 1」  ファイアウォール設定でVNCポート(TCP5900番台)を開ける。 これをしないとPackerが「Starting HTTP server on port xxxx」でハングする。 けどこれが一筋縄ではいかない。この記事にあるように、/etc/vmware/firewall/service.</description>
    </item>
    
    <item>
      <title>Packer &#43; Ansible on Windows 10でKubernetes 1.10のクラスタ on VirtualBoxを全自動構築</title>
      <link>https://www.kaitoy.xyz/2018/06/17/packer-k8s/</link>
      <pubDate>Sun, 17 Jun 2018 23:22:33 +0900</pubDate>
      
      <guid>https://www.kaitoy.xyz/2018/06/17/packer-k8s/</guid>
      <description>「Kubernetes 1.10のクラスタを全手動で構築するのをAnsibleで全自動化した」の続きで、さらにPackerを組み合わせて、VM作成まで自動化した話。
AnsibleをWindows(MSYS2)で動かした話でもある。
書いたPackerテンプレートはGitHubに置いた。
   (adsbygoogle = window.adsbygoogle || []).push({});  Packerとは Packerは、様々な種類のVMを構築できるツール。 VagrantとかTerraformとかを開発しているHashiCorpが開発している。
テンプレートと呼ばれるビルド定義をJSONファイルに書いて、ビルド、プロビジョニング、ポストプロセスを実行して、アーティファクトと呼ばれるビルドの成果物を生成する。
ビルドのステップでは、VMを作成して、ハードウェア構成を設定したり、OSをインストールしたりする。
以下のような環境でVMを作れる。
 VirtualBox Hyper-V VMware Workstation VMware vSphere Hypervisor Docker AWS EC2  
プロビジョニングのステップでは、ビルドで作ったVMのOS上で指定された操作を実行し、ソフトウェアのインストールなどのセットアップ処理をする。
プロビジョニングには以下のようなツールを使える。
 Shell PowerShell Ansible Chef Puppet  プロビジョニングが終わるとアーティファクト(VMイメージファイルや、AWS EC2のAMI IDとか)が出力される。

ポストプロセスのステップでは、アーティファクトを入力として何らかの処理をして、最終的なアーティファクトを生成する。
ポストプロセスでは以下のような処理を実行できる。
 アーカイブ VagrantBox生成 AWS EC2へのインポート Docker push  
PackerはGoで書かれていてビルド済みのバイナリが配布されているので、ダウンロードページから落として PATHの通ったところに置くだけでインストールできる。

今回はPacker 1.2.4のWindows版をインストールした。
Packerのテンプレート概要 Packerのテンプレートにはビルド、プロビジョニング、ポストプロセスの定義を複数かけて、複数環境のVM生成を1ファイルで定義できる。
テンプレートには以下のプロパティを書く。
 builders: ビルドの定義のリスト。 description: テンプレートの説明。 min_packer_version: Packer の最低バージョン指定。 post-processors: ポストプロセスの定義のリスト。 provisioners: プロビジョニングの定義のリスト。 variables: テンプレート内で使う変数の定義。 _comment: コメントなどを書くためのプロパティ。実際はアンダースコアで始まればなんでもいい。JSON オブジェクトのルートレベルのみで使える。  これらのうち、必須なのはbuildersだけ。</description>
    </item>
    
  </channel>
</rss>